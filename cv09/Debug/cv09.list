
cv09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800b180  0800b180  0000c180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b930  0800b930  0000d2e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b930  0800b930  0000c930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b938  0800b938  0000d2e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b938  0800b938  0000c938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b93c  0800b93c  0000c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  0800b940  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d2e4  2**0
                  CONTENTS
 10 .bss          00000b90  200002e4  200002e4  0000d2e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e74  20000e74  0000d2e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d2e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001105b  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e6b  00000000  00000000  0001e36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  000211e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a83  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026318  00000000  00000000  00022a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c3d  00000000  00000000  00048d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d81bb  00000000  00000000  0005b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133b6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004adc  00000000  00000000  00133bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0013868c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b168 	.word	0x0800b168

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	0800b168 	.word	0x0800b168

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f80:	e000      	b.n	8000f84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f9      	beq.n	8000f82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f8e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffd1 	bl	8000f58 <ITM_SendChar>
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <step>:

extern USBD_HandleTypeDef hUsbDeviceFS;

void step(int8_t x, int8_t y, uint8_t click)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	buff[0] = click; // press the left button
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	733b      	strb	r3, [r7, #12]
	buff[1] = (int8_t) (x); // shift X +10
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	737b      	strb	r3, [r7, #13]
	buff[2] = (int8_t) (y); // shift Y -3
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // no scroll
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4808      	ldr	r0, [pc, #32]	@ (800100c <step+0x4c>)
 8000fec:	f004 fec6 	bl	8005d7c <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000ff0:	4806      	ldr	r0, [pc, #24]	@ (800100c <step+0x4c>)
 8000ff2:	f004 fef3 	bl	8005ddc <USBD_HID_GetPollingInterval>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fd2f 	bl	8001a5c <HAL_Delay>
	HAL_Delay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f000 fd2c 	bl	8001a5c <HAL_Delay>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000354 	.word	0x20000354

08001010 <circ>:

void circ(int8_t r)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	ed2d 8b02 	vpush	{d8}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	int8_t sx;
	int8_t sy;
	for (float phi = 0; phi < (2 * 3.14f); phi = phi + 0.1)
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	e072      	b.n	800110c <circ+0xfc>
	{
		float x = r * cosf(phi);
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001032:	ed97 0a06 	vldr	s0, [r7, #24]
 8001036:	f009 fb19 	bl	800a66c <cosf>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001042:	edc7 7a05 	vstr	s15, [r7, #20]
		float y = r * sinf(phi);
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001052:	ed97 0a06 	vldr	s0, [r7, #24]
 8001056:	f009 fb4d 	bl	800a6f4 <sinf>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001062:	edc7 7a04 	vstr	s15, [r7, #16]

		printf("%.2f, %.2f\n", x, y);
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff fa7e 	bl	8000568 <__aeabi_f2d>
 800106c:	4604      	mov	r4, r0
 800106e:	460d      	mov	r5, r1
 8001070:	6938      	ldr	r0, [r7, #16]
 8001072:	f7ff fa79 	bl	8000568 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9cd 2300 	strd	r2, r3, [sp]
 800107e:	4622      	mov	r2, r4
 8001080:	462b      	mov	r3, r5
 8001082:	482d      	ldr	r0, [pc, #180]	@ (8001138 <circ+0x128>)
 8001084:	f007 fb78 	bl	8008778 <iprintf>

		int8_t dx = x - sx;
 8001088:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	ed97 7a05 	vldr	s14, [r7, #20]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	edc7 7a00 	vstr	s15, [r7]
 80010a4:	783b      	ldrb	r3, [r7, #0]
 80010a6:	73fb      	strb	r3, [r7, #15]
		int8_t dy = y - sy;
 80010a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80010b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c0:	edc7 7a00 	vstr	s15, [r7]
 80010c4:	783b      	ldrb	r3, [r7, #0]
 80010c6:	73bb      	strb	r3, [r7, #14]

		step(dx, dy, 1);
 80010c8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff74 	bl	8000fc0 <step>

		sx += dx;
 80010d8:	7ffa      	ldrb	r2, [r7, #31]
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	4413      	add	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	77fb      	strb	r3, [r7, #31]
		sy += dy;
 80010e2:	7fba      	ldrb	r2, [r7, #30]
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	4413      	add	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	77bb      	strb	r3, [r7, #30]
	for (float phi = 0; phi < (2 * 3.14f); phi = phi + 0.1)
 80010ec:	69b8      	ldr	r0, [r7, #24]
 80010ee:	f7ff fa3b 	bl	8000568 <__aeabi_f2d>
 80010f2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001130 <circ+0x120>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f8d8 	bl	80002ac <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd60 	bl	8000bc8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001110:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800113c <circ+0x12c>
 8001114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	d483      	bmi.n	8001026 <circ+0x16>
		//printf("%.2f\n", phi);
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	ecbd 8b02 	vpop	{d8}
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	9999999a 	.word	0x9999999a
 8001134:	3fb99999 	.word	0x3fb99999
 8001138:	0800b180 	.word	0x0800b180
 800113c:	40c8f5c3 	.word	0x40c8f5c3

08001140 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	ed2d 8b02 	vpush	{d8}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800114a:	f000 fc15 	bl	8001978 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800114e:	f000 f8db 	bl	8001308 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001152:	f000 f96d 	bl	8001430 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001156:	f000 f941 	bl	80013dc <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 800115a:	f006 f9ad 	bl	80074b8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800115e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001162:	f000 fc7b 	bl	8001a5c <HAL_Delay>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		circ(100);
 8001166:	2064      	movs	r0, #100	@ 0x64
 8001168:	f7ff ff52 	bl	8001010 <circ>

		step(0, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ff25 	bl	8000fc0 <step>
		step(-60, -20, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	f06f 0113 	mvn.w	r1, #19
 800117c:	f06f 003b 	mvn.w	r0, #59	@ 0x3b
 8001180:	f7ff ff1e 	bl	8000fc0 <step>
		step(0, 30, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	211e      	movs	r1, #30
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff ff19 	bl	8000fc0 <step>

		step(-20, -25, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	f06f 0118 	mvn.w	r1, #24
 8001194:	f06f 0013 	mvn.w	r0, #19
 8001198:	f7ff ff12 	bl	8000fc0 <step>
		circ(20);
 800119c:	2014      	movs	r0, #20
 800119e:	f7ff ff37 	bl	8001010 <circ>

		step(0, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ff0a 	bl	8000fc0 <step>
		step(50, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2032      	movs	r0, #50	@ 0x32
 80011b2:	f7ff ff05 	bl	8000fc0 <step>

		circ(20);
 80011b6:	2014      	movs	r0, #20
 80011b8:	f7ff ff2a 	bl	8001010 <circ>

		step(0, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fefd 	bl	8000fc0 <step>

		step(-80, -20, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f06f 0113 	mvn.w	r1, #19
 80011cc:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 80011d0:	f7ff fef6 	bl	8000fc0 <step>

		int8_t sx = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
		int8_t sy = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	77bb      	strb	r3, [r7, #30]
		for (float phi = 0.785; phi < 2; phi = phi + 0.1)
 80011dc:	4b48      	ldr	r3, [pc, #288]	@ (8001300 <main+0x1c0>)
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	e072      	b.n	80012c8 <main+0x188>
		{
			uint8_t r = 75;
 80011e2:	234b      	movs	r3, #75	@ 0x4b
 80011e4:	75fb      	strb	r3, [r7, #23]
			float x = r * cosf(phi);
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011f0:	ed97 0a06 	vldr	s0, [r7, #24]
 80011f4:	f009 fa3a 	bl	800a66c <cosf>
 80011f8:	eef0 7a40 	vmov.f32	s15, s0
 80011fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001200:	edc7 7a04 	vstr	s15, [r7, #16]
			float y = r * sinf(phi);
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800120e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001212:	f009 fa6f 	bl	800a6f4 <sinf>
 8001216:	eef0 7a40 	vmov.f32	s15, s0
 800121a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800121e:	edc7 7a03 	vstr	s15, [r7, #12]

			printf("%.2f, %.2f\n", x, y);
 8001222:	6938      	ldr	r0, [r7, #16]
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff f99b 	bl	8000568 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9cd 2300 	strd	r2, r3, [sp]
 800123a:	4622      	mov	r2, r4
 800123c:	462b      	mov	r3, r5
 800123e:	4831      	ldr	r0, [pc, #196]	@ (8001304 <main+0x1c4>)
 8001240:	f007 fa9a 	bl	8008778 <iprintf>

			int8_t dx = x - sx;
 8001244:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001250:	ed97 7a04 	vldr	s14, [r7, #16]
 8001254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	72fb      	strb	r3, [r7, #11]
			int8_t dy = y - sy;
 8001264:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001270:	ed97 7a03 	vldr	s14, [r7, #12]
 8001274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001280:	793b      	ldrb	r3, [r7, #4]
 8001282:	72bb      	strb	r3, [r7, #10]

			step(dx, dy, 1);
 8001284:	f997 100a 	ldrsb.w	r1, [r7, #10]
 8001288:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800128c:	2201      	movs	r2, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe96 	bl	8000fc0 <step>

			sx += dx;
 8001294:	7ffa      	ldrb	r2, [r7, #31]
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	4413      	add	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	77fb      	strb	r3, [r7, #31]
			sy += dy;
 800129e:	7fba      	ldrb	r2, [r7, #30]
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	4413      	add	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	77bb      	strb	r3, [r7, #30]
		for (float phi = 0.785; phi < 2; phi = phi + 0.1)
 80012a8:	69b8      	ldr	r0, [r7, #24]
 80012aa:	f7ff f95d 	bl	8000568 <__aeabi_f2d>
 80012ae:	a312      	add	r3, pc, #72	@ (adr r3, 80012f8 <main+0x1b8>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7fe fffa 	bl	80002ac <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc82 	bl	8000bc8 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d483      	bmi.n	80011e2 <main+0xa2>
			//printf("%.2f\n", phi);
		}

		step(0, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fe6e 	bl	8000fc0 <step>
		step(100, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2064      	movs	r0, #100	@ 0x64
 80012ea:	f7ff fe69 	bl	8000fc0 <step>

		HAL_Delay(1000);
 80012ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f2:	f000 fbb3 	bl	8001a5c <HAL_Delay>
	{
 80012f6:	e736      	b.n	8001166 <main+0x26>
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	3fb99999 	.word	0x3fb99999
 8001300:	3f48f5c3 	.word	0x3f48f5c3
 8001304:	0800b180 	.word	0x0800b180

08001308 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	@ 0x50
 800130c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	2230      	movs	r2, #48	@ 0x30
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f007 fa83 	bl	8008822 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <SystemClock_Config+0xcc>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a27      	ldr	r2, [pc, #156]	@ (80013d4 <SystemClock_Config+0xcc>)
 8001336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <SystemClock_Config+0xcc>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <SystemClock_Config+0xd0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <SystemClock_Config+0xd0>)
 8001352:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <SystemClock_Config+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001368:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001376:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001378:	2304      	movs	r3, #4
 800137a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800137c:	23a8      	movs	r3, #168	@ 0xa8
 800137e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001384:	2307      	movs	r3, #7
 8001386:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f89b 	bl	80034c8 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001398:	f000 f93c 	bl	8001614 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139c:	230f      	movs	r3, #15
 800139e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013ac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2105      	movs	r1, #5
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fafc 	bl	80039b8 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80013c6:	f000 f925 	bl	8001614 <Error_Handler>
	}
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	@ 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <MX_USART3_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_USART3_UART_Init+0x4c>)
 8001414:	f002 fcf0 	bl	8003df8 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800141e:	f000 f8f9 	bl	8001614 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000300 	.word	0x20000300
 800142c:	40004800 	.word	0x40004800

08001430 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b6d      	ldr	r3, [pc, #436]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a6c      	ldr	r2, [pc, #432]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b6a      	ldr	r3, [pc, #424]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a65      	ldr	r2, [pc, #404]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b63      	ldr	r3, [pc, #396]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b5f      	ldr	r3, [pc, #380]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a5e      	ldr	r2, [pc, #376]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a57      	ldr	r2, [pc, #348]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b55      	ldr	r3, [pc, #340]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a50      	ldr	r2, [pc, #320]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a49      	ldr	r2, [pc, #292]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <MX_GPIO_Init+0x1d0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80014f4:	4843      	ldr	r0, [pc, #268]	@ (8001604 <MX_GPIO_Init+0x1d4>)
 80014f6:	f000 fd93 	bl	8002020 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2140      	movs	r1, #64	@ 0x40
 80014fe:	4842      	ldr	r0, [pc, #264]	@ (8001608 <MX_GPIO_Init+0x1d8>)
 8001500:	f000 fd8e 	bl	8002020 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001508:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	483c      	ldr	r0, [pc, #240]	@ (800160c <MX_GPIO_Init+0x1dc>)
 800151c:	f000 fbd4 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001520:	2332      	movs	r3, #50	@ 0x32
 8001522:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001530:	230b      	movs	r3, #11
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4834      	ldr	r0, [pc, #208]	@ (800160c <MX_GPIO_Init+0x1dc>)
 800153c:	f000 fbc4 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001540:	2386      	movs	r3, #134	@ 0x86
 8001542:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001550:	230b      	movs	r3, #11
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	482d      	ldr	r0, [pc, #180]	@ (8001610 <MX_GPIO_Init+0x1e0>)
 800155c:	f000 fbb4 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001560:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001564:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4822      	ldr	r0, [pc, #136]	@ (8001604 <MX_GPIO_Init+0x1d4>)
 800157a:	f000 fba5 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800157e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001582:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001590:	230b      	movs	r3, #11
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	481a      	ldr	r0, [pc, #104]	@ (8001604 <MX_GPIO_Init+0x1d4>)
 800159c:	f000 fb94 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015a0:	2340      	movs	r3, #64	@ 0x40
 80015a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4814      	ldr	r0, [pc, #80]	@ (8001608 <MX_GPIO_Init+0x1d8>)
 80015b8:	f000 fb86 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	480e      	ldr	r0, [pc, #56]	@ (8001608 <MX_GPIO_Init+0x1d8>)
 80015d0:	f000 fb7a 	bl	8001cc8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80015d4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e6:	230b      	movs	r3, #11
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_GPIO_Init+0x1d8>)
 80015f2:	f000 fb69 	bl	8001cc8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	@ 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400
 8001608:	40021800 	.word	0x40021800
 800160c:	40020800 	.word	0x40020800
 8001610:	40020000 	.word	0x40020000

08001614 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <Error_Handler+0x8>

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <HAL_MspInit+0x4c>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001634:	6453      	str	r3, [r2, #68]	@ 0x44
 8001636:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_MspInit+0x4c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_UART_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12c      	bne.n	80016ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <HAL_UART_MspInit+0x8c>)
 80016e8:	f000 faee 	bl	8001cc8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	@ 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020c00 	.word	0x40020c00

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <NMI_Handler+0x4>

08001708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <MemManage_Handler+0x4>

08001718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <UsageFault_Handler+0x4>

08001728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001756:	f000 f961 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <OTG_FS_IRQHandler+0x10>)
 8001766:	f000 fdb8 	bl	80022da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000830 	.word	0x20000830

08001774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_kill>:

int _kill(int pid, int sig)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178e:	f007 f89b 	bl	80088c8 <__errno>
 8001792:	4603      	mov	r3, r0
 8001794:	2216      	movs	r2, #22
 8001796:	601a      	str	r2, [r3, #0]
  return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_exit>:

void _exit (int status)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ffe7 	bl	8001784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b6:	bf00      	nop
 80017b8:	e7fd      	b.n	80017b6 <_exit+0x12>

080017ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e00a      	b.n	80017e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017cc:	f3af 8000 	nop.w
 80017d0:	4601      	mov	r1, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	60ba      	str	r2, [r7, #8]
 80017d8:	b2ca      	uxtb	r2, r1
 80017da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbf0      	blt.n	80017cc <_read+0x12>
  }

  return len;
 80017ea:	687b      	ldr	r3, [r7, #4]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e009      	b.n	800181a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	60ba      	str	r2, [r7, #8]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fbc9 	bl	8000fa6 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf1      	blt.n	8001806 <_write+0x12>
  }
  return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_close>:

int _close(int file)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001854:	605a      	str	r2, [r3, #4]
  return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_isatty>:

int _isatty(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f007 f800 	bl	80088c8 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20030000 	.word	0x20030000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	20000348 	.word	0x20000348
 80018fc:	20000e78 	.word	0x20000e78

08001900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800195c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001928:	f7ff ffea 	bl	8001900 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	@ (8001964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	@ (8001970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001952:	f006 ffbf 	bl	80088d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fbf3 	bl	8001140 <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800195c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8001968:	0800b940 	.word	0x0800b940
  ldr r2, =_sbss
 800196c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8001970:	20000e74 	.word	0x20000e74

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_Init+0x40>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_Init+0x40>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_Init+0x40>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f94f 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fe38 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f967 	bl	8001cae <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f92f 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	@ (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	2000034c 	.word	0x2000034c

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000034c 	.word	0x2000034c

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <__NVIC_SetPriorityGrouping>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	@ (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	@ 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff3e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff8e 	bl	8001b98 <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff31 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e177      	b.n	8001fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f040 8166 	bne.w	8001fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d005      	beq.n	8001d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d130      	bne.n	8001d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d50:	2201      	movs	r2, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 0201 	and.w	r2, r3, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d017      	beq.n	8001db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d123      	bne.n	8001e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80c0 	beq.w	8001fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b66      	ldr	r3, [pc, #408]	@ (8001fec <HAL_GPIO_Init+0x324>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a65      	ldr	r2, [pc, #404]	@ (8001fec <HAL_GPIO_Init+0x324>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b63      	ldr	r3, [pc, #396]	@ (8001fec <HAL_GPIO_Init+0x324>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6a:	4a61      	ldr	r2, [pc, #388]	@ (8001ff0 <HAL_GPIO_Init+0x328>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	@ (8001ff4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d037      	beq.n	8001f06 <HAL_GPIO_Init+0x23e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a57      	ldr	r2, [pc, #348]	@ (8001ff8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_GPIO_Init+0x23a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	@ (8001ffc <HAL_GPIO_Init+0x334>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x236>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a55      	ldr	r2, [pc, #340]	@ (8002000 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x232>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	@ (8002004 <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a53      	ldr	r2, [pc, #332]	@ (8002008 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x22a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	@ (800200c <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	@ (8002010 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	@ (8002014 <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8002018 <HAL_GPIO_Init+0x350>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001ede:	2309      	movs	r3, #9
 8001ee0:	e012      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	e010      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e00e      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	@ (8001ff0 <HAL_GPIO_Init+0x328>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a34      	ldr	r2, [pc, #208]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b32      	ldr	r3, [pc, #200]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a29      	ldr	r2, [pc, #164]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7a:	4b28      	ldr	r3, [pc, #160]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	@ (800201c <HAL_GPIO_Init+0x354>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae84 	bls.w	8001ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	@ 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40022000 	.word	0x40022000
 8002018:	40022400 	.word	0x40022400
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af02      	add	r7, sp, #8
 8002058:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e101      	b.n	8002268 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f005 fb50 	bl	8007724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002092:	d102      	bne.n	800209a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fa85 	bl	80045ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7c1a      	ldrb	r2, [r3, #16]
 80020ac:	f88d 2000 	strb.w	r2, [sp]
 80020b0:	3304      	adds	r3, #4
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	f002 f964 	bl	8004380 <USB_CoreInit>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0ce      	b.n	8002268 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fa7d 	bl	80045d0 <USB_SetCurrentMode>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0bf      	b.n	8002268 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e04a      	b.n	8002184 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3315      	adds	r3, #21
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3314      	adds	r3, #20
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	b298      	uxth	r0, r3
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	332e      	adds	r3, #46	@ 0x2e
 800212a:	4602      	mov	r2, r0
 800212c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3318      	adds	r3, #24
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	331c      	adds	r3, #28
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3320      	adds	r3, #32
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3324      	adds	r3, #36	@ 0x24
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	3301      	adds	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	791b      	ldrb	r3, [r3, #4]
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3af      	bcc.n	80020ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e044      	b.n	800221e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	791b      	ldrb	r3, [r3, #4]
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	429a      	cmp	r2, r3
 8002226:	d3b5      	bcc.n	8002194 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7c1a      	ldrb	r2, [r3, #16]
 8002230:	f88d 2000 	strb.w	r2, [sp]
 8002234:	3304      	adds	r3, #4
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	f002 fa16 	bl	8004668 <USB_DevInit>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2202      	movs	r2, #2
 8002246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00c      	b.n	8002268 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fa60 	bl	8005726 <USB_DevDisconnect>

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_Start+0x1c>
 8002288:	2302      	movs	r3, #2
 800228a:	e022      	b.n	80022d2 <HAL_PCD_Start+0x62>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 f967 	bl	800458c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fa0e 	bl	80056e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022da:	b590      	push	{r4, r7, lr}
 80022dc:	b08d      	sub	sp, #52	@ 0x34
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 facc 	bl	800588e <USB_GetMode>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 848c 	bne.w	8002c16 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fa30 	bl	8005768 <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8482 	beq.w	8002c14 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fa1d 	bl	8005768 <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d107      	bne.n	8002348 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f002 0202 	and.w	r2, r2, #2
 8002346:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 fa0b 	bl	8005768 <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b10      	cmp	r3, #16
 800235a:	d161      	bne.n	8002420 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0210 	bic.w	r2, r2, #16
 800236a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	0c5b      	lsrs	r3, r3, #17
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	2b02      	cmp	r3, #2
 8002396:	d124      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d035      	beq.n	8002410 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	6a38      	ldr	r0, [r7, #32]
 80023b8:	f003 f842 	bl	8005440 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c8:	441a      	add	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023da:	441a      	add	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	e016      	b.n	8002410 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	0c5b      	lsrs	r3, r3, #17
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d110      	bne.n	8002410 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f4:	2208      	movs	r2, #8
 80023f6:	4619      	mov	r1, r3
 80023f8:	6a38      	ldr	r0, [r7, #32]
 80023fa:	f003 f821 	bl	8005440 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800240a:	441a      	add	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0210 	orr.w	r2, r2, #16
 800241e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f003 f99f 	bl	8005768 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002430:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002434:	f040 80a7 	bne.w	8002586 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 f9a4 	bl	800578e <USB_ReadDevAllOutEpInterrupt>
 8002446:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002448:	e099      	b.n	800257e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808e 	beq.w	8002572 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f003 f9c8 	bl	80057f6 <USB_ReadDevOutEPInterrupt>
 8002466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800247e:	461a      	mov	r2, r3
 8002480:	2301      	movs	r3, #1
 8002482:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fe8c 	bl	80031a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00c      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a2:	461a      	mov	r2, r3
 80024a4:	2308      	movs	r3, #8
 80024a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 ff62 	bl	8003374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	2310      	movs	r3, #16
 80024ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d030      	beq.n	8002538 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	2b80      	cmp	r3, #128	@ 0x80
 80024e0:	d109      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	78db      	ldrb	r3, [r3, #3]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2200      	movs	r2, #0
 8002518:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f005 fa13 	bl	800794c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002532:	461a      	mov	r2, r3
 8002534:	2302      	movs	r3, #2
 8002536:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800254e:	461a      	mov	r2, r3
 8002550:	2320      	movs	r3, #32
 8002552:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800256a:	461a      	mov	r2, r3
 800256c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002570:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	3301      	adds	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f af62 	bne.w	800244a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f8ec 	bl	8005768 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002596:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800259a:	f040 80db 	bne.w	8002754 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 f90d 	bl	80057c2 <USB_ReadDevAllInEpInterrupt>
 80025a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80025ae:	e0cd      	b.n	800274c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80c2 	beq.w	8002740 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 f933 	bl	8005832 <USB_ReadDevInEPInterrupt>
 80025cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d057      	beq.n	8002688 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69f9      	ldr	r1, [r7, #28]
 80025f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025f8:	4013      	ands	r3, r2
 80025fa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002608:	461a      	mov	r2, r3
 800260a:	2301      	movs	r3, #1
 800260c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	799b      	ldrb	r3, [r3, #6]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d132      	bne.n	800267c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3320      	adds	r3, #32
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4403      	add	r3, r0
 8002636:	331c      	adds	r3, #28
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4419      	add	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4403      	add	r3, r0
 800264a:	3320      	adds	r3, #32
 800264c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d113      	bne.n	800267c <HAL_PCD_IRQHandler+0x3a2>
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3324      	adds	r3, #36	@ 0x24
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d108      	bne.n	800267c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002674:	461a      	mov	r2, r3
 8002676:	2101      	movs	r1, #1
 8002678:	f003 f93a 	bl	80058f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f005 f8dd 	bl	8007842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800269e:	461a      	mov	r2, r3
 80026a0:	2308      	movs	r3, #8
 80026a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026ba:	461a      	mov	r2, r3
 80026bc:	2310      	movs	r3, #16
 80026be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026d6:	461a      	mov	r2, r3
 80026d8:	2340      	movs	r3, #64	@ 0x40
 80026da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d023      	beq.n	800272e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026e8:	6a38      	ldr	r0, [r7, #32]
 80026ea:	f002 f921 	bl	8004930 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	3310      	adds	r3, #16
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f005 f92a 	bl	8007970 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002728:	461a      	mov	r2, r3
 800272a:	2302      	movs	r3, #2
 800272c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fca5 	bl	800308a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	3301      	adds	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800274c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	f47f af2e 	bne.w	80025b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f805 	bl	8005768 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002768:	d122      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002790:	2100      	movs	r1, #0
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fe8c 	bl	80034b0 <HAL_PCDEx_LPM_Callback>
 8002798:	e002      	b.n	80027a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f005 f8c8 	bl	8007930 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 ffd7 	bl	8005768 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027c4:	d112      	bne.n	80027ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f005 f884 	bl	80078e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027ea:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 ffb9 	bl	8005768 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002800:	f040 80b7 	bne.w	8002972 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2110      	movs	r1, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f002 f886 	bl	8004930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002828:	e046      	b.n	80028b8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002836:	461a      	mov	r2, r3
 8002838:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800283c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800284e:	0151      	lsls	r1, r2, #5
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	440a      	add	r2, r1
 8002854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002858:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800285c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286a:	461a      	mov	r2, r3
 800286c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002870:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	440a      	add	r2, r1
 8002888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800288c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002890:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b4:	3301      	adds	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	461a      	mov	r2, r3
 80028be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d3b2      	bcc.n	800282a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7bdb      	ldrb	r3, [r3, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f0:	f043 030b 	orr.w	r3, r3, #11
 80028f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002906:	f043 030b 	orr.w	r3, r3, #11
 800290a:	6453      	str	r3, [r2, #68]	@ 0x44
 800290c:	e015      	b.n	800293a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800291c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002920:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002924:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002934:	f043 030b 	orr.w	r3, r3, #11
 8002938:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002948:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800294c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800295c:	461a      	mov	r2, r3
 800295e:	f002 ffc7 	bl	80058f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fef6 	bl	8005768 <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002986:	d123      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f002 ff8c 	bl	80058aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 f843 	bl	8004a22 <USB_GetDevSpeed>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	f001 f9f2 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 80029ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029b2:	461a      	mov	r2, r3
 80029b4:	4620      	mov	r0, r4
 80029b6:	f001 fd47 	bl	8004448 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f004 ff69 	bl	8007892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 fec7 	bl	8005768 <USB_ReadInterrupts>
 80029da:	4603      	mov	r3, r0
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d10a      	bne.n	80029fa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f004 ff46 	bl	8007876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f002 0208 	and.w	r2, r2, #8
 80029f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 feb2 	bl	8005768 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	2b80      	cmp	r3, #128	@ 0x80
 8002a0c:	d123      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1e:	e014      	b.n	8002a4a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 faf2 	bl	8003028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	3301      	adds	r3, #1
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	791b      	ldrb	r3, [r3, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d3e4      	bcc.n	8002a20 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fe84 	bl	8005768 <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6a:	d13c      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a70:	e02b      	b.n	8002aca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3318      	adds	r3, #24
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d115      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da12      	bge.n	8002ac4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3317      	adds	r3, #23
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fab2 	bl	8003028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d3cd      	bcc.n	8002a72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fe3c 	bl	8005768 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002afa:	d156      	bne.n	8002baa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002afc:	2301      	movs	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b00:	e045      	b.n	8002b8e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d12e      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	da2b      	bge.n	8002b88 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b3c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d121      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b84:	6053      	str	r3, [r2, #4]
            break;
 8002b86:	e008      	b.n	8002b9a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	461a      	mov	r2, r3
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d3b3      	bcc.n	8002b02 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fdda 	bl	8005768 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f004 fee7 	bl	8007994 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fdc4 	bl	8005768 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d115      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f004 fed7 	bl	80079b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e000      	b.n	8002c16 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c14:	bf00      	nop
    }
  }
}
 8002c16:	3734      	adds	r7, #52	@ 0x34
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd90      	pop	{r4, r7, pc}

08002c1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_PCD_SetAddress+0x1a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e012      	b.n	8002c5c <HAL_PCD_SetAddress+0x40>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fd23 	bl	8005698 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	70fb      	strb	r3, [r7, #3]
 8002c76:	460b      	mov	r3, r1
 8002c78:	803b      	strh	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da0f      	bge.n	8002caa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3310      	adds	r3, #16
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	705a      	strb	r2, [r3, #1]
 8002ca8:	e00f      	b.n	8002cca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002cd6:	883b      	ldrh	r3, [r7, #0]
 8002cd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	78ba      	ldrb	r2, [r7, #2]
 8002ce4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cf8:	78bb      	ldrb	r3, [r7, #2]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d102      	bne.n	8002d04 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_PCD_EP_Open+0xae>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e00e      	b.n	8002d30 <HAL_PCD_EP_Open+0xcc>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 fea3 	bl	8004a6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da0f      	bge.n	8002d6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	3310      	adds	r3, #16
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	705a      	strb	r2, [r3, #1]
 8002d6a:	e00f      	b.n	8002d8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_Close+0x6e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Close+0x8c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fee1 	bl	8004b7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	799b      	ldrb	r3, [r3, #6]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	799b      	ldrb	r3, [r3, #6]
 8002e30:	461a      	mov	r2, r3
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	f001 ff7e 	bl	8004d34 <USB_EPStartXfer>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3310      	adds	r3, #16
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	799b      	ldrb	r3, [r3, #6]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	799b      	ldrb	r3, [r3, #6]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	f001 ff44 	bl	8004d34 <USB_EPStartXfer>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	7912      	ldrb	r2, [r2, #4]
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e04f      	b.n	8002f74 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da0f      	bge.n	8002efc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3310      	adds	r3, #16
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	705a      	strb	r2, [r3, #1]
 8002efa:	e00d      	b.n	8002f18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_PCD_EP_SetStall+0x82>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e01d      	b.n	8002f74 <HAL_PCD_EP_SetStall+0xbe>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fad2 	bl	80054f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7999      	ldrb	r1, [r3, #6]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f64:	461a      	mov	r2, r3
 8002f66:	f002 fcc3 	bl	80058f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	7912      	ldrb	r2, [r2, #4]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e042      	b.n	8003020 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da0f      	bge.n	8002fc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	3310      	adds	r3, #16
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	705a      	strb	r2, [r3, #1]
 8002fc0:	e00f      	b.n	8002fe2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 020f 	and.w	r2, r3, #15
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_PCD_EP_ClrStall+0x86>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e00e      	b.n	8003020 <HAL_PCD_EP_ClrStall+0xa4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fadb 	bl	80055cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da0c      	bge.n	8003056 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 020f 	and.w	r2, r3, #15
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	3310      	adds	r3, #16
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4413      	add	r3, r2
 8003050:	3304      	adds	r3, #4
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e00c      	b.n	8003070 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	4618      	mov	r0, r3
 8003078:	f002 f8fa 	bl	8005270 <USB_EPStopXfer>
 800307c:	4603      	mov	r3, r0
 800307e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003080:	7afb      	ldrb	r3, [r7, #11]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b08a      	sub	sp, #40	@ 0x28
 800308e:	af02      	add	r7, sp, #8
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3310      	adds	r3, #16
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d901      	bls.n	80030c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e06b      	b.n	800319a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d902      	bls.n	80030de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3303      	adds	r3, #3
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e6:	e02a      	b.n	800313e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d902      	bls.n	8003104 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3303      	adds	r3, #3
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68d9      	ldr	r1, [r3, #12]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	4603      	mov	r3, r0
 8003120:	6978      	ldr	r0, [r7, #20]
 8003122:	f002 f94f 	bl	80053c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	441a      	add	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	441a      	add	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	429a      	cmp	r2, r3
 8003152:	d809      	bhi.n	8003168 <PCD_WriteEmptyTxFifo+0xde>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800315c:	429a      	cmp	r2, r3
 800315e:	d203      	bcs.n	8003168 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1bf      	bne.n	80030e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	d811      	bhi.n	8003198 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	2201      	movs	r2, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	43db      	mvns	r3, r3
 800318e:	6939      	ldr	r1, [r7, #16]
 8003190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003194:	4013      	ands	r3, r2
 8003196:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	333c      	adds	r3, #60	@ 0x3c
 80031bc:	3304      	adds	r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	799b      	ldrb	r3, [r3, #6]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d17b      	bne.n	80032d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	4a61      	ldr	r2, [pc, #388]	@ (800336c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	f240 80b9 	bls.w	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80b3 	beq.w	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800320c:	6093      	str	r3, [r2, #8]
 800320e:	e0a7      	b.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003226:	461a      	mov	r2, r3
 8003228:	2320      	movs	r3, #32
 800322a:	6093      	str	r3, [r2, #8]
 800322c:	e098      	b.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 8093 	bne.w	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4a4b      	ldr	r2, [pc, #300]	@ (800336c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d90f      	bls.n	8003262 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003258:	461a      	mov	r2, r3
 800325a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800325e:	6093      	str	r3, [r2, #8]
 8003260:	e07e      	b.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	440b      	add	r3, r1
 8003284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	1ad2      	subs	r2, r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d114      	bne.n	80032c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032ac:	461a      	mov	r2, r3
 80032ae:	2101      	movs	r1, #1
 80032b0:	f002 fb1e 	bl	80058f0 <USB_EP0_OutStart>
 80032b4:	e006      	b.n	80032c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f004 fa9e 	bl	800780c <HAL_PCD_DataOutStageCallback>
 80032d0:	e046      	b.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4a26      	ldr	r2, [pc, #152]	@ (8003370 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d124      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f6:	6093      	str	r3, [r2, #8]
 80032f8:	e032      	b.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	2320      	movs	r3, #32
 8003314:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f004 fa75 	bl	800780c <HAL_PCD_DataOutStageCallback>
 8003322:	e01d      	b.n	8003360 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d114      	bne.n	8003354 <PCD_EP_OutXfrComplete_int+0x1b0>
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800334c:	461a      	mov	r2, r3
 800334e:	2100      	movs	r1, #0
 8003350:	f002 face 	bl	80058f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f004 fa56 	bl	800780c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	4f54300a 	.word	0x4f54300a
 8003370:	4f54310a 	.word	0x4f54310a

08003374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	333c      	adds	r3, #60	@ 0x3c
 800338c:	3304      	adds	r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <PCD_EP_OutSetupPacket_int+0x88>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d90e      	bls.n	80033c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c0:	461a      	mov	r2, r3
 80033c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f004 fa0d 	bl	80077e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <PCD_EP_OutSetupPacket_int+0x88>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d90c      	bls.n	80033f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	799b      	ldrb	r3, [r3, #6]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033e8:	461a      	mov	r2, r3
 80033ea:	2101      	movs	r1, #1
 80033ec:	f002 fa80 	bl	80058f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	4f54300a 	.word	0x4f54300a

08003400 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
 800340c:	4613      	mov	r3, r2
 800340e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800341e:	883b      	ldrh	r3, [r7, #0]
 8003420:	0419      	lsls	r1, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	430a      	orrs	r2, r1
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
 800342c:	e028      	b.n	8003480 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4413      	add	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e00d      	b.n	800345e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	3340      	adds	r3, #64	@ 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	3301      	adds	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	3b01      	subs	r3, #1
 8003464:	429a      	cmp	r2, r3
 8003466:	d3ec      	bcc.n	8003442 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003468:	883b      	ldrh	r3, [r7, #0]
 800346a:	0418      	lsls	r0, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	3b01      	subs	r3, #1
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	4302      	orrs	r2, r0
 8003478:	3340      	adds	r3, #64	@ 0x40
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e267      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d075      	beq.n	80035d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034e6:	4b88      	ldr	r3, [pc, #544]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d00c      	beq.n	800350c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b85      	ldr	r3, [pc, #532]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d112      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	4b82      	ldr	r3, [pc, #520]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350a:	d10b      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	4b7e      	ldr	r3, [pc, #504]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d05b      	beq.n	80035d0 <HAL_RCC_OscConfig+0x108>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d157      	bne.n	80035d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e242      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x74>
 800352e:	4b76      	ldr	r3, [pc, #472]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a75      	ldr	r2, [pc, #468]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x98>
 8003546:	4b70      	ldr	r3, [pc, #448]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6f      	ldr	r2, [pc, #444]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b6d      	ldr	r3, [pc, #436]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6c      	ldr	r2, [pc, #432]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 8003560:	4b69      	ldr	r3, [pc, #420]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a68      	ldr	r2, [pc, #416]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a65      	ldr	r2, [pc, #404]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fa60 	bl	8001a44 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fa5c 	bl	8001a44 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	@ 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e207      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b5b      	ldr	r3, [pc, #364]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xc0>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe fa4c 	bl	8001a44 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fa48 	bl	8001a44 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1f3      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b51      	ldr	r3, [pc, #324]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0xe8>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035de:	4b4a      	ldr	r3, [pc, #296]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b44      	ldr	r3, [pc, #272]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x152>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1c7      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4937      	ldr	r1, [pc, #220]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e03a      	b.n	80036a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b34      	ldr	r3, [pc, #208]	@ (800370c <HAL_RCC_OscConfig+0x244>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fe fa01 	bl	8001a44 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7fe f9fd 	bl	8001a44 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1a8      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b28      	ldr	r3, [pc, #160]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4925      	ldr	r1, [pc, #148]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b24      	ldr	r3, [pc, #144]	@ (800370c <HAL_RCC_OscConfig+0x244>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe f9e0 	bl	8001a44 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fe f9dc 	bl	8001a44 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e187      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d036      	beq.n	8003720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <HAL_RCC_OscConfig+0x248>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe f9c0 	bl	8001a44 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe f9bc 	bl	8001a44 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e167      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_OscConfig+0x240>)
 80036dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x200>
 80036e6:	e01b      	b.n	8003720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e8:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <HAL_RCC_OscConfig+0x248>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fe f9a9 	bl	8001a44 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f4:	e00e      	b.n	8003714 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe f9a5 	bl	8001a44 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d907      	bls.n	8003714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e150      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
 8003708:	40023800 	.word	0x40023800
 800370c:	42470000 	.word	0x42470000
 8003710:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	4b88      	ldr	r3, [pc, #544]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ea      	bne.n	80036f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8097 	beq.w	800385c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b81      	ldr	r3, [pc, #516]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	4b7d      	ldr	r3, [pc, #500]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	4a7c      	ldr	r2, [pc, #496]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	@ 0x40
 800374e:	4b7a      	ldr	r3, [pc, #488]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	4b77      	ldr	r3, [pc, #476]	@ (800393c <HAL_RCC_OscConfig+0x474>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376a:	4b74      	ldr	r3, [pc, #464]	@ (800393c <HAL_RCC_OscConfig+0x474>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a73      	ldr	r2, [pc, #460]	@ (800393c <HAL_RCC_OscConfig+0x474>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7fe f965 	bl	8001a44 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fe f961 	bl	8001a44 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e10c      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <HAL_RCC_OscConfig+0x474>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2ea>
 80037a4:	4b64      	ldr	r3, [pc, #400]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4a63      	ldr	r2, [pc, #396]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b0:	e01c      	b.n	80037ec <HAL_RCC_OscConfig+0x324>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x30c>
 80037ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	4a5e      	ldr	r2, [pc, #376]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0x324>
 80037d4:	4b58      	ldr	r3, [pc, #352]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	4a57      	ldr	r2, [pc, #348]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e0:	4b55      	ldr	r3, [pc, #340]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	4a54      	ldr	r2, [pc, #336]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f023 0304 	bic.w	r3, r3, #4
 80037ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe f926 	bl	8001a44 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fe f922 	bl	8001a44 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0cb      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003812:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ee      	beq.n	80037fc <HAL_RCC_OscConfig+0x334>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7fe f910 	bl	8001a44 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe f90c 	bl	8001a44 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0b5      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ee      	bne.n	8003828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003850:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	4a38      	ldr	r2, [pc, #224]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a1 	beq.w	80039a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003866:	4b34      	ldr	r3, [pc, #208]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b08      	cmp	r3, #8
 8003870:	d05c      	beq.n	800392c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d141      	bne.n	80038fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <HAL_RCC_OscConfig+0x478>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe f8e0 	bl	8001a44 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe f8dc 	bl	8001a44 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e087      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	3b01      	subs	r3, #1
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	491b      	ldr	r1, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <HAL_RCC_OscConfig+0x478>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fe f8b5 	bl	8001a44 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe f8b1 	bl	8001a44 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e05c      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x416>
 80038fc:	e054      	b.n	80039a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_RCC_OscConfig+0x478>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe f89e 	bl	8001a44 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe f89a 	bl	8001a44 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e045      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_RCC_OscConfig+0x470>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x444>
 800392a:	e03d      	b.n	80039a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e038      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000
 8003940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003944:	4b1b      	ldr	r3, [pc, #108]	@ (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d028      	beq.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d121      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d11a      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800397a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	4293      	cmp	r3, r2
 800397e:	d111      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0cc      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b68      	ldr	r3, [pc, #416]	@ (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d90c      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b65      	ldr	r3, [pc, #404]	@ (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	@ (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a58      	ldr	r2, [pc, #352]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a52      	ldr	r2, [pc, #328]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d044      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e067      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b37      	ldr	r3, [pc, #220]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4934      	ldr	r1, [pc, #208]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd ffcc 	bl	8001a44 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fd ffc8 	bl	8001a44 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b25      	ldr	r3, [pc, #148]	@ (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20c      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b22      	ldr	r3, [pc, #136]	@ (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	@ (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f821 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	490a      	ldr	r1, [pc, #40]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	5ccb      	ldrb	r3, [r1, r3]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd ff2c 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	0800b1d4 	.word	0x0800b1d4
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	20000004 	.word	0x20000004

08003b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b88:	b094      	sub	sp, #80	@ 0x50
 8003b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	4b79      	ldr	r3, [pc, #484]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	f200 80e1 	bhi.w	8003d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003bb6:	e0db      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bbc:	e0db      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bbe:	4b73      	ldr	r3, [pc, #460]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc2:	e0d8      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bce:	4b6d      	ldr	r3, [pc, #436]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	2200      	movs	r2, #0
 8003be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bee:	2300      	movs	r3, #0
 8003bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	0159      	lsls	r1, r3, #5
 8003c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c08:	0150      	lsls	r0, r2, #5
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4621      	mov	r1, r4
 8003c10:	1a51      	subs	r1, r2, r1
 8003c12:	6139      	str	r1, [r7, #16]
 8003c14:	4629      	mov	r1, r5
 8003c16:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c28:	4659      	mov	r1, fp
 8003c2a:	018b      	lsls	r3, r1, #6
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c32:	4651      	mov	r1, sl
 8003c34:	018a      	lsls	r2, r1, #6
 8003c36:	4651      	mov	r1, sl
 8003c38:	ebb2 0801 	subs.w	r8, r2, r1
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	eb18 0303 	adds.w	r3, r8, r3
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	462b      	mov	r3, r5
 8003c64:	eb49 0303 	adc.w	r3, r9, r3
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c76:	4629      	mov	r1, r5
 8003c78:	024b      	lsls	r3, r1, #9
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c80:	4621      	mov	r1, r4
 8003c82:	024a      	lsls	r2, r1, #9
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c94:	f7fc ffe8 	bl	8000c68 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca0:	e058      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca2:	4b38      	ldr	r3, [pc, #224]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	4611      	mov	r1, r2
 8003cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	f04f 0000 	mov.w	r0, #0
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	0159      	lsls	r1, r3, #5
 8003cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cce:	0150      	lsls	r0, r2, #5
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cda:	4649      	mov	r1, r9
 8003cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	00eb      	lsls	r3, r5, #3
 8003d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0a:	00e2      	lsls	r2, r4, #3
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4643      	mov	r3, r8
 8003d12:	18e3      	adds	r3, r4, r3
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	464b      	mov	r3, r9
 8003d18:	eb45 0303 	adc.w	r3, r5, r3
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	028b      	lsls	r3, r1, #10
 8003d2e:	4621      	mov	r1, r4
 8003d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d34:	4621      	mov	r1, r4
 8003d36:	028a      	lsls	r2, r1, #10
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	61fa      	str	r2, [r7, #28]
 8003d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d48:	f7fc ff8e 	bl	8000c68 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3750      	adds	r7, #80	@ 0x50
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	007a1200 	.word	0x007a1200

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	0800b1e4 	.word	0x0800b1e4

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd4:	f7ff ffdc 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	0800b1e4 	.word	0x0800b1e4

08003df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e042      	b.n	8003e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fc26 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	@ 0x24
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f82b 	bl	8003e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e9c:	b0c0      	sub	sp, #256	@ 0x100
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	68d9      	ldr	r1, [r3, #12]
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	ea40 0301 	orr.w	r3, r0, r1
 8003ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ef0:	f021 010c 	bic.w	r1, r1, #12
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003efe:	430b      	orrs	r3, r1
 8003f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f12:	6999      	ldr	r1, [r3, #24]
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	ea40 0301 	orr.w	r3, r0, r1
 8003f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b8f      	ldr	r3, [pc, #572]	@ (8004164 <UART_SetConfig+0x2cc>)
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d005      	beq.n	8003f38 <UART_SetConfig+0xa0>
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b8d      	ldr	r3, [pc, #564]	@ (8004168 <UART_SetConfig+0x2d0>)
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d104      	bne.n	8003f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7ff ff4a 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f40:	e003      	b.n	8003f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f42:	f7ff ff31 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8003f46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f54:	f040 810c 	bne.w	8004170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	1891      	adds	r1, r2, r2
 8003f70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f72:	415b      	adcs	r3, r3
 8003f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	eb12 0801 	adds.w	r8, r2, r1
 8003f80:	4629      	mov	r1, r5
 8003f82:	eb43 0901 	adc.w	r9, r3, r1
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9a:	4690      	mov	r8, r2
 8003f9c:	4699      	mov	r9, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	eb18 0303 	adds.w	r3, r8, r3
 8003fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fa8:	462b      	mov	r3, r5
 8003faa:	eb49 0303 	adc.w	r3, r9, r3
 8003fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	18db      	adds	r3, r3, r3
 8003fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fcc:	4613      	mov	r3, r2
 8003fce:	eb42 0303 	adc.w	r3, r2, r3
 8003fd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fdc:	f7fc fe44 	bl	8000c68 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4b61      	ldr	r3, [pc, #388]	@ (800416c <UART_SetConfig+0x2d4>)
 8003fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	011c      	lsls	r4, r3, #4
 8003fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	1891      	adds	r1, r2, r2
 8004006:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004008:	415b      	adcs	r3, r3
 800400a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800400c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004010:	4641      	mov	r1, r8
 8004012:	eb12 0a01 	adds.w	sl, r2, r1
 8004016:	4649      	mov	r1, r9
 8004018:	eb43 0b01 	adc.w	fp, r3, r1
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800402c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004030:	4692      	mov	sl, r2
 8004032:	469b      	mov	fp, r3
 8004034:	4643      	mov	r3, r8
 8004036:	eb1a 0303 	adds.w	r3, sl, r3
 800403a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800403e:	464b      	mov	r3, r9
 8004040:	eb4b 0303 	adc.w	r3, fp, r3
 8004044:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004054:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800405c:	460b      	mov	r3, r1
 800405e:	18db      	adds	r3, r3, r3
 8004060:	643b      	str	r3, [r7, #64]	@ 0x40
 8004062:	4613      	mov	r3, r2
 8004064:	eb42 0303 	adc.w	r3, r2, r3
 8004068:	647b      	str	r3, [r7, #68]	@ 0x44
 800406a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800406e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004072:	f7fc fdf9 	bl	8000c68 <__aeabi_uldivmod>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4611      	mov	r1, r2
 800407c:	4b3b      	ldr	r3, [pc, #236]	@ (800416c <UART_SetConfig+0x2d4>)
 800407e:	fba3 2301 	umull	r2, r3, r3, r1
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2264      	movs	r2, #100	@ 0x64
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	1acb      	subs	r3, r1, r3
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004092:	4b36      	ldr	r3, [pc, #216]	@ (800416c <UART_SetConfig+0x2d4>)
 8004094:	fba3 2302 	umull	r2, r3, r3, r2
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040a0:	441c      	add	r4, r3
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040bc:	415b      	adcs	r3, r3
 80040be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040c4:	4641      	mov	r1, r8
 80040c6:	1851      	adds	r1, r2, r1
 80040c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80040ca:	4649      	mov	r1, r9
 80040cc:	414b      	adcs	r3, r1
 80040ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040dc:	4659      	mov	r1, fp
 80040de:	00cb      	lsls	r3, r1, #3
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e6:	4651      	mov	r1, sl
 80040e8:	00ca      	lsls	r2, r1, #3
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	4642      	mov	r2, r8
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040f8:	464b      	mov	r3, r9
 80040fa:	460a      	mov	r2, r1
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004110:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004118:	460b      	mov	r3, r1
 800411a:	18db      	adds	r3, r3, r3
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800411e:	4613      	mov	r3, r2
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800412a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800412e:	f7fc fd9b 	bl	8000c68 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <UART_SetConfig+0x2d4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	@ 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	3332      	adds	r3, #50	@ 0x32
 800414a:	4a08      	ldr	r2, [pc, #32]	@ (800416c <UART_SetConfig+0x2d4>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 0207 	and.w	r2, r3, #7
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4422      	add	r2, r4
 800415e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004160:	e106      	b.n	8004370 <UART_SetConfig+0x4d8>
 8004162:	bf00      	nop
 8004164:	40011000 	.word	0x40011000
 8004168:	40011400 	.word	0x40011400
 800416c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800417a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800417e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004182:	4642      	mov	r2, r8
 8004184:	464b      	mov	r3, r9
 8004186:	1891      	adds	r1, r2, r2
 8004188:	6239      	str	r1, [r7, #32]
 800418a:	415b      	adcs	r3, r3
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
 800418e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004192:	4641      	mov	r1, r8
 8004194:	1854      	adds	r4, r2, r1
 8004196:	4649      	mov	r1, r9
 8004198:	eb43 0501 	adc.w	r5, r3, r1
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	00eb      	lsls	r3, r5, #3
 80041a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041aa:	00e2      	lsls	r2, r4, #3
 80041ac:	4614      	mov	r4, r2
 80041ae:	461d      	mov	r5, r3
 80041b0:	4643      	mov	r3, r8
 80041b2:	18e3      	adds	r3, r4, r3
 80041b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041b8:	464b      	mov	r3, r9
 80041ba:	eb45 0303 	adc.w	r3, r5, r3
 80041be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041de:	4629      	mov	r1, r5
 80041e0:	008b      	lsls	r3, r1, #2
 80041e2:	4621      	mov	r1, r4
 80041e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e8:	4621      	mov	r1, r4
 80041ea:	008a      	lsls	r2, r1, #2
 80041ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041f0:	f7fc fd3a 	bl	8000c68 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b60      	ldr	r3, [pc, #384]	@ (800437c <UART_SetConfig+0x4e4>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011c      	lsls	r4, r3, #4
 8004202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800420c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	61b9      	str	r1, [r7, #24]
 800421c:	415b      	adcs	r3, r3
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004224:	4641      	mov	r1, r8
 8004226:	1851      	adds	r1, r2, r1
 8004228:	6139      	str	r1, [r7, #16]
 800422a:	4649      	mov	r1, r9
 800422c:	414b      	adcs	r3, r1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800423c:	4659      	mov	r1, fp
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4651      	mov	r1, sl
 8004242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004246:	4651      	mov	r1, sl
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4642      	mov	r2, r8
 8004252:	189b      	adds	r3, r3, r2
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004258:	464b      	mov	r3, r9
 800425a:	460a      	mov	r2, r1
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800426e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800427c:	4649      	mov	r1, r9
 800427e:	008b      	lsls	r3, r1, #2
 8004280:	4641      	mov	r1, r8
 8004282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004286:	4641      	mov	r1, r8
 8004288:	008a      	lsls	r2, r1, #2
 800428a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800428e:	f7fc fceb 	bl	8000c68 <__aeabi_uldivmod>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4611      	mov	r1, r2
 8004298:	4b38      	ldr	r3, [pc, #224]	@ (800437c <UART_SetConfig+0x4e4>)
 800429a:	fba3 2301 	umull	r2, r3, r3, r1
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2264      	movs	r2, #100	@ 0x64
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	1acb      	subs	r3, r1, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	3332      	adds	r3, #50	@ 0x32
 80042ac:	4a33      	ldr	r2, [pc, #204]	@ (800437c <UART_SetConfig+0x4e4>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b8:	441c      	add	r4, r3
 80042ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042be:	2200      	movs	r2, #0
 80042c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80042c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80042c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	415b      	adcs	r3, r3
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042d8:	4641      	mov	r1, r8
 80042da:	1851      	adds	r1, r2, r1
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	4649      	mov	r1, r9
 80042e0:	414b      	adcs	r3, r1
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042f0:	4659      	mov	r1, fp
 80042f2:	00cb      	lsls	r3, r1, #3
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fa:	4651      	mov	r1, sl
 80042fc:	00ca      	lsls	r2, r1, #3
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	4603      	mov	r3, r0
 8004304:	4642      	mov	r2, r8
 8004306:	189b      	adds	r3, r3, r2
 8004308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800430a:	464b      	mov	r3, r9
 800430c:	460a      	mov	r2, r1
 800430e:	eb42 0303 	adc.w	r3, r2, r3
 8004312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60
 800431e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800432c:	4649      	mov	r1, r9
 800432e:	008b      	lsls	r3, r1, #2
 8004330:	4641      	mov	r1, r8
 8004332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004336:	4641      	mov	r1, r8
 8004338:	008a      	lsls	r2, r1, #2
 800433a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800433e:	f7fc fc93 	bl	8000c68 <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <UART_SetConfig+0x4e4>)
 8004348:	fba3 1302 	umull	r1, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	2164      	movs	r1, #100	@ 0x64
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	3332      	adds	r3, #50	@ 0x32
 800435a:	4a08      	ldr	r2, [pc, #32]	@ (800437c <UART_SetConfig+0x4e4>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	f003 020f 	and.w	r2, r3, #15
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4422      	add	r2, r4
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004376:	46bd      	mov	sp, r7
 8004378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437c:	51eb851f 	.word	0x51eb851f

08004380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004380:	b084      	sub	sp, #16
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	f107 001c 	add.w	r0, r7, #28
 800438e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004396:	2b01      	cmp	r3, #1
 8004398:	d123      	bne.n	80043e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80043ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 fae8 	bl	80059ac <USB_CoreReset>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e01b      	b.n	800441a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fadc 	bl	80059ac <USB_CoreReset>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	639a      	str	r2, [r3, #56]	@ 0x38
 800440c:	e005      	b.n	800441a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800441a:	7fbb      	ldrb	r3, [r7, #30]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10b      	bne.n	8004438 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f043 0206 	orr.w	r2, r3, #6
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004444:	b004      	add	sp, #16
 8004446:	4770      	bx	lr

08004448 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d165      	bne.n	8004528 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a41      	ldr	r2, [pc, #260]	@ (8004564 <USB_SetTurnaroundTime+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d906      	bls.n	8004472 <USB_SetTurnaroundTime+0x2a>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a40      	ldr	r2, [pc, #256]	@ (8004568 <USB_SetTurnaroundTime+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d202      	bcs.n	8004472 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800446c:	230f      	movs	r3, #15
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e062      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a3c      	ldr	r2, [pc, #240]	@ (8004568 <USB_SetTurnaroundTime+0x120>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d306      	bcc.n	8004488 <USB_SetTurnaroundTime+0x40>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a3b      	ldr	r2, [pc, #236]	@ (800456c <USB_SetTurnaroundTime+0x124>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d202      	bcs.n	8004488 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004482:	230e      	movs	r3, #14
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e057      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a38      	ldr	r2, [pc, #224]	@ (800456c <USB_SetTurnaroundTime+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d306      	bcc.n	800449e <USB_SetTurnaroundTime+0x56>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a37      	ldr	r2, [pc, #220]	@ (8004570 <USB_SetTurnaroundTime+0x128>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d202      	bcs.n	800449e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004498:	230d      	movs	r3, #13
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e04c      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <USB_SetTurnaroundTime+0x128>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d306      	bcc.n	80044b4 <USB_SetTurnaroundTime+0x6c>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a32      	ldr	r2, [pc, #200]	@ (8004574 <USB_SetTurnaroundTime+0x12c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d802      	bhi.n	80044b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044ae:	230c      	movs	r3, #12
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e041      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004574 <USB_SetTurnaroundTime+0x12c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d906      	bls.n	80044ca <USB_SetTurnaroundTime+0x82>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4a2e      	ldr	r2, [pc, #184]	@ (8004578 <USB_SetTurnaroundTime+0x130>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d802      	bhi.n	80044ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044c4:	230b      	movs	r3, #11
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e036      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <USB_SetTurnaroundTime+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d906      	bls.n	80044e0 <USB_SetTurnaroundTime+0x98>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4a29      	ldr	r2, [pc, #164]	@ (800457c <USB_SetTurnaroundTime+0x134>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d802      	bhi.n	80044e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044da:	230a      	movs	r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e02b      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a26      	ldr	r2, [pc, #152]	@ (800457c <USB_SetTurnaroundTime+0x134>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d906      	bls.n	80044f6 <USB_SetTurnaroundTime+0xae>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a25      	ldr	r2, [pc, #148]	@ (8004580 <USB_SetTurnaroundTime+0x138>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d202      	bcs.n	80044f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044f0:	2309      	movs	r3, #9
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e020      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4a21      	ldr	r2, [pc, #132]	@ (8004580 <USB_SetTurnaroundTime+0x138>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d306      	bcc.n	800450c <USB_SetTurnaroundTime+0xc4>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a20      	ldr	r2, [pc, #128]	@ (8004584 <USB_SetTurnaroundTime+0x13c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d802      	bhi.n	800450c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004506:	2308      	movs	r3, #8
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e015      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a1d      	ldr	r2, [pc, #116]	@ (8004584 <USB_SetTurnaroundTime+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d906      	bls.n	8004522 <USB_SetTurnaroundTime+0xda>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <USB_SetTurnaroundTime+0x140>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d202      	bcs.n	8004522 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800451c:	2307      	movs	r3, #7
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e00a      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004522:	2306      	movs	r3, #6
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e007      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800452e:	2309      	movs	r3, #9
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e001      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004534:	2309      	movs	r3, #9
 8004536:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	00d8acbf 	.word	0x00d8acbf
 8004568:	00e4e1c0 	.word	0x00e4e1c0
 800456c:	00f42400 	.word	0x00f42400
 8004570:	01067380 	.word	0x01067380
 8004574:	011a499f 	.word	0x011a499f
 8004578:	01312cff 	.word	0x01312cff
 800457c:	014ca43f 	.word	0x014ca43f
 8004580:	016e3600 	.word	0x016e3600
 8004584:	01a6ab1f 	.word	0x01a6ab1f
 8004588:	01e84800 	.word	0x01e84800

0800458c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f043 0201 	orr.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d115      	bne.n	800461e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045fe:	200a      	movs	r0, #10
 8004600:	f7fd fa2c 	bl	8001a5c <HAL_Delay>
      ms += 10U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	330a      	adds	r3, #10
 8004608:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 f93f 	bl	800588e <USB_GetMode>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d01e      	beq.n	8004654 <USB_SetCurrentMode+0x84>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2bc7      	cmp	r3, #199	@ 0xc7
 800461a:	d9f0      	bls.n	80045fe <USB_SetCurrentMode+0x2e>
 800461c:	e01a      	b.n	8004654 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d115      	bne.n	8004650 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004630:	200a      	movs	r0, #10
 8004632:	f7fd fa13 	bl	8001a5c <HAL_Delay>
      ms += 10U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	330a      	adds	r3, #10
 800463a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 f926 	bl	800588e <USB_GetMode>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <USB_SetCurrentMode+0x84>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2bc7      	cmp	r3, #199	@ 0xc7
 800464c:	d9f0      	bls.n	8004630 <USB_SetCurrentMode+0x60>
 800464e:	e001      	b.n	8004654 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e005      	b.n	8004660 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2bc8      	cmp	r3, #200	@ 0xc8
 8004658:	d101      	bne.n	800465e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e009      	b.n	800469c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3340      	adds	r3, #64	@ 0x40
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0e      	cmp	r3, #14
 80046a0:	d9f2      	bls.n	8004688 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11c      	bne.n	80046e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80046e2:	e00b      	b.n	80046fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004702:	461a      	mov	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004708:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10d      	bne.n	800472c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004718:	2100      	movs	r1, #0
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f968 	bl	80049f0 <USB_SetDevSpeed>
 8004720:	e008      	b.n	8004734 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004722:	2101      	movs	r1, #1
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f963 	bl	80049f0 <USB_SetDevSpeed>
 800472a:	e003      	b.n	8004734 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800472c:	2103      	movs	r1, #3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f95e 	bl	80049f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004734:	2110      	movs	r1, #16
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8fa 	bl	8004930 <USB_FlushTxFifo>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f924 	bl	8004994 <USB_FlushRxFifo>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475c:	461a      	mov	r2, r3
 800475e:	2300      	movs	r3, #0
 8004760:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e043      	b.n	8004808 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004792:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004796:	d118      	bne.n	80047ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047aa:	461a      	mov	r2, r3
 80047ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e013      	b.n	80047dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c0:	461a      	mov	r2, r3
 80047c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	e008      	b.n	80047dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e8:	461a      	mov	r2, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047fa:	461a      	mov	r2, r3
 80047fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004800:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3301      	adds	r3, #1
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800480c:	461a      	mov	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4293      	cmp	r3, r2
 8004812:	d3b5      	bcc.n	8004780 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e043      	b.n	80048a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800482c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004830:	d118      	bne.n	8004864 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004844:	461a      	mov	r2, r3
 8004846:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	e013      	b.n	8004876 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	461a      	mov	r2, r3
 800485c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e008      	b.n	8004876 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004882:	461a      	mov	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	461a      	mov	r2, r3
 8004896:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800489a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3301      	adds	r3, #1
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048a6:	461a      	mov	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d3b5      	bcc.n	800481a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80048ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f043 0210 	orr.w	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	4b10      	ldr	r3, [pc, #64]	@ (800492c <USB_DevInit+0x2c4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f043 0208 	orr.w	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004904:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004928:	b004      	add	sp, #16
 800492a:	4770      	bx	lr
 800492c:	803c3800 	.word	0x803c3800

08004930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494a:	d901      	bls.n	8004950 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e01b      	b.n	8004988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	daf2      	bge.n	800493e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	019b      	lsls	r3, r3, #6
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004974:	d901      	bls.n	800497a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e006      	b.n	8004988 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b20      	cmp	r3, #32
 8004984:	d0f0      	beq.n	8004968 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049ac:	d901      	bls.n	80049b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e018      	b.n	80049e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	daf2      	bge.n	80049a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2210      	movs	r2, #16
 80049c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049d0:	d901      	bls.n	80049d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e006      	b.n	80049e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d0f0      	beq.n	80049c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	68f9      	ldr	r1, [r7, #12]
 8004a0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b087      	sub	sp, #28
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0306 	and.w	r3, r3, #6
 8004a3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
 8004a46:	e00a      	b.n	8004a5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d002      	beq.n	8004a54 <USB_GetDevSpeed+0x32>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b06      	cmp	r3, #6
 8004a52:	d102      	bne.n	8004a5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a54:	2302      	movs	r3, #2
 8004a56:	75fb      	strb	r3, [r7, #23]
 8004a58:	e001      	b.n	8004a5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a5a:	230f      	movs	r3, #15
 8004a5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d13a      	bne.n	8004afe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	2101      	movs	r1, #1
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d155      	bne.n	8004b6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004adc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	059b      	lsls	r3, r3, #22
 8004ae2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e036      	b.n	8004b6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11a      	bne.n	8004b6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	791b      	ldrb	r3, [r3, #4]
 8004b50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b52:	430b      	orrs	r3, r1
 8004b54:	4313      	orrs	r3, r2
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d161      	bne.n	8004c5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bae:	d11f      	bne.n	8004bf0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c10:	4013      	ands	r3, r2
 8004c12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	2101      	movs	r1, #1
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c34:	4013      	ands	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0159      	lsls	r1, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c52:	4619      	mov	r1, r3
 8004c54:	4b35      	ldr	r3, [pc, #212]	@ (8004d2c <USB_DeactivateEndpoint+0x1b0>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]
 8004c5a:	e060      	b.n	8004d1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c72:	d11f      	bne.n	8004cb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0159      	lsls	r1, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	440b      	add	r3, r1
 8004d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d16:	4619      	mov	r1, r3
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <USB_DeactivateEndpoint+0x1b4>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	ec337800 	.word	0xec337800
 8004d30:	eff37800 	.word	0xeff37800

08004d34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	@ 0x28
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f040 817f 	bne.w	8005054 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d132      	bne.n	8004dc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d78:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d7c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dbc:	0cdb      	lsrs	r3, r3, #19
 8004dbe:	04db      	lsls	r3, r3, #19
 8004dc0:	6113      	str	r3, [r2, #16]
 8004dc2:	e097      	b.n	8004ef4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dde:	0cdb      	lsrs	r3, r3, #19
 8004de0:	04db      	lsls	r3, r3, #19
 8004de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dfe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e06:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d11a      	bne.n	8004e44 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d903      	bls.n	8004e22 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e40:	6113      	str	r3, [r2, #16]
 8004e42:	e044      	b.n	8004ece <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	8afb      	ldrh	r3, [r7, #22]
 8004e6a:	04d9      	lsls	r1, r3, #19
 8004e6c:	4ba4      	ldr	r3, [pc, #656]	@ (8005100 <USB_EPStartXfer+0x3cc>)
 8004e6e:	400b      	ands	r3, r1
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	0148      	lsls	r0, r1, #5
 8004e74:	69f9      	ldr	r1, [r7, #28]
 8004e76:	4401      	add	r1, r0
 8004e78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	791b      	ldrb	r3, [r3, #4]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d122      	bne.n	8004ece <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004ea6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	8afb      	ldrh	r3, [r7, #22]
 8004eb8:	075b      	lsls	r3, r3, #29
 8004eba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004ebe:	69b9      	ldr	r1, [r7, #24]
 8004ec0:	0148      	lsls	r0, r1, #5
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	4401      	add	r1, r0
 8004ec6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	0148      	lsls	r0, r1, #5
 8004ee8:	69f9      	ldr	r1, [r7, #28]
 8004eea:	4401      	add	r1, r0
 8004eec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d14b      	bne.n	8004f92 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	791b      	ldrb	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d128      	bne.n	8004f70 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d110      	bne.n	8004f50 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e00f      	b.n	8004f70 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e166      	b.n	8005260 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004fb0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	791b      	ldrb	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d015      	beq.n	8004fe6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 814e 	beq.w	8005260 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	69f9      	ldr	r1, [r7, #28]
 8004fdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	634b      	str	r3, [r1, #52]	@ 0x34
 8004fe4:	e13c      	b.n	8005260 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d110      	bne.n	8005018 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e00f      	b.n	8005038 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005036:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	b298      	uxth	r0, r3
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4603      	mov	r3, r0
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f9b9 	bl	80053c4 <USB_WritePacket>
 8005052:	e105      	b.n	8005260 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800506e:	0cdb      	lsrs	r3, r3, #19
 8005070:	04db      	lsls	r3, r3, #19
 8005072:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800508e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005092:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005096:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d132      	bne.n	8005104 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	0148      	lsls	r0, r1, #5
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	4401      	add	r1, r0
 80050d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050fa:	6113      	str	r3, [r2, #16]
 80050fc:	e062      	b.n	80051c4 <USB_EPStartXfer+0x490>
 80050fe:	bf00      	nop
 8005100:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d123      	bne.n	8005154 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005122:	69b9      	ldr	r1, [r7, #24]
 8005124:	0148      	lsls	r0, r1, #5
 8005126:	69f9      	ldr	r1, [r7, #28]
 8005128:	4401      	add	r1, r0
 800512a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800514c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005150:	6113      	str	r3, [r2, #16]
 8005152:	e037      	b.n	80051c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4413      	add	r3, r2
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	8afa      	ldrh	r2, [r7, #22]
 8005170:	fb03 f202 	mul.w	r2, r3, r2
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	8afb      	ldrh	r3, [r7, #22]
 8005188:	04d9      	lsls	r1, r3, #19
 800518a:	4b38      	ldr	r3, [pc, #224]	@ (800526c <USB_EPStartXfer+0x538>)
 800518c:	400b      	ands	r3, r1
 800518e:	69b9      	ldr	r1, [r7, #24]
 8005190:	0148      	lsls	r0, r1, #5
 8005192:	69f9      	ldr	r1, [r7, #28]
 8005194:	4401      	add	r1, r0
 8005196:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800519a:	4313      	orrs	r3, r2
 800519c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b4:	69b9      	ldr	r1, [r7, #24]
 80051b6:	0148      	lsls	r0, r1, #5
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	4401      	add	r1, r0
 80051bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10d      	bne.n	80051e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	68d9      	ldr	r1, [r3, #12]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e2:	460a      	mov	r2, r1
 80051e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	791b      	ldrb	r3, [r3, #4]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d128      	bne.n	8005240 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d110      	bne.n	8005220 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e00f      	b.n	8005240 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800523a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800523e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800525a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800525e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	1ff80000 	.word	0x1ff80000

08005270 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d14a      	bne.n	8005324 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052a6:	f040 8086 	bne.w	80053b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	7812      	ldrb	r2, [r2, #0]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052fe:	4293      	cmp	r3, r2
 8005300:	d902      	bls.n	8005308 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
          break;
 8005306:	e056      	b.n	80053b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800531c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005320:	d0e7      	beq.n	80052f2 <USB_EPStopXfer+0x82>
 8005322:	e048      	b.n	80053b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800533c:	d13b      	bne.n	80053b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800535c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005360:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005384:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3301      	adds	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005392:	4293      	cmp	r3, r2
 8005394:	d902      	bls.n	800539c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
          break;
 800539a:	e00c      	b.n	80053b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b4:	d0e7      	beq.n	8005386 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	@ 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	4611      	mov	r1, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	460b      	mov	r3, r1
 80053d4:	71fb      	strb	r3, [r7, #7]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d123      	bne.n	8005432 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053ea:	88bb      	ldrh	r3, [r7, #4]
 80053ec:	3303      	adds	r3, #3
 80053ee:	089b      	lsrs	r3, r3, #2
 80053f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e018      	b.n	800542a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	031a      	lsls	r2, r3, #12
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005404:	461a      	mov	r2, r3
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3301      	adds	r3, #1
 8005416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3301      	adds	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	3301      	adds	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3e2      	bcc.n	80053f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3724      	adds	r7, #36	@ 0x24
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005440:	b480      	push	{r7}
 8005442:	b08b      	sub	sp, #44	@ 0x2c
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	b29b      	uxth	r3, r3
 800545c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
 800546a:	e014      	b.n	8005496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	601a      	str	r2, [r3, #0]
    pDest++;
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	3301      	adds	r3, #1
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	3301      	adds	r3, #1
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	3301      	adds	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	3301      	adds	r3, #1
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	3301      	adds	r3, #1
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	429a      	cmp	r2, r3
 800549c:	d3e6      	bcc.n	800546c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800549e:	8bfb      	ldrh	r3, [r7, #30]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01e      	beq.n	80054e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ae:	461a      	mov	r2, r3
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	701a      	strb	r2, [r3, #0]
      i++;
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	3301      	adds	r3, #1
 80054ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	3301      	adds	r3, #1
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80054d6:	8bfb      	ldrh	r3, [r7, #30]
 80054d8:	3b01      	subs	r3, #1
 80054da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054dc:	8bfb      	ldrh	r3, [r7, #30]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ea      	bne.n	80054b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	372c      	adds	r7, #44	@ 0x2c
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d12c      	bne.n	8005566 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	db12      	blt.n	8005544 <USB_EPSetStall+0x54>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00f      	beq.n	8005544 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800553e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005542:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800555e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e02b      	b.n	80055be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	db12      	blt.n	800559e <USB_EPSetStall+0xae>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00f      	beq.n	800559e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005598:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800559c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d128      	bne.n	800563a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005602:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005606:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	791b      	ldrb	r3, [r3, #4]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d003      	beq.n	8005618 <USB_EPClearStall+0x4c>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	791b      	ldrb	r3, [r3, #4]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d138      	bne.n	800568a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e027      	b.n	800568a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005654:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005658:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	791b      	ldrb	r3, [r3, #4]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d003      	beq.n	800566a <USB_EPClearStall+0x9e>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	791b      	ldrb	r3, [r3, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d10f      	bne.n	800568a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005688:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80056ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80056cc:	68f9      	ldr	r1, [r7, #12]
 80056ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005712:	f023 0302 	bic.w	r3, r3, #2
 8005716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005740:	f023 0303 	bic.w	r3, r3, #3
 8005744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005780:	68fb      	ldr	r3, [r7, #12]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	0c1b      	lsrs	r3, r3, #16
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	b29b      	uxth	r3, r3
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005824:	68bb      	ldr	r3, [r7, #8]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005854:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	fa22 f303 	lsr.w	r3, r2, r3
 8005862:	01db      	lsls	r3, r3, #7
 8005864:	b2db      	uxtb	r3, r3
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4013      	ands	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005880:	68bb      	ldr	r3, [r7, #8]
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0301 	and.w	r3, r3, #1
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80058c8:	f023 0307 	bic.w	r3, r3, #7
 80058cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	460b      	mov	r3, r1
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	333c      	adds	r3, #60	@ 0x3c
 8005906:	3304      	adds	r3, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4a26      	ldr	r2, [pc, #152]	@ (80059a8 <USB_EP0_OutStart+0xb8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d90a      	bls.n	800592a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005924:	d101      	bne.n	800592a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	e037      	b.n	800599a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005930:	461a      	mov	r2, r3
 8005932:	2300      	movs	r3, #0
 8005934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005958:	f043 0318 	orr.w	r3, r3, #24
 800595c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800596c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005970:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10f      	bne.n	8005998 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597e:	461a      	mov	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005992:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005996:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	4f54300a 	.word	0x4f54300a

080059ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059c4:	d901      	bls.n	80059ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e01b      	b.n	8005a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	daf2      	bge.n	80059b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f043 0201 	orr.w	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3301      	adds	r3, #1
 80059e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ee:	d901      	bls.n	80059f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e006      	b.n	8005a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d0f0      	beq.n	80059e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a1c:	2010      	movs	r0, #16
 8005a1e:	f002 f94d 	bl	8007cbc <USBD_static_malloc>
 8005a22:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	32b0      	adds	r2, #176	@ 0xb0
 8005a34:	2100      	movs	r1, #0
 8005a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e048      	b.n	8005ad0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	32b0      	adds	r2, #176	@ 0xb0
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	32b0      	adds	r2, #176	@ 0xb0
 8005a58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7c1b      	ldrb	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10d      	bne.n	8005a86 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad8 <USBD_HID_Init+0xc8>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3326      	adds	r3, #38	@ 0x26
 8005a80:	2207      	movs	r2, #7
 8005a82:	801a      	strh	r2, [r3, #0]
 8005a84:	e00c      	b.n	8005aa0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005a86:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <USBD_HID_Init+0xc8>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 020f 	and.w	r2, r3, #15
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3326      	adds	r3, #38	@ 0x26
 8005a9c:	220a      	movs	r2, #10
 8005a9e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <USBD_HID_Init+0xc8>)
 8005aa2:	7819      	ldrb	r1, [r3, #0]
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fff6 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005aae:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <USBD_HID_Init+0xc8>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	f003 020f 	and.w	r2, r3, #15
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3324      	adds	r3, #36	@ 0x24
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200000ca 	.word	0x200000ca

08005adc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b68 <USBD_HID_DeInit+0x8c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 fff9 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005af4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b68 <USBD_HID_DeInit+0x8c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 020f 	and.w	r2, r3, #15
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3324      	adds	r3, #36	@ 0x24
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005b0e:	4b16      	ldr	r3, [pc, #88]	@ (8005b68 <USBD_HID_DeInit+0x8c>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	3326      	adds	r3, #38	@ 0x26
 8005b24:	2200      	movs	r2, #0
 8005b26:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32b0      	adds	r2, #176	@ 0xb0
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d011      	beq.n	8005b5e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	32b0      	adds	r2, #176	@ 0xb0
 8005b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f002 f8c5 	bl	8007cd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	32b0      	adds	r2, #176	@ 0xb0
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	200000ca 	.word	0x200000ca

08005b6c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	32b0      	adds	r2, #176	@ 0xb0
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0e8      	b.n	8005d6a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d046      	beq.n	8005c32 <USBD_HID_Setup+0xc6>
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	f040 80d8 	bne.w	8005d5a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	3b02      	subs	r3, #2
 8005bb0:	2b09      	cmp	r3, #9
 8005bb2:	d836      	bhi.n	8005c22 <USBD_HID_Setup+0xb6>
 8005bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <USBD_HID_Setup+0x50>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005c13 	.word	0x08005c13
 8005bc0:	08005bf3 	.word	0x08005bf3
 8005bc4:	08005c23 	.word	0x08005c23
 8005bc8:	08005c23 	.word	0x08005c23
 8005bcc:	08005c23 	.word	0x08005c23
 8005bd0:	08005c23 	.word	0x08005c23
 8005bd4:	08005c23 	.word	0x08005c23
 8005bd8:	08005c23 	.word	0x08005c23
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005be5 	.word	0x08005be5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	885b      	ldrh	r3, [r3, #2]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	601a      	str	r2, [r3, #0]
          break;
 8005bf0:	e01e      	b.n	8005c30 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fbf9 	bl	80073f0 <USBD_CtlSendData>
          break;
 8005bfe:	e017      	b.n	8005c30 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	605a      	str	r2, [r3, #4]
          break;
 8005c10:	e00e      	b.n	8005c30 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3304      	adds	r3, #4
 8005c16:	2201      	movs	r2, #1
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 fbe8 	bl	80073f0 <USBD_CtlSendData>
          break;
 8005c20:	e006      	b.n	8005c30 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 fb66 	bl	80072f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2e:	bf00      	nop
      }
      break;
 8005c30:	e09a      	b.n	8005d68 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	2b0b      	cmp	r3, #11
 8005c38:	f200 8086 	bhi.w	8005d48 <USBD_HID_Setup+0x1dc>
 8005c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <USBD_HID_Setup+0xd8>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c75 	.word	0x08005c75
 8005c48:	08005d57 	.word	0x08005d57
 8005c4c:	08005d49 	.word	0x08005d49
 8005c50:	08005d49 	.word	0x08005d49
 8005c54:	08005d49 	.word	0x08005d49
 8005c58:	08005d49 	.word	0x08005d49
 8005c5c:	08005c9f 	.word	0x08005c9f
 8005c60:	08005d49 	.word	0x08005d49
 8005c64:	08005d49 	.word	0x08005d49
 8005c68:	08005d49 	.word	0x08005d49
 8005c6c:	08005cf7 	.word	0x08005cf7
 8005c70:	08005d21 	.word	0x08005d21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d107      	bne.n	8005c90 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c80:	f107 030a 	add.w	r3, r7, #10
 8005c84:	2202      	movs	r2, #2
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 fbb1 	bl	80073f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c8e:	e063      	b.n	8005d58 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 fb2f 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c9c:	e05c      	b.n	8005d58 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	885b      	ldrh	r3, [r3, #2]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b22      	cmp	r3, #34	@ 0x22
 8005ca8:	d108      	bne.n	8005cbc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	88db      	ldrh	r3, [r3, #6]
 8005cae:	2b4a      	cmp	r3, #74	@ 0x4a
 8005cb0:	bf28      	it	cs
 8005cb2:	234a      	movcs	r3, #74	@ 0x4a
 8005cb4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005d74 <USBD_HID_Setup+0x208>)
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e015      	b.n	8005ce8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b21      	cmp	r3, #33	@ 0x21
 8005cc6:	d108      	bne.n	8005cda <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <USBD_HID_Setup+0x20c>)
 8005cca:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	88db      	ldrh	r3, [r3, #6]
 8005cd0:	2b09      	cmp	r3, #9
 8005cd2:	bf28      	it	cs
 8005cd4:	2309      	movcs	r3, #9
 8005cd6:	82bb      	strh	r3, [r7, #20]
 8005cd8:	e006      	b.n	8005ce8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fb0a 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	75fb      	strb	r3, [r7, #23]
            break;
 8005ce6:	e037      	b.n	8005d58 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ce8:	8abb      	ldrh	r3, [r7, #20]
 8005cea:	461a      	mov	r2, r3
 8005cec:	6939      	ldr	r1, [r7, #16]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fb7e 	bl	80073f0 <USBD_CtlSendData>
          break;
 8005cf4:	e030      	b.n	8005d58 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d107      	bne.n	8005d12 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3308      	adds	r3, #8
 8005d06:	2201      	movs	r2, #1
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fb70 	bl	80073f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d10:	e022      	b.n	8005d58 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 faee 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1e:	e01b      	b.n	8005d58 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d106      	bne.n	8005d3a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	885b      	ldrh	r3, [r3, #2]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d38:	e00e      	b.n	8005d58 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fada 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d42:	2303      	movs	r3, #3
 8005d44:	75fb      	strb	r3, [r7, #23]
          break;
 8005d46:	e007      	b.n	8005d58 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fad3 	bl	80072f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	75fb      	strb	r3, [r7, #23]
          break;
 8005d54:	e000      	b.n	8005d58 <USBD_HID_Setup+0x1ec>
          break;
 8005d56:	bf00      	nop
      }
      break;
 8005d58:	e006      	b.n	8005d68 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 faca 	bl	80072f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
      break;
 8005d66:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000080 	.word	0x20000080
 8005d78:	20000068 	.word	0x20000068

08005d7c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	32b0      	adds	r2, #176	@ 0xb0
 8005d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d98:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e014      	b.n	8005dce <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d10d      	bne.n	8005dcc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	7b1b      	ldrb	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005dbe:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <USBD_HID_SendReport+0x5c>)
 8005dc0:	7819      	ldrb	r1, [r3, #0]
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f001 ff35 	bl	8007c36 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200000ca 	.word	0x200000ca

08005ddc <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7c1b      	ldrb	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005dec:	2308      	movs	r3, #8
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e001      	b.n	8005df6 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005df2:	230a      	movs	r3, #10
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e0c:	2181      	movs	r1, #129	@ 0x81
 8005e0e:	4809      	ldr	r0, [pc, #36]	@ (8005e34 <USBD_HID_GetFSCfgDesc+0x30>)
 8005e10:	f000 fc3b 	bl	800668a <USBD_GetEpDesc>
 8005e14:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	220a      	movs	r2, #10
 8005e20:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2222      	movs	r2, #34	@ 0x22
 8005e26:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000044 	.word	0x20000044

08005e38 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e40:	2181      	movs	r1, #129	@ 0x81
 8005e42:	4809      	ldr	r0, [pc, #36]	@ (8005e68 <USBD_HID_GetHSCfgDesc+0x30>)
 8005e44:	f000 fc21 	bl	800668a <USBD_GetEpDesc>
 8005e48:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2207      	movs	r2, #7
 8005e54:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2222      	movs	r2, #34	@ 0x22
 8005e5a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e5c:	4b02      	ldr	r3, [pc, #8]	@ (8005e68 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000044 	.word	0x20000044

08005e6c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e74:	2181      	movs	r1, #129	@ 0x81
 8005e76:	4809      	ldr	r0, [pc, #36]	@ (8005e9c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005e78:	f000 fc07 	bl	800668a <USBD_GetEpDesc>
 8005e7c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	220a      	movs	r2, #10
 8005e88:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2222      	movs	r2, #34	@ 0x22
 8005e8e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e90:	4b02      	ldr	r3, [pc, #8]	@ (8005e9c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000044 	.word	0x20000044

08005ea0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32b0      	adds	r2, #176	@ 0xb0
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	220a      	movs	r2, #10
 8005ed8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005eda:	4b03      	ldr	r3, [pc, #12]	@ (8005ee8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	20000074 	.word	0x20000074

08005eec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e01f      	b.n	8005f44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	79fa      	ldrb	r2, [r7, #7]
 8005f36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f001 fd47 	bl	80079cc <USBD_LL_Init>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e025      	b.n	8005fb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32ae      	adds	r2, #174	@ 0xae
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00f      	beq.n	8005fa0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	32ae      	adds	r2, #174	@ 0xae
 8005f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	f107 020e 	add.w	r2, r7, #14
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
 8005f98:	4602      	mov	r2, r0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 fd4f 	bl	8007a64 <USBD_LL_Start>
 8005fc6:	4603      	mov	r3, r0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	4611      	mov	r1, r2
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	4611      	mov	r1, r2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006044:	2303      	movs	r3, #3
 8006046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f90c 	bl	8007282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2b02      	cmp	r3, #2
 800608c:	d01a      	beq.n	80060c4 <USBD_LL_SetupStage+0x72>
 800608e:	2b02      	cmp	r3, #2
 8006090:	d822      	bhi.n	80060d8 <USBD_LL_SetupStage+0x86>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <USBD_LL_SetupStage+0x4a>
 8006096:	2b01      	cmp	r3, #1
 8006098:	d00a      	beq.n	80060b0 <USBD_LL_SetupStage+0x5e>
 800609a:	e01d      	b.n	80060d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fb63 	bl	8006770 <USBD_StdDevReq>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
      break;
 80060ae:	e020      	b.n	80060f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fbcb 	bl	8006854 <USBD_StdItfReq>
 80060be:	4603      	mov	r3, r0
 80060c0:	73fb      	strb	r3, [r7, #15]
      break;
 80060c2:	e016      	b.n	80060f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fc2d 	bl	800692c <USBD_StdEPReq>
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
      break;
 80060d6:	e00c      	b.n	80060f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80060de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fd1c 	bl	8007b24 <USBD_LL_StallEP>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	bf00      	nop
  }

  return ret;
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	460b      	mov	r3, r1
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d16e      	bne.n	80061f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800611a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006122:	2b03      	cmp	r3, #3
 8006124:	f040 8098 	bne.w	8006258 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	429a      	cmp	r2, r3
 8006132:	d913      	bls.n	800615c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	1ad2      	subs	r2, r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	4293      	cmp	r3, r2
 800614c:	bf28      	it	cs
 800614e:	4613      	movcs	r3, r2
 8006150:	461a      	mov	r2, r3
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f001 f977 	bl	8007448 <USBD_CtlContinueRx>
 800615a:	e07d      	b.n	8006258 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2b02      	cmp	r3, #2
 8006168:	d014      	beq.n	8006194 <USBD_LL_DataOutStage+0x98>
 800616a:	2b02      	cmp	r3, #2
 800616c:	d81d      	bhi.n	80061aa <USBD_LL_DataOutStage+0xae>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <USBD_LL_DataOutStage+0x7c>
 8006172:	2b01      	cmp	r3, #1
 8006174:	d003      	beq.n	800617e <USBD_LL_DataOutStage+0x82>
 8006176:	e018      	b.n	80061aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	75bb      	strb	r3, [r7, #22]
            break;
 800617c:	e018      	b.n	80061b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006184:	b2db      	uxtb	r3, r3
 8006186:	4619      	mov	r1, r3
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fa64 	bl	8006656 <USBD_CoreFindIF>
 800618e:	4603      	mov	r3, r0
 8006190:	75bb      	strb	r3, [r7, #22]
            break;
 8006192:	e00d      	b.n	80061b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fa66 	bl	8006670 <USBD_CoreFindEP>
 80061a4:	4603      	mov	r3, r0
 80061a6:	75bb      	strb	r3, [r7, #22]
            break;
 80061a8:	e002      	b.n	80061b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75bb      	strb	r3, [r7, #22]
            break;
 80061ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061b0:	7dbb      	ldrb	r3, [r7, #22]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d119      	bne.n	80061ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d113      	bne.n	80061ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061c2:	7dba      	ldrb	r2, [r7, #22]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	32ae      	adds	r2, #174	@ 0xae
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80061d2:	7dba      	ldrb	r2, [r7, #22]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80061da:	7dba      	ldrb	r2, [r7, #22]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	32ae      	adds	r2, #174	@ 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f001 f93d 	bl	800746a <USBD_CtlSendStatus>
 80061f0:	e032      	b.n	8006258 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80061f2:	7afb      	ldrb	r3, [r7, #11]
 80061f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	4619      	mov	r1, r3
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa37 	bl	8006670 <USBD_CoreFindEP>
 8006202:	4603      	mov	r3, r0
 8006204:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006206:	7dbb      	ldrb	r3, [r7, #22]
 8006208:	2bff      	cmp	r3, #255	@ 0xff
 800620a:	d025      	beq.n	8006258 <USBD_LL_DataOutStage+0x15c>
 800620c:	7dbb      	ldrb	r3, [r7, #22]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d122      	bne.n	8006258 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b03      	cmp	r3, #3
 800621c:	d117      	bne.n	800624e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800621e:	7dba      	ldrb	r2, [r7, #22]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	32ae      	adds	r2, #174	@ 0xae
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800622e:	7dba      	ldrb	r2, [r7, #22]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006236:	7dba      	ldrb	r2, [r7, #22]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	32ae      	adds	r2, #174	@ 0xae
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	7afa      	ldrb	r2, [r7, #11]
 8006244:	4611      	mov	r1, r2
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	4798      	blx	r3
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	e000      	b.n	800625a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	460b      	mov	r3, r1
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d16f      	bne.n	8006356 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3314      	adds	r3, #20
 800627a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006282:	2b02      	cmp	r3, #2
 8006284:	d15a      	bne.n	800633c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	429a      	cmp	r2, r3
 8006290:	d914      	bls.n	80062bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f001 f8bc 	bl	8007426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062ae:	2300      	movs	r3, #0
 80062b0:	2200      	movs	r2, #0
 80062b2:	2100      	movs	r1, #0
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f001 fcdf 	bl	8007c78 <USBD_LL_PrepareReceive>
 80062ba:	e03f      	b.n	800633c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d11c      	bne.n	8006302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d316      	bcc.n	8006302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062de:	429a      	cmp	r2, r3
 80062e0:	d20f      	bcs.n	8006302 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2100      	movs	r1, #0
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f001 f89d 	bl	8007426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	2100      	movs	r1, #0
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f001 fcbc 	bl	8007c78 <USBD_LL_PrepareReceive>
 8006300:	e01c      	b.n	800633c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b03      	cmp	r3, #3
 800630c:	d10f      	bne.n	800632e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800632e:	2180      	movs	r1, #128	@ 0x80
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f001 fbf7 	bl	8007b24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f001 f8aa 	bl	8007490 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d03a      	beq.n	80063bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fe42 	bl	8005fd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006354:	e032      	b.n	80063bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f985 	bl	8006670 <USBD_CoreFindEP>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2bff      	cmp	r3, #255	@ 0xff
 800636e:	d025      	beq.n	80063bc <USBD_LL_DataInStage+0x15a>
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d122      	bne.n	80063bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d11c      	bne.n	80063bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006382:	7dfa      	ldrb	r2, [r7, #23]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	32ae      	adds	r2, #174	@ 0xae
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d014      	beq.n	80063bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006392:	7dfa      	ldrb	r2, [r7, #23]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800639a:	7dfa      	ldrb	r2, [r7, #23]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	32ae      	adds	r2, #174	@ 0xae
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	7afa      	ldrb	r2, [r7, #11]
 80063a8:	4611      	mov	r1, r2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063b2:	7dbb      	ldrb	r3, [r7, #22]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063b8:	7dbb      	ldrb	r3, [r7, #22]
 80063ba:	e000      	b.n	80063be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d014      	beq.n	800642c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6852      	ldr	r2, [r2, #4]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	4611      	mov	r1, r2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800642c:	2340      	movs	r3, #64	@ 0x40
 800642e:	2200      	movs	r2, #0
 8006430:	2100      	movs	r1, #0
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 fb31 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2240      	movs	r2, #64	@ 0x40
 8006444:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006448:	2340      	movs	r3, #64	@ 0x40
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	@ 0x80
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fb23 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2240      	movs	r2, #64	@ 0x40
 800645e:	621a      	str	r2, [r3, #32]

  return ret;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b04      	cmp	r3, #4
 800649c:	d006      	beq.n	80064ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2204      	movs	r2, #4
 80064b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d106      	bne.n	80064e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d110      	bne.n	8006528 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	460b      	mov	r3, r1
 800653c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32ae      	adds	r2, #174	@ 0xae
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	e01c      	b.n	800658e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d115      	bne.n	800658c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32ae      	adds	r2, #174	@ 0xae
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	@ 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	78fa      	ldrb	r2, [r7, #3]
 8006586:	4611      	mov	r1, r2
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	32ae      	adds	r2, #174	@ 0xae
 80065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e01c      	b.n	80065f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d115      	bne.n	80065f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32ae      	adds	r2, #174	@ 0xae
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32ae      	adds	r2, #174	@ 0xae
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e8:	78fa      	ldrb	r2, [r7, #3]
 80065ea:	4611      	mov	r1, r2
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6852      	ldr	r2, [r2, #4]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	4611      	mov	r1, r2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006662:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800667c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	885b      	ldrh	r3, [r3, #2]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d91f      	bls.n	80066f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066b6:	e013      	b.n	80066e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066b8:	f107 030a 	add.w	r3, r7, #10
 80066bc:	4619      	mov	r1, r3
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f000 f81b 	bl	80066fa <USBD_GetNextDesc>
 80066c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d108      	bne.n	80066e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	789b      	ldrb	r3, [r3, #2]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d008      	beq.n	80066ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	885b      	ldrh	r3, [r3, #2]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	897b      	ldrh	r3, [r7, #10]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d8e5      	bhi.n	80066b8 <USBD_GetEpDesc+0x2e>
 80066ec:	e000      	b.n	80066f0 <USBD_GetEpDesc+0x66>
          break;
 80066ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80066f0:	693b      	ldr	r3, [r7, #16]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	4413      	add	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006724:	68fb      	ldr	r3, [r7, #12]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006732:	b480      	push	{r7}
 8006734:	b087      	sub	sp, #28
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	3301      	adds	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006750:	8a3b      	ldrh	r3, [r7, #16]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	b21a      	sxth	r2, r3
 8006756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800675a:	4313      	orrs	r3, r2
 800675c:	b21b      	sxth	r3, r3
 800675e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006760:	89fb      	ldrh	r3, [r7, #14]
}
 8006762:	4618      	mov	r0, r3
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006786:	2b40      	cmp	r3, #64	@ 0x40
 8006788:	d005      	beq.n	8006796 <USBD_StdDevReq+0x26>
 800678a:	2b40      	cmp	r3, #64	@ 0x40
 800678c:	d857      	bhi.n	800683e <USBD_StdDevReq+0xce>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00f      	beq.n	80067b2 <USBD_StdDevReq+0x42>
 8006792:	2b20      	cmp	r3, #32
 8006794:	d153      	bne.n	800683e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	32ae      	adds	r2, #174	@ 0xae
 80067a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
      break;
 80067b0:	e04a      	b.n	8006848 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d83b      	bhi.n	8006832 <USBD_StdDevReq+0xc2>
 80067ba:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <USBD_StdDevReq+0x50>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006829 	.word	0x08006829
 80067c8:	08006833 	.word	0x08006833
 80067cc:	0800681f 	.word	0x0800681f
 80067d0:	08006833 	.word	0x08006833
 80067d4:	080067f3 	.word	0x080067f3
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	08006833 	.word	0x08006833
 80067e0:	0800680b 	.word	0x0800680b
 80067e4:	080067fd 	.word	0x080067fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa3c 	bl	8006c68 <USBD_GetDescriptor>
          break;
 80067f0:	e024      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fba1 	bl	8006f3c <USBD_SetAddress>
          break;
 80067fa:	e01f      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fbe0 	bl	8006fc4 <USBD_SetConfig>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
          break;
 8006808:	e018      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc83 	bl	8007118 <USBD_GetConfig>
          break;
 8006812:	e013      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fcb4 	bl	8007184 <USBD_GetStatus>
          break;
 800681c:	e00e      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fce3 	bl	80071ec <USBD_SetFeature>
          break;
 8006826:	e009      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fd07 	bl	800723e <USBD_ClrFeature>
          break;
 8006830:	e004      	b.n	800683c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fd5e 	bl	80072f6 <USBD_CtlError>
          break;
 800683a:	bf00      	nop
      }
      break;
 800683c:	e004      	b.n	8006848 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fd58 	bl	80072f6 <USBD_CtlError>
      break;
 8006846:	bf00      	nop
  }

  return ret;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	d005      	beq.n	800687a <USBD_StdItfReq+0x26>
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d852      	bhi.n	8006918 <USBD_StdItfReq+0xc4>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <USBD_StdItfReq+0x26>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d14e      	bne.n	8006918 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006880:	b2db      	uxtb	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	2b02      	cmp	r3, #2
 8006886:	d840      	bhi.n	800690a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	889b      	ldrh	r3, [r3, #4]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d836      	bhi.n	8006900 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	889b      	ldrh	r3, [r3, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fedb 	bl	8006656 <USBD_CoreFindIF>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	2bff      	cmp	r3, #255	@ 0xff
 80068a8:	d01d      	beq.n	80068e6 <USBD_StdItfReq+0x92>
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11a      	bne.n	80068e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068b0:	7bba      	ldrb	r2, [r7, #14]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32ae      	adds	r2, #174	@ 0xae
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00f      	beq.n	80068e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068c0:	7bba      	ldrb	r2, [r7, #14]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068c8:	7bba      	ldrb	r2, [r7, #14]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32ae      	adds	r2, #174	@ 0xae
 80068ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068de:	e004      	b.n	80068ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068e4:	e001      	b.n	80068ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d110      	bne.n	8006914 <USBD_StdItfReq+0xc0>
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10d      	bne.n	8006914 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fdb6 	bl	800746a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068fe:	e009      	b.n	8006914 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fcf7 	bl	80072f6 <USBD_CtlError>
          break;
 8006908:	e004      	b.n	8006914 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fcf2 	bl	80072f6 <USBD_CtlError>
          break;
 8006912:	e000      	b.n	8006916 <USBD_StdItfReq+0xc2>
          break;
 8006914:	bf00      	nop
      }
      break;
 8006916:	e004      	b.n	8006922 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fceb 	bl	80072f6 <USBD_CtlError>
      break;
 8006920:	bf00      	nop
  }

  return ret;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	889b      	ldrh	r3, [r3, #4]
 800693e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006948:	2b40      	cmp	r3, #64	@ 0x40
 800694a:	d007      	beq.n	800695c <USBD_StdEPReq+0x30>
 800694c:	2b40      	cmp	r3, #64	@ 0x40
 800694e:	f200 817f 	bhi.w	8006c50 <USBD_StdEPReq+0x324>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02a      	beq.n	80069ac <USBD_StdEPReq+0x80>
 8006956:	2b20      	cmp	r3, #32
 8006958:	f040 817a 	bne.w	8006c50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fe85 	bl	8006670 <USBD_CoreFindEP>
 8006966:	4603      	mov	r3, r0
 8006968:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800696a:	7b7b      	ldrb	r3, [r7, #13]
 800696c:	2bff      	cmp	r3, #255	@ 0xff
 800696e:	f000 8174 	beq.w	8006c5a <USBD_StdEPReq+0x32e>
 8006972:	7b7b      	ldrb	r3, [r7, #13]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 8170 	bne.w	8006c5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800697a:	7b7a      	ldrb	r2, [r7, #13]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006982:	7b7a      	ldrb	r2, [r7, #13]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	32ae      	adds	r2, #174	@ 0xae
 8006988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8163 	beq.w	8006c5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006994:	7b7a      	ldrb	r2, [r7, #13]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	@ 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069aa:	e156      	b.n	8006c5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d008      	beq.n	80069c6 <USBD_StdEPReq+0x9a>
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	f300 8145 	bgt.w	8006c44 <USBD_StdEPReq+0x318>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 809b 	beq.w	8006af6 <USBD_StdEPReq+0x1ca>
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d03c      	beq.n	8006a3e <USBD_StdEPReq+0x112>
 80069c4:	e13e      	b.n	8006c44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d002      	beq.n	80069d8 <USBD_StdEPReq+0xac>
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d016      	beq.n	8006a04 <USBD_StdEPReq+0xd8>
 80069d6:	e02c      	b.n	8006a32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <USBD_StdEPReq+0xce>
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b80      	cmp	r3, #128	@ 0x80
 80069e2:	d00a      	beq.n	80069fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 f89b 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ee:	2180      	movs	r1, #128	@ 0x80
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f897 	bl	8007b24 <USBD_LL_StallEP>
 80069f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f8:	e020      	b.n	8006a3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc7a 	bl	80072f6 <USBD_CtlError>
              break;
 8006a02:	e01b      	b.n	8006a3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	885b      	ldrh	r3, [r3, #2]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10e      	bne.n	8006a2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <USBD_StdEPReq+0xfe>
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b80      	cmp	r3, #128	@ 0x80
 8006a16:	d008      	beq.n	8006a2a <USBD_StdEPReq+0xfe>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f87d 	bl	8007b24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fd1d 	bl	800746a <USBD_CtlSendStatus>

              break;
 8006a30:	e004      	b.n	8006a3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc5e 	bl	80072f6 <USBD_CtlError>
              break;
 8006a3a:	bf00      	nop
          }
          break;
 8006a3c:	e107      	b.n	8006c4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d002      	beq.n	8006a50 <USBD_StdEPReq+0x124>
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d016      	beq.n	8006a7c <USBD_StdEPReq+0x150>
 8006a4e:	e04b      	b.n	8006ae8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00d      	beq.n	8006a72 <USBD_StdEPReq+0x146>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b80      	cmp	r3, #128	@ 0x80
 8006a5a:	d00a      	beq.n	8006a72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f85f 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a66:	2180      	movs	r1, #128	@ 0x80
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f85b 	bl	8007b24 <USBD_LL_StallEP>
 8006a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a70:	e040      	b.n	8006af4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc3e 	bl	80072f6 <USBD_CtlError>
              break;
 8006a7a:	e03b      	b.n	8006af4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d136      	bne.n	8006af2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 f865 	bl	8007b62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fce6 	bl	800746a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fde4 	bl	8006670 <USBD_CoreFindEP>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aac:	7b7b      	ldrb	r3, [r7, #13]
 8006aae:	2bff      	cmp	r3, #255	@ 0xff
 8006ab0:	d01f      	beq.n	8006af2 <USBD_StdEPReq+0x1c6>
 8006ab2:	7b7b      	ldrb	r3, [r7, #13]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11c      	bne.n	8006af2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ab8:	7b7a      	ldrb	r2, [r7, #13]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ac0:	7b7a      	ldrb	r2, [r7, #13]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32ae      	adds	r2, #174	@ 0xae
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d010      	beq.n	8006af2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ad0:	7b7a      	ldrb	r2, [r7, #13]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	32ae      	adds	r2, #174	@ 0xae
 8006ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ae6:	e004      	b.n	8006af2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fc03 	bl	80072f6 <USBD_CtlError>
              break;
 8006af0:	e000      	b.n	8006af4 <USBD_StdEPReq+0x1c8>
              break;
 8006af2:	bf00      	nop
          }
          break;
 8006af4:	e0ab      	b.n	8006c4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d002      	beq.n	8006b08 <USBD_StdEPReq+0x1dc>
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d032      	beq.n	8006b6c <USBD_StdEPReq+0x240>
 8006b06:	e097      	b.n	8006c38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <USBD_StdEPReq+0x1f2>
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b80      	cmp	r3, #128	@ 0x80
 8006b12:	d004      	beq.n	8006b1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fbed 	bl	80072f6 <USBD_CtlError>
                break;
 8006b1c:	e091      	b.n	8006c42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da0b      	bge.n	8006b3e <USBD_StdEPReq+0x212>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	3310      	adds	r3, #16
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	e00b      	b.n	8006b56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2202      	movs	r2, #2
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc43 	bl	80073f0 <USBD_CtlSendData>
              break;
 8006b6a:	e06a      	b.n	8006c42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da11      	bge.n	8006b98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	3324      	adds	r3, #36	@ 0x24
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d117      	bne.n	8006bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbb0 	bl	80072f6 <USBD_CtlError>
                  break;
 8006b96:	e054      	b.n	8006c42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fb9d 	bl	80072f6 <USBD_CtlError>
                  break;
 8006bbc:	e041      	b.n	8006c42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da0b      	bge.n	8006bde <USBD_StdEPReq+0x2b2>
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3310      	adds	r3, #16
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	e00b      	b.n	8006bf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <USBD_StdEPReq+0x2d8>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d103      	bne.n	8006c0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	e00e      	b.n	8006c2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 ffc5 	bl	8007ba0 <USBD_LL_IsStallEP>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fbdd 	bl	80073f0 <USBD_CtlSendData>
              break;
 8006c36:	e004      	b.n	8006c42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fb5b 	bl	80072f6 <USBD_CtlError>
              break;
 8006c40:	bf00      	nop
          }
          break;
 8006c42:	e004      	b.n	8006c4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb55 	bl	80072f6 <USBD_CtlError>
          break;
 8006c4c:	bf00      	nop
      }
      break;
 8006c4e:	e005      	b.n	8006c5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fb4f 	bl	80072f6 <USBD_CtlError>
      break;
 8006c58:	e000      	b.n	8006c5c <USBD_StdEPReq+0x330>
      break;
 8006c5a:	bf00      	nop
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	f200 8128 	bhi.w	8006ede <USBD_GetDescriptor+0x276>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <USBD_GetDescriptor+0x2c>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006d09 	.word	0x08006d09
 8006ca0:	08006edf 	.word	0x08006edf
 8006ca4:	08006edf 	.word	0x08006edf
 8006ca8:	08006e7f 	.word	0x08006e7f
 8006cac:	08006eab 	.word	0x08006eab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
      break;
 8006cc6:	e112      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7c1b      	ldrb	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd8:	f107 0208 	add.w	r2, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cea:	e100      	b.n	8006eee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf4:	f107 0208 	add.w	r2, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	2202      	movs	r2, #2
 8006d04:	701a      	strb	r2, [r3, #0]
      break;
 8006d06:	e0f2      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	885b      	ldrh	r3, [r3, #2]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	f200 80ac 	bhi.w	8006e6c <USBD_GetDescriptor+0x204>
 8006d14:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <USBD_GetDescriptor+0xb4>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d35 	.word	0x08006d35
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006d9d 	.word	0x08006d9d
 8006d28:	08006dd1 	.word	0x08006dd1
 8006d2c:	08006e05 	.word	0x08006e05
 8006d30:	08006e39 	.word	0x08006e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d56:	e091      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 facb 	bl	80072f6 <USBD_CtlError>
            err++;
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	3301      	adds	r3, #1
 8006d64:	72fb      	strb	r3, [r7, #11]
          break;
 8006d66:	e089      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8a:	e077      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fab1 	bl	80072f6 <USBD_CtlError>
            err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9a:	e06f      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dbe:	e05d      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa97 	bl	80072f6 <USBD_CtlError>
            err++;
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dce:	e055      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7c12      	ldrb	r2, [r2, #16]
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df2:	e043      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa7d 	bl	80072f6 <USBD_CtlError>
            err++;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	72fb      	strb	r3, [r7, #11]
          break;
 8006e02:	e03b      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e029      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa63 	bl	80072f6 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e021      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e00f      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa49 	bl	80072f6 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e007      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa41 	bl	80072f6 <USBD_CtlError>
          err++;
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	3301      	adds	r3, #1
 8006e78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e7a:	bf00      	nop
      }
      break;
 8006e7c:	e037      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7c1b      	ldrb	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8e:	f107 0208 	add.w	r2, r7, #8
 8006e92:	4610      	mov	r0, r2
 8006e94:	4798      	blx	r3
 8006e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e98:	e029      	b.n	8006eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa2a 	bl	80072f6 <USBD_CtlError>
        err++;
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea8:	e021      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	f107 0208 	add.w	r2, r7, #8
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4798      	blx	r3
 8006ec2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	2207      	movs	r2, #7
 8006eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ecc:	e00f      	b.n	8006eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa10 	bl	80072f6 <USBD_CtlError>
        err++;
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	72fb      	strb	r3, [r7, #11]
      break;
 8006edc:	e007      	b.n	8006eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fa08 	bl	80072f6 <USBD_CtlError>
      err++;
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	72fb      	strb	r3, [r7, #11]
      break;
 8006eec:	bf00      	nop
  }

  if (err != 0U)
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11e      	bne.n	8006f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d016      	beq.n	8006f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006efc:	893b      	ldrh	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88da      	ldrh	r2, [r3, #6]
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bf28      	it	cs
 8006f0c:	4613      	movcs	r3, r2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f12:	893b      	ldrh	r3, [r7, #8]
 8006f14:	461a      	mov	r2, r3
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa69 	bl	80073f0 <USBD_CtlSendData>
 8006f1e:	e009      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9e7 	bl	80072f6 <USBD_CtlError>
 8006f28:	e004      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa9d 	bl	800746a <USBD_CtlSendStatus>
 8006f30:	e000      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    return;
 8006f32:	bf00      	nop
  }
}
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d131      	bne.n	8006fb2 <USBD_SetAddress+0x76>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d12d      	bne.n	8006fb2 <USBD_SetAddress+0x76>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f5c:	d829      	bhi.n	8006fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d104      	bne.n	8006f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9bc 	bl	80072f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	e01d      	b.n	8006fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7bfa      	ldrb	r2, [r7, #15]
 8006f84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fe33 	bl	8007bf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa69 	bl	800746a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	e009      	b.n	8006fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb0:	e004      	b.n	8006fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f99e 	bl	80072f6 <USBD_CtlError>
  }
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8007114 <USBD_SetConfig+0x150>)
 8006fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8007114 <USBD_SetConfig+0x150>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d905      	bls.n	8006ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f985 	bl	80072f6 <USBD_CtlError>
    return USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e08c      	b.n	800710a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d002      	beq.n	8007002 <USBD_SetConfig+0x3e>
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d029      	beq.n	8007054 <USBD_SetConfig+0x90>
 8007000:	e075      	b.n	80070ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007002:	4b44      	ldr	r3, [pc, #272]	@ (8007114 <USBD_SetConfig+0x150>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d020      	beq.n	800704c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800700a:	4b42      	ldr	r3, [pc, #264]	@ (8007114 <USBD_SetConfig+0x150>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007014:	4b3f      	ldr	r3, [pc, #252]	@ (8007114 <USBD_SetConfig+0x150>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe ffe3 	bl	8005fe6 <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f962 	bl	80072f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800703a:	e065      	b.n	8007108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fa14 	bl	800746a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2203      	movs	r2, #3
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800704a:	e05d      	b.n	8007108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa0c 	bl	800746a <USBD_CtlSendStatus>
      break;
 8007052:	e059      	b.n	8007108 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007054:	4b2f      	ldr	r3, [pc, #188]	@ (8007114 <USBD_SetConfig+0x150>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d112      	bne.n	8007082 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007064:	4b2b      	ldr	r3, [pc, #172]	@ (8007114 <USBD_SetConfig+0x150>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800706e:	4b29      	ldr	r3, [pc, #164]	@ (8007114 <USBD_SetConfig+0x150>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fe ffd2 	bl	800601e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9f5 	bl	800746a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007080:	e042      	b.n	8007108 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007082:	4b24      	ldr	r3, [pc, #144]	@ (8007114 <USBD_SetConfig+0x150>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d02a      	beq.n	80070e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fe ffc0 	bl	800601e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800709e:	4b1d      	ldr	r3, [pc, #116]	@ (8007114 <USBD_SetConfig+0x150>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007114 <USBD_SetConfig+0x150>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fe ff99 	bl	8005fe6 <USBD_SetClassConfig>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00f      	beq.n	80070de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f918 	bl	80072f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe ffa5 	bl	800601e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80070dc:	e014      	b.n	8007108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9c3 	bl	800746a <USBD_CtlSendStatus>
      break;
 80070e4:	e010      	b.n	8007108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9bf 	bl	800746a <USBD_CtlSendStatus>
      break;
 80070ec:	e00c      	b.n	8007108 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f900 	bl	80072f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070f6:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <USBD_SetConfig+0x150>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fe ff8e 	bl	800601e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007102:	2303      	movs	r3, #3
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	bf00      	nop
  }

  return ret;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000350 	.word	0x20000350

08007118 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d004      	beq.n	8007134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8e2 	bl	80072f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007132:	e023      	b.n	800717c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	dc02      	bgt.n	8007146 <USBD_GetConfig+0x2e>
 8007140:	2b00      	cmp	r3, #0
 8007142:	dc03      	bgt.n	800714c <USBD_GetConfig+0x34>
 8007144:	e015      	b.n	8007172 <USBD_GetConfig+0x5a>
 8007146:	2b03      	cmp	r3, #3
 8007148:	d00b      	beq.n	8007162 <USBD_GetConfig+0x4a>
 800714a:	e012      	b.n	8007172 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3308      	adds	r3, #8
 8007156:	2201      	movs	r2, #1
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f948 	bl	80073f0 <USBD_CtlSendData>
        break;
 8007160:	e00c      	b.n	800717c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	2201      	movs	r2, #1
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f940 	bl	80073f0 <USBD_CtlSendData>
        break;
 8007170:	e004      	b.n	800717c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8be 	bl	80072f6 <USBD_CtlError>
        break;
 800717a:	bf00      	nop
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007194:	b2db      	uxtb	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	2b02      	cmp	r3, #2
 800719a:	d81e      	bhi.n	80071da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	88db      	ldrh	r3, [r3, #6]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d004      	beq.n	80071ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f8a5 	bl	80072f6 <USBD_CtlError>
        break;
 80071ac:	e01a      	b.n	80071e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	330c      	adds	r3, #12
 80071ce:	2202      	movs	r2, #2
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f90c 	bl	80073f0 <USBD_CtlSendData>
      break;
 80071d8:	e004      	b.n	80071e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f88a 	bl	80072f6 <USBD_CtlError>
      break;
 80071e2:	bf00      	nop
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d107      	bne.n	800720e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f92f 	bl	800746a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800720c:	e013      	b.n	8007236 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d10b      	bne.n	800722e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	889b      	ldrh	r3, [r3, #4]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	b2da      	uxtb	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f91f 	bl	800746a <USBD_CtlSendStatus>
}
 800722c:	e003      	b.n	8007236 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f860 	bl	80072f6 <USBD_CtlError>
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	2b02      	cmp	r3, #2
 8007254:	d80b      	bhi.n	800726e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10c      	bne.n	8007278 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8ff 	bl	800746a <USBD_CtlSendStatus>
      }
      break;
 800726c:	e004      	b.n	8007278 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f840 	bl	80072f6 <USBD_CtlError>
      break;
 8007276:	e000      	b.n	800727a <USBD_ClrFeature+0x3c>
      break;
 8007278:	bf00      	nop
  }
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff fa40 	bl	8006732 <SWAPBYTE>
 80072b2:	4603      	mov	r3, r0
 80072b4:	461a      	mov	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fa33 	bl	8006732 <SWAPBYTE>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fa26 	bl	8006732 <SWAPBYTE>
 80072e6:	4603      	mov	r3, r0
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	80da      	strh	r2, [r3, #6]
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007300:	2180      	movs	r1, #128	@ 0x80
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fc0e 	bl	8007b24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fc0a 	bl	8007b24 <USBD_LL_StallEP>
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d042      	beq.n	80073b4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007332:	6938      	ldr	r0, [r7, #16]
 8007334:	f000 f842 	bl	80073bc <USBD_GetLen>
 8007338:	4603      	mov	r3, r0
 800733a:	3301      	adds	r3, #1
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007342:	d808      	bhi.n	8007356 <USBD_GetString+0x3e>
 8007344:	6938      	ldr	r0, [r7, #16]
 8007346:	f000 f839 	bl	80073bc <USBD_GetLen>
 800734a:	4603      	mov	r3, r0
 800734c:	3301      	adds	r3, #1
 800734e:	b29b      	uxth	r3, r3
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	e001      	b.n	800735a <USBD_GetString+0x42>
 8007356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	4413      	add	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	701a      	strb	r2, [r3, #0]
  idx++;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	3301      	adds	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	2203      	movs	r2, #3
 8007378:	701a      	strb	r2, [r3, #0]
  idx++;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	3301      	adds	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007380:	e013      	b.n	80073aa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
    idx++;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	3301      	adds	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4413      	add	r3, r2
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	3301      	adds	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e7      	bne.n	8007382 <USBD_GetString+0x6a>
 80073b2:	e000      	b.n	80073b6 <USBD_GetString+0x9e>
    return;
 80073b4:	bf00      	nop
  }
}
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073cc:	e005      	b.n	80073da <USBD_GetLen+0x1e>
  {
    len++;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	3301      	adds	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f5      	bne.n	80073ce <USBD_GetLen+0x12>
  }

  return len;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	2100      	movs	r1, #0
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fc0d 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	2100      	movs	r1, #0
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fbfc 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fc0c 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fbd8 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2205      	movs	r2, #5
 800749c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a0:	2300      	movs	r3, #0
 80074a2:	2200      	movs	r2, #0
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fbe6 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074bc:	2200      	movs	r2, #0
 80074be:	490e      	ldr	r1, [pc, #56]	@ (80074f8 <MX_USB_DEVICE_Init+0x40>)
 80074c0:	480e      	ldr	r0, [pc, #56]	@ (80074fc <MX_USB_DEVICE_Init+0x44>)
 80074c2:	f7fe fd13 	bl	8005eec <USBD_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074cc:	f7fa f8a2 	bl	8001614 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074d0:	490b      	ldr	r1, [pc, #44]	@ (8007500 <MX_USB_DEVICE_Init+0x48>)
 80074d2:	480a      	ldr	r0, [pc, #40]	@ (80074fc <MX_USB_DEVICE_Init+0x44>)
 80074d4:	f7fe fd3a 	bl	8005f4c <USBD_RegisterClass>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074de:	f7fa f899 	bl	8001614 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074e2:	4806      	ldr	r0, [pc, #24]	@ (80074fc <MX_USB_DEVICE_Init+0x44>)
 80074e4:	f7fe fd68 	bl	8005fb8 <USBD_Start>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80074ee:	f7fa f891 	bl	8001614 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200000cc 	.word	0x200000cc
 80074fc:	20000354 	.word	0x20000354
 8007500:	2000000c 	.word	0x2000000c

08007504 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2212      	movs	r2, #18
 8007514:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007516:	4b03      	ldr	r3, [pc, #12]	@ (8007524 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	200000e8 	.word	0x200000e8

08007528 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2204      	movs	r2, #4
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800753a:	4b03      	ldr	r3, [pc, #12]	@ (8007548 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	200000fc 	.word	0x200000fc

0800754c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d105      	bne.n	800756a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	4907      	ldr	r1, [pc, #28]	@ (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
 8007562:	4808      	ldr	r0, [pc, #32]	@ (8007584 <USBD_FS_ProductStrDescriptor+0x38>)
 8007564:	f7ff fed8 	bl	8007318 <USBD_GetString>
 8007568:	e004      	b.n	8007574 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	4904      	ldr	r1, [pc, #16]	@ (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
 800756e:	4805      	ldr	r0, [pc, #20]	@ (8007584 <USBD_FS_ProductStrDescriptor+0x38>)
 8007570:	f7ff fed2 	bl	8007318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007574:	4b02      	ldr	r3, [pc, #8]	@ (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000630 	.word	0x20000630
 8007584:	0800b18c 	.word	0x0800b18c

08007588 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4904      	ldr	r1, [pc, #16]	@ (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007598:	4804      	ldr	r0, [pc, #16]	@ (80075ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800759a:	f7ff febd 	bl	8007318 <USBD_GetString>
  return USBD_StrDesc;
 800759e:	4b02      	ldr	r3, [pc, #8]	@ (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000630 	.word	0x20000630
 80075ac:	0800b1a4 	.word	0x0800b1a4

080075b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	221a      	movs	r2, #26
 80075c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075c2:	f000 f843 	bl	800764c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075c6:	4b02      	ldr	r3, [pc, #8]	@ (80075d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20000100 	.word	0x20000100

080075d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4907      	ldr	r1, [pc, #28]	@ (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ea:	4808      	ldr	r0, [pc, #32]	@ (800760c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075ec:	f7ff fe94 	bl	8007318 <USBD_GetString>
 80075f0:	e004      	b.n	80075fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	4904      	ldr	r1, [pc, #16]	@ (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075f6:	4805      	ldr	r0, [pc, #20]	@ (800760c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f8:	f7ff fe8e 	bl	8007318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075fc:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000630 	.word	0x20000630
 800760c:	0800b1b8 	.word	0x0800b1b8

08007610 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4907      	ldr	r1, [pc, #28]	@ (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007626:	4808      	ldr	r0, [pc, #32]	@ (8007648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007628:	f7ff fe76 	bl	8007318 <USBD_GetString>
 800762c:	e004      	b.n	8007638 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	4904      	ldr	r1, [pc, #16]	@ (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007632:	4805      	ldr	r0, [pc, #20]	@ (8007648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007634:	f7ff fe70 	bl	8007318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007638:	4b02      	ldr	r3, [pc, #8]	@ (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000630 	.word	0x20000630
 8007648:	0800b1c4 	.word	0x0800b1c4

0800764c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007652:	4b0f      	ldr	r3, [pc, #60]	@ (8007690 <Get_SerialNum+0x44>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007658:	4b0e      	ldr	r3, [pc, #56]	@ (8007694 <Get_SerialNum+0x48>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800765e:	4b0e      	ldr	r3, [pc, #56]	@ (8007698 <Get_SerialNum+0x4c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007672:	2208      	movs	r2, #8
 8007674:	4909      	ldr	r1, [pc, #36]	@ (800769c <Get_SerialNum+0x50>)
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f814 	bl	80076a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800767c:	2204      	movs	r2, #4
 800767e:	4908      	ldr	r1, [pc, #32]	@ (80076a0 <Get_SerialNum+0x54>)
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f000 f80f 	bl	80076a4 <IntToUnicode>
  }
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	1fff7a10 	.word	0x1fff7a10
 8007694:	1fff7a14 	.word	0x1fff7a14
 8007698:	1fff7a18 	.word	0x1fff7a18
 800769c:	20000102 	.word	0x20000102
 80076a0:	20000112 	.word	0x20000112

080076a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
 80076ba:	e027      	b.n	800770c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0f1b      	lsrs	r3, r3, #28
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d80b      	bhi.n	80076dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	0f1b      	lsrs	r3, r3, #28
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4619      	mov	r1, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	440b      	add	r3, r1
 80076d4:	3230      	adds	r2, #48	@ 0x30
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e00a      	b.n	80076f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	440b      	add	r3, r1
 80076ec:	3237      	adds	r2, #55	@ 0x37
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	3301      	adds	r3, #1
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3301      	adds	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
 800770c:	7dfa      	ldrb	r2, [r7, #23]
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	429a      	cmp	r2, r3
 8007712:	d3d3      	bcc.n	80076bc <IntToUnicode+0x18>
  }
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	@ 0x28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007744:	d147      	bne.n	80077d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	4b25      	ldr	r3, [pc, #148]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	4a24      	ldr	r2, [pc, #144]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6313      	str	r3, [r2, #48]	@ 0x30
 8007756:	4b22      	ldr	r3, [pc, #136]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007762:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8007766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007768:	2302      	movs	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007770:	2303      	movs	r3, #3
 8007772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007774:	230a      	movs	r3, #10
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4619      	mov	r1, r3
 800777e:	4819      	ldr	r0, [pc, #100]	@ (80077e4 <HAL_PCD_MspInit+0xc0>)
 8007780:	f7fa faa2 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4619      	mov	r1, r3
 8007798:	4812      	ldr	r0, [pc, #72]	@ (80077e4 <HAL_PCD_MspInit+0xc0>)
 800779a:	f7fa fa95 	bl	8001cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800779e:	4b10      	ldr	r3, [pc, #64]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a2:	4a0f      	ldr	r2, [pc, #60]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b2:	4a0b      	ldr	r2, [pc, #44]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80077ba:	4b09      	ldr	r3, [pc, #36]	@ (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	2043      	movs	r0, #67	@ 0x43
 80077cc:	f7fa fa45 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077d0:	2043      	movs	r0, #67	@ 0x43
 80077d2:	f7fa fa5e 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077d6:	bf00      	nop
 80077d8:	3728      	adds	r7, #40	@ 0x28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	40020000 	.word	0x40020000

080077e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7fe fc27 	bl	8006052 <USBD_LL_SetupStage>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	4619      	mov	r1, r3
 8007836:	f7fe fc61 	bl	80060fc <USBD_LL_DataOutStage>
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	3320      	adds	r3, #32
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	4619      	mov	r1, r3
 800786a:	f7fe fcfa 	bl	8006262 <USBD_LL_DataInStage>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fe34 	bl	80064f2 <USBD_LL_SOF>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	79db      	ldrb	r3, [r3, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
 80078aa:	e008      	b.n	80078be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	79db      	ldrb	r3, [r3, #7]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d102      	bne.n	80078ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
 80078b8:	e001      	b.n	80078be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078ba:	f7f9 feab 	bl	8001614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078c4:	7bfa      	ldrb	r2, [r7, #15]
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fdce 	bl	800646a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fd76 	bl	80063c6 <USBD_LL_Reset>
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fdc9 	bl	800648a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	7adb      	ldrb	r3, [r3, #11]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007918:	4b04      	ldr	r3, [pc, #16]	@ (800792c <HAL_PCD_SuspendCallback+0x48>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	4a03      	ldr	r2, [pc, #12]	@ (800792c <HAL_PCD_SuspendCallback+0x48>)
 800791e:	f043 0306 	orr.w	r3, r3, #6
 8007922:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fdbf 	bl	80064c2 <USBD_LL_Resume>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fe17 	bl	8006596 <USBD_LL_IsoOUTIncomplete>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fdd3 	bl	8006532 <USBD_LL_IsoINIncomplete>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fe29 	bl	80065fa <USBD_LL_DevConnected>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fe26 	bl	8006610 <USBD_LL_DevDisconnected>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d13c      	bne.n	8007a56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079dc:	4a20      	ldr	r2, [pc, #128]	@ (8007a60 <USBD_LL_Init+0x94>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a60 <USBD_LL_Init+0x94>)
 80079e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007a60 <USBD_LL_Init+0x94>)
 80079ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80079f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a60 <USBD_LL_Init+0x94>)
 80079f6:	2204      	movs	r2, #4
 80079f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079fa:	4b19      	ldr	r3, [pc, #100]	@ (8007a60 <USBD_LL_Init+0x94>)
 80079fc:	2202      	movs	r2, #2
 80079fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a00:	4b17      	ldr	r3, [pc, #92]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a06:	4b16      	ldr	r3, [pc, #88]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a08:	2202      	movs	r2, #2
 8007a0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007a0c:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a12:	4b13      	ldr	r3, [pc, #76]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a18:	4b11      	ldr	r3, [pc, #68]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a1e:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a24:	4b0e      	ldr	r3, [pc, #56]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a2a:	480d      	ldr	r0, [pc, #52]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a2c:	f7fa fb11 	bl	8002052 <HAL_PCD_Init>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a36:	f7f9 fded 	bl	8001614 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a3a:	2180      	movs	r1, #128	@ 0x80
 8007a3c:	4808      	ldr	r0, [pc, #32]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a3e:	f7fb fd26 	bl	800348e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a42:	2240      	movs	r2, #64	@ 0x40
 8007a44:	2100      	movs	r1, #0
 8007a46:	4806      	ldr	r0, [pc, #24]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a48:	f7fb fcda 	bl	8003400 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a4c:	2280      	movs	r2, #128	@ 0x80
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4803      	ldr	r0, [pc, #12]	@ (8007a60 <USBD_LL_Init+0x94>)
 8007a52:	f7fb fcd5 	bl	8003400 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000830 	.word	0x20000830

08007a64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fa fbf8 	bl	8002270 <HAL_PCD_Start>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f930 	bl	8007cec <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	70fb      	strb	r3, [r7, #3]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70bb      	strb	r3, [r7, #2]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ac2:	78bb      	ldrb	r3, [r7, #2]
 8007ac4:	883a      	ldrh	r2, [r7, #0]
 8007ac6:	78f9      	ldrb	r1, [r7, #3]
 8007ac8:	f7fb f8cc 	bl	8002c64 <HAL_PCD_EP_Open>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f90a 	bl	8007cec <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fb f917 	bl	8002d38 <HAL_PCD_EP_Close>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f8eb 	bl	8007cec <USBD_Get_USB_Status>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fb f9b7 	bl	8002eb6 <HAL_PCD_EP_SetStall>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f8cc 	bl	8007cec <USBD_Get_USB_Status>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fb f9fb 	bl	8002f7c <HAL_PCD_EP_ClrStall>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f8ad 	bl	8007cec <USBD_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da0b      	bge.n	8007bd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	3316      	adds	r3, #22
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	e00b      	b.n	8007bec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007bea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fb f800 	bl	8002c1c <HAL_PCD_SetAddress>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f862 	bl	8007cec <USBD_Get_USB_Status>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	460b      	mov	r3, r1
 8007c44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c54:	7af9      	ldrb	r1, [r7, #11]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	f7fb f8f2 	bl	8002e42 <HAL_PCD_EP_Transmit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f841 	bl	8007cec <USBD_Get_USB_Status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c96:	7af9      	ldrb	r1, [r7, #11]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	f7fb f896 	bl	8002dcc <HAL_PCD_EP_Receive>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f820 	bl	8007cec <USBD_Get_USB_Status>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cc4:	4b03      	ldr	r3, [pc, #12]	@ (8007cd4 <USBD_static_malloc+0x18>)
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20000d14 	.word	0x20000d14

08007cd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]

}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d817      	bhi.n	8007d30 <USBD_Get_USB_Status+0x44>
 8007d00:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <USBD_Get_USB_Status+0x1c>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d1f 	.word	0x08007d1f
 8007d10:	08007d25 	.word	0x08007d25
 8007d14:	08007d2b 	.word	0x08007d2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1c:	e00b      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	73fb      	strb	r3, [r7, #15]
    break;
 8007d22:	e008      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
    break;
 8007d28:	e005      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2e:	e002      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	73fb      	strb	r3, [r7, #15]
    break;
 8007d34:	bf00      	nop
  }
  return usb_status;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <__cvt>:
 8007d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	ec57 6b10 	vmov	r6, r7, d0
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	4619      	mov	r1, r3
 8007d52:	463b      	mov	r3, r7
 8007d54:	bfbb      	ittet	lt
 8007d56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d5a:	461f      	movlt	r7, r3
 8007d5c:	2300      	movge	r3, #0
 8007d5e:	232d      	movlt	r3, #45	@ 0x2d
 8007d60:	700b      	strb	r3, [r1, #0]
 8007d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d68:	4691      	mov	r9, r2
 8007d6a:	f023 0820 	bic.w	r8, r3, #32
 8007d6e:	bfbc      	itt	lt
 8007d70:	4632      	movlt	r2, r6
 8007d72:	4616      	movlt	r6, r2
 8007d74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d78:	d005      	beq.n	8007d86 <__cvt+0x42>
 8007d7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d7e:	d100      	bne.n	8007d82 <__cvt+0x3e>
 8007d80:	3401      	adds	r4, #1
 8007d82:	2102      	movs	r1, #2
 8007d84:	e000      	b.n	8007d88 <__cvt+0x44>
 8007d86:	2103      	movs	r1, #3
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	ab02      	add	r3, sp, #8
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	ec47 6b10 	vmov	d0, r6, r7
 8007d94:	4653      	mov	r3, sl
 8007d96:	4622      	mov	r2, r4
 8007d98:	f000 fe4e 	bl	8008a38 <_dtoa_r>
 8007d9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007da0:	4605      	mov	r5, r0
 8007da2:	d119      	bne.n	8007dd8 <__cvt+0x94>
 8007da4:	f019 0f01 	tst.w	r9, #1
 8007da8:	d00e      	beq.n	8007dc8 <__cvt+0x84>
 8007daa:	eb00 0904 	add.w	r9, r0, r4
 8007dae:	2200      	movs	r2, #0
 8007db0:	2300      	movs	r3, #0
 8007db2:	4630      	mov	r0, r6
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fe97 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dba:	b108      	cbz	r0, 8007dc0 <__cvt+0x7c>
 8007dbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dc0:	2230      	movs	r2, #48	@ 0x30
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	454b      	cmp	r3, r9
 8007dc6:	d31e      	bcc.n	8007e06 <__cvt+0xc2>
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dcc:	1b5b      	subs	r3, r3, r5
 8007dce:	4628      	mov	r0, r5
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	b004      	add	sp, #16
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ddc:	eb00 0904 	add.w	r9, r0, r4
 8007de0:	d1e5      	bne.n	8007dae <__cvt+0x6a>
 8007de2:	7803      	ldrb	r3, [r0, #0]
 8007de4:	2b30      	cmp	r3, #48	@ 0x30
 8007de6:	d10a      	bne.n	8007dfe <__cvt+0xba>
 8007de8:	2200      	movs	r2, #0
 8007dea:	2300      	movs	r3, #0
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fe7a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007df4:	b918      	cbnz	r0, 8007dfe <__cvt+0xba>
 8007df6:	f1c4 0401 	rsb	r4, r4, #1
 8007dfa:	f8ca 4000 	str.w	r4, [sl]
 8007dfe:	f8da 3000 	ldr.w	r3, [sl]
 8007e02:	4499      	add	r9, r3
 8007e04:	e7d3      	b.n	8007dae <__cvt+0x6a>
 8007e06:	1c59      	adds	r1, r3, #1
 8007e08:	9103      	str	r1, [sp, #12]
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e7d9      	b.n	8007dc2 <__cvt+0x7e>

08007e0e <__exponent>:
 8007e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e10:	2900      	cmp	r1, #0
 8007e12:	bfba      	itte	lt
 8007e14:	4249      	neglt	r1, r1
 8007e16:	232d      	movlt	r3, #45	@ 0x2d
 8007e18:	232b      	movge	r3, #43	@ 0x2b
 8007e1a:	2909      	cmp	r1, #9
 8007e1c:	7002      	strb	r2, [r0, #0]
 8007e1e:	7043      	strb	r3, [r0, #1]
 8007e20:	dd29      	ble.n	8007e76 <__exponent+0x68>
 8007e22:	f10d 0307 	add.w	r3, sp, #7
 8007e26:	461d      	mov	r5, r3
 8007e28:	270a      	movs	r7, #10
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e30:	fb07 1416 	mls	r4, r7, r6, r1
 8007e34:	3430      	adds	r4, #48	@ 0x30
 8007e36:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	2c63      	cmp	r4, #99	@ 0x63
 8007e3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e42:	4631      	mov	r1, r6
 8007e44:	dcf1      	bgt.n	8007e2a <__exponent+0x1c>
 8007e46:	3130      	adds	r1, #48	@ 0x30
 8007e48:	1e94      	subs	r4, r2, #2
 8007e4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e4e:	1c41      	adds	r1, r0, #1
 8007e50:	4623      	mov	r3, r4
 8007e52:	42ab      	cmp	r3, r5
 8007e54:	d30a      	bcc.n	8007e6c <__exponent+0x5e>
 8007e56:	f10d 0309 	add.w	r3, sp, #9
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	42ac      	cmp	r4, r5
 8007e5e:	bf88      	it	hi
 8007e60:	2300      	movhi	r3, #0
 8007e62:	3302      	adds	r3, #2
 8007e64:	4403      	add	r3, r0
 8007e66:	1a18      	subs	r0, r3, r0
 8007e68:	b003      	add	sp, #12
 8007e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e70:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e74:	e7ed      	b.n	8007e52 <__exponent+0x44>
 8007e76:	2330      	movs	r3, #48	@ 0x30
 8007e78:	3130      	adds	r1, #48	@ 0x30
 8007e7a:	7083      	strb	r3, [r0, #2]
 8007e7c:	70c1      	strb	r1, [r0, #3]
 8007e7e:	1d03      	adds	r3, r0, #4
 8007e80:	e7f1      	b.n	8007e66 <__exponent+0x58>
	...

08007e84 <_printf_float>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	b08d      	sub	sp, #52	@ 0x34
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e90:	4616      	mov	r6, r2
 8007e92:	461f      	mov	r7, r3
 8007e94:	4605      	mov	r5, r0
 8007e96:	f000 fccd 	bl	8008834 <_localeconv_r>
 8007e9a:	6803      	ldr	r3, [r0, #0]
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f8 f9f6 	bl	8000290 <strlen>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8007eac:	9005      	str	r0, [sp, #20]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	f103 0208 	add.w	r2, r3, #8
 8007eb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ebc:	f8d4 b000 	ldr.w	fp, [r4]
 8007ec0:	f8c8 2000 	str.w	r2, [r8]
 8007ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ec8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ecc:	9307      	str	r3, [sp, #28]
 8007ece:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ed2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eda:	4b9c      	ldr	r3, [pc, #624]	@ (800814c <_printf_float+0x2c8>)
 8007edc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee0:	f7f8 fe34 	bl	8000b4c <__aeabi_dcmpun>
 8007ee4:	bb70      	cbnz	r0, 8007f44 <_printf_float+0xc0>
 8007ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eea:	4b98      	ldr	r3, [pc, #608]	@ (800814c <_printf_float+0x2c8>)
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef0:	f7f8 fe0e 	bl	8000b10 <__aeabi_dcmple>
 8007ef4:	bb30      	cbnz	r0, 8007f44 <_printf_float+0xc0>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 fdfd 	bl	8000afc <__aeabi_dcmplt>
 8007f02:	b110      	cbz	r0, 8007f0a <_printf_float+0x86>
 8007f04:	232d      	movs	r3, #45	@ 0x2d
 8007f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f0a:	4a91      	ldr	r2, [pc, #580]	@ (8008150 <_printf_float+0x2cc>)
 8007f0c:	4b91      	ldr	r3, [pc, #580]	@ (8008154 <_printf_float+0x2d0>)
 8007f0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f12:	bf94      	ite	ls
 8007f14:	4690      	movls	r8, r2
 8007f16:	4698      	movhi	r8, r3
 8007f18:	2303      	movs	r3, #3
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	f02b 0304 	bic.w	r3, fp, #4
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	f04f 0900 	mov.w	r9, #0
 8007f26:	9700      	str	r7, [sp, #0]
 8007f28:	4633      	mov	r3, r6
 8007f2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 f9d2 	bl	80082d8 <_printf_common>
 8007f34:	3001      	adds	r0, #1
 8007f36:	f040 808d 	bne.w	8008054 <_printf_float+0x1d0>
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	b00d      	add	sp, #52	@ 0x34
 8007f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	4642      	mov	r2, r8
 8007f46:	464b      	mov	r3, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	f7f8 fdfe 	bl	8000b4c <__aeabi_dcmpun>
 8007f50:	b140      	cbz	r0, 8007f64 <_printf_float+0xe0>
 8007f52:	464b      	mov	r3, r9
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bfbc      	itt	lt
 8007f58:	232d      	movlt	r3, #45	@ 0x2d
 8007f5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008158 <_printf_float+0x2d4>)
 8007f60:	4b7e      	ldr	r3, [pc, #504]	@ (800815c <_printf_float+0x2d8>)
 8007f62:	e7d4      	b.n	8007f0e <_printf_float+0x8a>
 8007f64:	6863      	ldr	r3, [r4, #4]
 8007f66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f6a:	9206      	str	r2, [sp, #24]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	d13b      	bne.n	8007fe8 <_printf_float+0x164>
 8007f70:	2306      	movs	r3, #6
 8007f72:	6063      	str	r3, [r4, #4]
 8007f74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6022      	str	r2, [r4, #0]
 8007f7c:	9303      	str	r3, [sp, #12]
 8007f7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f84:	ab09      	add	r3, sp, #36	@ 0x24
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	6861      	ldr	r1, [r4, #4]
 8007f8a:	ec49 8b10 	vmov	d0, r8, r9
 8007f8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f92:	4628      	mov	r0, r5
 8007f94:	f7ff fed6 	bl	8007d44 <__cvt>
 8007f98:	9b06      	ldr	r3, [sp, #24]
 8007f9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f9c:	2b47      	cmp	r3, #71	@ 0x47
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	d129      	bne.n	8007ff6 <_printf_float+0x172>
 8007fa2:	1cc8      	adds	r0, r1, #3
 8007fa4:	db02      	blt.n	8007fac <_printf_float+0x128>
 8007fa6:	6863      	ldr	r3, [r4, #4]
 8007fa8:	4299      	cmp	r1, r3
 8007faa:	dd41      	ble.n	8008030 <_printf_float+0x1ac>
 8007fac:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fb0:	fa5f fa8a 	uxtb.w	sl, sl
 8007fb4:	3901      	subs	r1, #1
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fbe:	f7ff ff26 	bl	8007e0e <__exponent>
 8007fc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fc4:	1813      	adds	r3, r2, r0
 8007fc6:	2a01      	cmp	r2, #1
 8007fc8:	4681      	mov	r9, r0
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	dc02      	bgt.n	8007fd4 <_printf_float+0x150>
 8007fce:	6822      	ldr	r2, [r4, #0]
 8007fd0:	07d2      	lsls	r2, r2, #31
 8007fd2:	d501      	bpl.n	8007fd8 <_printf_float+0x154>
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	6123      	str	r3, [r4, #16]
 8007fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0a2      	beq.n	8007f26 <_printf_float+0xa2>
 8007fe0:	232d      	movs	r3, #45	@ 0x2d
 8007fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fe6:	e79e      	b.n	8007f26 <_printf_float+0xa2>
 8007fe8:	9a06      	ldr	r2, [sp, #24]
 8007fea:	2a47      	cmp	r2, #71	@ 0x47
 8007fec:	d1c2      	bne.n	8007f74 <_printf_float+0xf0>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1c0      	bne.n	8007f74 <_printf_float+0xf0>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e7bd      	b.n	8007f72 <_printf_float+0xee>
 8007ff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ffa:	d9db      	bls.n	8007fb4 <_printf_float+0x130>
 8007ffc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008000:	d118      	bne.n	8008034 <_printf_float+0x1b0>
 8008002:	2900      	cmp	r1, #0
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	dd0b      	ble.n	8008020 <_printf_float+0x19c>
 8008008:	6121      	str	r1, [r4, #16]
 800800a:	b913      	cbnz	r3, 8008012 <_printf_float+0x18e>
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	07d0      	lsls	r0, r2, #31
 8008010:	d502      	bpl.n	8008018 <_printf_float+0x194>
 8008012:	3301      	adds	r3, #1
 8008014:	440b      	add	r3, r1
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	65a1      	str	r1, [r4, #88]	@ 0x58
 800801a:	f04f 0900 	mov.w	r9, #0
 800801e:	e7db      	b.n	8007fd8 <_printf_float+0x154>
 8008020:	b913      	cbnz	r3, 8008028 <_printf_float+0x1a4>
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	07d2      	lsls	r2, r2, #31
 8008026:	d501      	bpl.n	800802c <_printf_float+0x1a8>
 8008028:	3302      	adds	r3, #2
 800802a:	e7f4      	b.n	8008016 <_printf_float+0x192>
 800802c:	2301      	movs	r3, #1
 800802e:	e7f2      	b.n	8008016 <_printf_float+0x192>
 8008030:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008036:	4299      	cmp	r1, r3
 8008038:	db05      	blt.n	8008046 <_printf_float+0x1c2>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	6121      	str	r1, [r4, #16]
 800803e:	07d8      	lsls	r0, r3, #31
 8008040:	d5ea      	bpl.n	8008018 <_printf_float+0x194>
 8008042:	1c4b      	adds	r3, r1, #1
 8008044:	e7e7      	b.n	8008016 <_printf_float+0x192>
 8008046:	2900      	cmp	r1, #0
 8008048:	bfd4      	ite	le
 800804a:	f1c1 0202 	rsble	r2, r1, #2
 800804e:	2201      	movgt	r2, #1
 8008050:	4413      	add	r3, r2
 8008052:	e7e0      	b.n	8008016 <_printf_float+0x192>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	055a      	lsls	r2, r3, #21
 8008058:	d407      	bmi.n	800806a <_printf_float+0x1e6>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	4642      	mov	r2, r8
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	47b8      	blx	r7
 8008064:	3001      	adds	r0, #1
 8008066:	d12b      	bne.n	80080c0 <_printf_float+0x23c>
 8008068:	e767      	b.n	8007f3a <_printf_float+0xb6>
 800806a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800806e:	f240 80dd 	bls.w	800822c <_printf_float+0x3a8>
 8008072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008076:	2200      	movs	r2, #0
 8008078:	2300      	movs	r3, #0
 800807a:	f7f8 fd35 	bl	8000ae8 <__aeabi_dcmpeq>
 800807e:	2800      	cmp	r0, #0
 8008080:	d033      	beq.n	80080ea <_printf_float+0x266>
 8008082:	4a37      	ldr	r2, [pc, #220]	@ (8008160 <_printf_float+0x2dc>)
 8008084:	2301      	movs	r3, #1
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	f43f af54 	beq.w	8007f3a <_printf_float+0xb6>
 8008092:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008096:	4543      	cmp	r3, r8
 8008098:	db02      	blt.n	80080a0 <_printf_float+0x21c>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	07d8      	lsls	r0, r3, #31
 800809e:	d50f      	bpl.n	80080c0 <_printf_float+0x23c>
 80080a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af45 	beq.w	8007f3a <_printf_float+0xb6>
 80080b0:	f04f 0900 	mov.w	r9, #0
 80080b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80080b8:	f104 0a1a 	add.w	sl, r4, #26
 80080bc:	45c8      	cmp	r8, r9
 80080be:	dc09      	bgt.n	80080d4 <_printf_float+0x250>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	079b      	lsls	r3, r3, #30
 80080c4:	f100 8103 	bmi.w	80082ce <_printf_float+0x44a>
 80080c8:	68e0      	ldr	r0, [r4, #12]
 80080ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080cc:	4298      	cmp	r0, r3
 80080ce:	bfb8      	it	lt
 80080d0:	4618      	movlt	r0, r3
 80080d2:	e734      	b.n	8007f3e <_printf_float+0xba>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4652      	mov	r2, sl
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f af2b 	beq.w	8007f3a <_printf_float+0xb6>
 80080e4:	f109 0901 	add.w	r9, r9, #1
 80080e8:	e7e8      	b.n	80080bc <_printf_float+0x238>
 80080ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dc39      	bgt.n	8008164 <_printf_float+0x2e0>
 80080f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008160 <_printf_float+0x2dc>)
 80080f2:	2301      	movs	r3, #1
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f af1d 	beq.w	8007f3a <_printf_float+0xb6>
 8008100:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008104:	ea59 0303 	orrs.w	r3, r9, r3
 8008108:	d102      	bne.n	8008110 <_printf_float+0x28c>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	07d9      	lsls	r1, r3, #31
 800810e:	d5d7      	bpl.n	80080c0 <_printf_float+0x23c>
 8008110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af0d 	beq.w	8007f3a <_printf_float+0xb6>
 8008120:	f04f 0a00 	mov.w	sl, #0
 8008124:	f104 0b1a 	add.w	fp, r4, #26
 8008128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812a:	425b      	negs	r3, r3
 800812c:	4553      	cmp	r3, sl
 800812e:	dc01      	bgt.n	8008134 <_printf_float+0x2b0>
 8008130:	464b      	mov	r3, r9
 8008132:	e793      	b.n	800805c <_printf_float+0x1d8>
 8008134:	2301      	movs	r3, #1
 8008136:	465a      	mov	r2, fp
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f aefb 	beq.w	8007f3a <_printf_float+0xb6>
 8008144:	f10a 0a01 	add.w	sl, sl, #1
 8008148:	e7ee      	b.n	8008128 <_printf_float+0x2a4>
 800814a:	bf00      	nop
 800814c:	7fefffff 	.word	0x7fefffff
 8008150:	0800b1ec 	.word	0x0800b1ec
 8008154:	0800b1f0 	.word	0x0800b1f0
 8008158:	0800b1f4 	.word	0x0800b1f4
 800815c:	0800b1f8 	.word	0x0800b1f8
 8008160:	0800b1fc 	.word	0x0800b1fc
 8008164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800816a:	4553      	cmp	r3, sl
 800816c:	bfa8      	it	ge
 800816e:	4653      	movge	r3, sl
 8008170:	2b00      	cmp	r3, #0
 8008172:	4699      	mov	r9, r3
 8008174:	dc36      	bgt.n	80081e4 <_printf_float+0x360>
 8008176:	f04f 0b00 	mov.w	fp, #0
 800817a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800817e:	f104 021a 	add.w	r2, r4, #26
 8008182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008184:	9306      	str	r3, [sp, #24]
 8008186:	eba3 0309 	sub.w	r3, r3, r9
 800818a:	455b      	cmp	r3, fp
 800818c:	dc31      	bgt.n	80081f2 <_printf_float+0x36e>
 800818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008190:	459a      	cmp	sl, r3
 8008192:	dc3a      	bgt.n	800820a <_printf_float+0x386>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	07da      	lsls	r2, r3, #31
 8008198:	d437      	bmi.n	800820a <_printf_float+0x386>
 800819a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819c:	ebaa 0903 	sub.w	r9, sl, r3
 80081a0:	9b06      	ldr	r3, [sp, #24]
 80081a2:	ebaa 0303 	sub.w	r3, sl, r3
 80081a6:	4599      	cmp	r9, r3
 80081a8:	bfa8      	it	ge
 80081aa:	4699      	movge	r9, r3
 80081ac:	f1b9 0f00 	cmp.w	r9, #0
 80081b0:	dc33      	bgt.n	800821a <_printf_float+0x396>
 80081b2:	f04f 0800 	mov.w	r8, #0
 80081b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ba:	f104 0b1a 	add.w	fp, r4, #26
 80081be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c0:	ebaa 0303 	sub.w	r3, sl, r3
 80081c4:	eba3 0309 	sub.w	r3, r3, r9
 80081c8:	4543      	cmp	r3, r8
 80081ca:	f77f af79 	ble.w	80080c0 <_printf_float+0x23c>
 80081ce:	2301      	movs	r3, #1
 80081d0:	465a      	mov	r2, fp
 80081d2:	4631      	mov	r1, r6
 80081d4:	4628      	mov	r0, r5
 80081d6:	47b8      	blx	r7
 80081d8:	3001      	adds	r0, #1
 80081da:	f43f aeae 	beq.w	8007f3a <_printf_float+0xb6>
 80081de:	f108 0801 	add.w	r8, r8, #1
 80081e2:	e7ec      	b.n	80081be <_printf_float+0x33a>
 80081e4:	4642      	mov	r2, r8
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	d1c2      	bne.n	8008176 <_printf_float+0x2f2>
 80081f0:	e6a3      	b.n	8007f3a <_printf_float+0xb6>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	9206      	str	r2, [sp, #24]
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	f43f ae9c 	beq.w	8007f3a <_printf_float+0xb6>
 8008202:	9a06      	ldr	r2, [sp, #24]
 8008204:	f10b 0b01 	add.w	fp, fp, #1
 8008208:	e7bb      	b.n	8008182 <_printf_float+0x2fe>
 800820a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	d1c0      	bne.n	800819a <_printf_float+0x316>
 8008218:	e68f      	b.n	8007f3a <_printf_float+0xb6>
 800821a:	9a06      	ldr	r2, [sp, #24]
 800821c:	464b      	mov	r3, r9
 800821e:	4442      	add	r2, r8
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	d1c3      	bne.n	80081b2 <_printf_float+0x32e>
 800822a:	e686      	b.n	8007f3a <_printf_float+0xb6>
 800822c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008230:	f1ba 0f01 	cmp.w	sl, #1
 8008234:	dc01      	bgt.n	800823a <_printf_float+0x3b6>
 8008236:	07db      	lsls	r3, r3, #31
 8008238:	d536      	bpl.n	80082a8 <_printf_float+0x424>
 800823a:	2301      	movs	r3, #1
 800823c:	4642      	mov	r2, r8
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	f43f ae78 	beq.w	8007f3a <_printf_float+0xb6>
 800824a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae70 	beq.w	8007f3a <_printf_float+0xb6>
 800825a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800825e:	2200      	movs	r2, #0
 8008260:	2300      	movs	r3, #0
 8008262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008266:	f7f8 fc3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800826a:	b9c0      	cbnz	r0, 800829e <_printf_float+0x41a>
 800826c:	4653      	mov	r3, sl
 800826e:	f108 0201 	add.w	r2, r8, #1
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	d10c      	bne.n	8008296 <_printf_float+0x412>
 800827c:	e65d      	b.n	8007f3a <_printf_float+0xb6>
 800827e:	2301      	movs	r3, #1
 8008280:	465a      	mov	r2, fp
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae56 	beq.w	8007f3a <_printf_float+0xb6>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	45d0      	cmp	r8, sl
 8008294:	dbf3      	blt.n	800827e <_printf_float+0x3fa>
 8008296:	464b      	mov	r3, r9
 8008298:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800829c:	e6df      	b.n	800805e <_printf_float+0x1da>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f104 0b1a 	add.w	fp, r4, #26
 80082a6:	e7f4      	b.n	8008292 <_printf_float+0x40e>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4642      	mov	r2, r8
 80082ac:	e7e1      	b.n	8008272 <_printf_float+0x3ee>
 80082ae:	2301      	movs	r3, #1
 80082b0:	464a      	mov	r2, r9
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	f43f ae3e 	beq.w	8007f3a <_printf_float+0xb6>
 80082be:	f108 0801 	add.w	r8, r8, #1
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082c6:	1a5b      	subs	r3, r3, r1
 80082c8:	4543      	cmp	r3, r8
 80082ca:	dcf0      	bgt.n	80082ae <_printf_float+0x42a>
 80082cc:	e6fc      	b.n	80080c8 <_printf_float+0x244>
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	f104 0919 	add.w	r9, r4, #25
 80082d6:	e7f4      	b.n	80082c2 <_printf_float+0x43e>

080082d8 <_printf_common>:
 80082d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	4616      	mov	r6, r2
 80082de:	4698      	mov	r8, r3
 80082e0:	688a      	ldr	r2, [r1, #8]
 80082e2:	690b      	ldr	r3, [r1, #16]
 80082e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	bfb8      	it	lt
 80082ec:	4613      	movlt	r3, r2
 80082ee:	6033      	str	r3, [r6, #0]
 80082f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082f4:	4607      	mov	r7, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	b10a      	cbz	r2, 80082fe <_printf_common+0x26>
 80082fa:	3301      	adds	r3, #1
 80082fc:	6033      	str	r3, [r6, #0]
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	0699      	lsls	r1, r3, #26
 8008302:	bf42      	ittt	mi
 8008304:	6833      	ldrmi	r3, [r6, #0]
 8008306:	3302      	addmi	r3, #2
 8008308:	6033      	strmi	r3, [r6, #0]
 800830a:	6825      	ldr	r5, [r4, #0]
 800830c:	f015 0506 	ands.w	r5, r5, #6
 8008310:	d106      	bne.n	8008320 <_printf_common+0x48>
 8008312:	f104 0a19 	add.w	sl, r4, #25
 8008316:	68e3      	ldr	r3, [r4, #12]
 8008318:	6832      	ldr	r2, [r6, #0]
 800831a:	1a9b      	subs	r3, r3, r2
 800831c:	42ab      	cmp	r3, r5
 800831e:	dc26      	bgt.n	800836e <_printf_common+0x96>
 8008320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008324:	6822      	ldr	r2, [r4, #0]
 8008326:	3b00      	subs	r3, #0
 8008328:	bf18      	it	ne
 800832a:	2301      	movne	r3, #1
 800832c:	0692      	lsls	r2, r2, #26
 800832e:	d42b      	bmi.n	8008388 <_printf_common+0xb0>
 8008330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008334:	4641      	mov	r1, r8
 8008336:	4638      	mov	r0, r7
 8008338:	47c8      	blx	r9
 800833a:	3001      	adds	r0, #1
 800833c:	d01e      	beq.n	800837c <_printf_common+0xa4>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	f003 0306 	and.w	r3, r3, #6
 8008346:	2b04      	cmp	r3, #4
 8008348:	bf02      	ittt	eq
 800834a:	68e5      	ldreq	r5, [r4, #12]
 800834c:	6833      	ldreq	r3, [r6, #0]
 800834e:	1aed      	subeq	r5, r5, r3
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	bf0c      	ite	eq
 8008354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008358:	2500      	movne	r5, #0
 800835a:	4293      	cmp	r3, r2
 800835c:	bfc4      	itt	gt
 800835e:	1a9b      	subgt	r3, r3, r2
 8008360:	18ed      	addgt	r5, r5, r3
 8008362:	2600      	movs	r6, #0
 8008364:	341a      	adds	r4, #26
 8008366:	42b5      	cmp	r5, r6
 8008368:	d11a      	bne.n	80083a0 <_printf_common+0xc8>
 800836a:	2000      	movs	r0, #0
 800836c:	e008      	b.n	8008380 <_printf_common+0xa8>
 800836e:	2301      	movs	r3, #1
 8008370:	4652      	mov	r2, sl
 8008372:	4641      	mov	r1, r8
 8008374:	4638      	mov	r0, r7
 8008376:	47c8      	blx	r9
 8008378:	3001      	adds	r0, #1
 800837a:	d103      	bne.n	8008384 <_printf_common+0xac>
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008384:	3501      	adds	r5, #1
 8008386:	e7c6      	b.n	8008316 <_printf_common+0x3e>
 8008388:	18e1      	adds	r1, r4, r3
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	2030      	movs	r0, #48	@ 0x30
 800838e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008392:	4422      	add	r2, r4
 8008394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800839c:	3302      	adds	r3, #2
 800839e:	e7c7      	b.n	8008330 <_printf_common+0x58>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4622      	mov	r2, r4
 80083a4:	4641      	mov	r1, r8
 80083a6:	4638      	mov	r0, r7
 80083a8:	47c8      	blx	r9
 80083aa:	3001      	adds	r0, #1
 80083ac:	d0e6      	beq.n	800837c <_printf_common+0xa4>
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7d9      	b.n	8008366 <_printf_common+0x8e>
	...

080083b4 <_printf_i>:
 80083b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b8:	7e0f      	ldrb	r7, [r1, #24]
 80083ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083bc:	2f78      	cmp	r7, #120	@ 0x78
 80083be:	4691      	mov	r9, r2
 80083c0:	4680      	mov	r8, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	469a      	mov	sl, r3
 80083c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083ca:	d807      	bhi.n	80083dc <_printf_i+0x28>
 80083cc:	2f62      	cmp	r7, #98	@ 0x62
 80083ce:	d80a      	bhi.n	80083e6 <_printf_i+0x32>
 80083d0:	2f00      	cmp	r7, #0
 80083d2:	f000 80d2 	beq.w	800857a <_printf_i+0x1c6>
 80083d6:	2f58      	cmp	r7, #88	@ 0x58
 80083d8:	f000 80b9 	beq.w	800854e <_printf_i+0x19a>
 80083dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083e4:	e03a      	b.n	800845c <_printf_i+0xa8>
 80083e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ea:	2b15      	cmp	r3, #21
 80083ec:	d8f6      	bhi.n	80083dc <_printf_i+0x28>
 80083ee:	a101      	add	r1, pc, #4	@ (adr r1, 80083f4 <_printf_i+0x40>)
 80083f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f4:	0800844d 	.word	0x0800844d
 80083f8:	08008461 	.word	0x08008461
 80083fc:	080083dd 	.word	0x080083dd
 8008400:	080083dd 	.word	0x080083dd
 8008404:	080083dd 	.word	0x080083dd
 8008408:	080083dd 	.word	0x080083dd
 800840c:	08008461 	.word	0x08008461
 8008410:	080083dd 	.word	0x080083dd
 8008414:	080083dd 	.word	0x080083dd
 8008418:	080083dd 	.word	0x080083dd
 800841c:	080083dd 	.word	0x080083dd
 8008420:	08008561 	.word	0x08008561
 8008424:	0800848b 	.word	0x0800848b
 8008428:	0800851b 	.word	0x0800851b
 800842c:	080083dd 	.word	0x080083dd
 8008430:	080083dd 	.word	0x080083dd
 8008434:	08008583 	.word	0x08008583
 8008438:	080083dd 	.word	0x080083dd
 800843c:	0800848b 	.word	0x0800848b
 8008440:	080083dd 	.word	0x080083dd
 8008444:	080083dd 	.word	0x080083dd
 8008448:	08008523 	.word	0x08008523
 800844c:	6833      	ldr	r3, [r6, #0]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6032      	str	r2, [r6, #0]
 8008454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800845c:	2301      	movs	r3, #1
 800845e:	e09d      	b.n	800859c <_printf_i+0x1e8>
 8008460:	6833      	ldr	r3, [r6, #0]
 8008462:	6820      	ldr	r0, [r4, #0]
 8008464:	1d19      	adds	r1, r3, #4
 8008466:	6031      	str	r1, [r6, #0]
 8008468:	0606      	lsls	r6, r0, #24
 800846a:	d501      	bpl.n	8008470 <_printf_i+0xbc>
 800846c:	681d      	ldr	r5, [r3, #0]
 800846e:	e003      	b.n	8008478 <_printf_i+0xc4>
 8008470:	0645      	lsls	r5, r0, #25
 8008472:	d5fb      	bpl.n	800846c <_printf_i+0xb8>
 8008474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008478:	2d00      	cmp	r5, #0
 800847a:	da03      	bge.n	8008484 <_printf_i+0xd0>
 800847c:	232d      	movs	r3, #45	@ 0x2d
 800847e:	426d      	negs	r5, r5
 8008480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008484:	4859      	ldr	r0, [pc, #356]	@ (80085ec <_printf_i+0x238>)
 8008486:	230a      	movs	r3, #10
 8008488:	e011      	b.n	80084ae <_printf_i+0xfa>
 800848a:	6821      	ldr	r1, [r4, #0]
 800848c:	6833      	ldr	r3, [r6, #0]
 800848e:	0608      	lsls	r0, r1, #24
 8008490:	f853 5b04 	ldr.w	r5, [r3], #4
 8008494:	d402      	bmi.n	800849c <_printf_i+0xe8>
 8008496:	0649      	lsls	r1, r1, #25
 8008498:	bf48      	it	mi
 800849a:	b2ad      	uxthmi	r5, r5
 800849c:	2f6f      	cmp	r7, #111	@ 0x6f
 800849e:	4853      	ldr	r0, [pc, #332]	@ (80085ec <_printf_i+0x238>)
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	bf14      	ite	ne
 80084a4:	230a      	movne	r3, #10
 80084a6:	2308      	moveq	r3, #8
 80084a8:	2100      	movs	r1, #0
 80084aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084ae:	6866      	ldr	r6, [r4, #4]
 80084b0:	60a6      	str	r6, [r4, #8]
 80084b2:	2e00      	cmp	r6, #0
 80084b4:	bfa2      	ittt	ge
 80084b6:	6821      	ldrge	r1, [r4, #0]
 80084b8:	f021 0104 	bicge.w	r1, r1, #4
 80084bc:	6021      	strge	r1, [r4, #0]
 80084be:	b90d      	cbnz	r5, 80084c4 <_printf_i+0x110>
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	d04b      	beq.n	800855c <_printf_i+0x1a8>
 80084c4:	4616      	mov	r6, r2
 80084c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80084ca:	fb03 5711 	mls	r7, r3, r1, r5
 80084ce:	5dc7      	ldrb	r7, [r0, r7]
 80084d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d4:	462f      	mov	r7, r5
 80084d6:	42bb      	cmp	r3, r7
 80084d8:	460d      	mov	r5, r1
 80084da:	d9f4      	bls.n	80084c6 <_printf_i+0x112>
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d10b      	bne.n	80084f8 <_printf_i+0x144>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	07df      	lsls	r7, r3, #31
 80084e4:	d508      	bpl.n	80084f8 <_printf_i+0x144>
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	6861      	ldr	r1, [r4, #4]
 80084ea:	4299      	cmp	r1, r3
 80084ec:	bfde      	ittt	le
 80084ee:	2330      	movle	r3, #48	@ 0x30
 80084f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084f8:	1b92      	subs	r2, r2, r6
 80084fa:	6122      	str	r2, [r4, #16]
 80084fc:	f8cd a000 	str.w	sl, [sp]
 8008500:	464b      	mov	r3, r9
 8008502:	aa03      	add	r2, sp, #12
 8008504:	4621      	mov	r1, r4
 8008506:	4640      	mov	r0, r8
 8008508:	f7ff fee6 	bl	80082d8 <_printf_common>
 800850c:	3001      	adds	r0, #1
 800850e:	d14a      	bne.n	80085a6 <_printf_i+0x1f2>
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	b004      	add	sp, #16
 8008516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f043 0320 	orr.w	r3, r3, #32
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	4833      	ldr	r0, [pc, #204]	@ (80085f0 <_printf_i+0x23c>)
 8008524:	2778      	movs	r7, #120	@ 0x78
 8008526:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	6831      	ldr	r1, [r6, #0]
 800852e:	061f      	lsls	r7, r3, #24
 8008530:	f851 5b04 	ldr.w	r5, [r1], #4
 8008534:	d402      	bmi.n	800853c <_printf_i+0x188>
 8008536:	065f      	lsls	r7, r3, #25
 8008538:	bf48      	it	mi
 800853a:	b2ad      	uxthmi	r5, r5
 800853c:	6031      	str	r1, [r6, #0]
 800853e:	07d9      	lsls	r1, r3, #31
 8008540:	bf44      	itt	mi
 8008542:	f043 0320 	orrmi.w	r3, r3, #32
 8008546:	6023      	strmi	r3, [r4, #0]
 8008548:	b11d      	cbz	r5, 8008552 <_printf_i+0x19e>
 800854a:	2310      	movs	r3, #16
 800854c:	e7ac      	b.n	80084a8 <_printf_i+0xf4>
 800854e:	4827      	ldr	r0, [pc, #156]	@ (80085ec <_printf_i+0x238>)
 8008550:	e7e9      	b.n	8008526 <_printf_i+0x172>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	f023 0320 	bic.w	r3, r3, #32
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	e7f6      	b.n	800854a <_printf_i+0x196>
 800855c:	4616      	mov	r6, r2
 800855e:	e7bd      	b.n	80084dc <_printf_i+0x128>
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	6961      	ldr	r1, [r4, #20]
 8008566:	1d18      	adds	r0, r3, #4
 8008568:	6030      	str	r0, [r6, #0]
 800856a:	062e      	lsls	r6, r5, #24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	d501      	bpl.n	8008574 <_printf_i+0x1c0>
 8008570:	6019      	str	r1, [r3, #0]
 8008572:	e002      	b.n	800857a <_printf_i+0x1c6>
 8008574:	0668      	lsls	r0, r5, #25
 8008576:	d5fb      	bpl.n	8008570 <_printf_i+0x1bc>
 8008578:	8019      	strh	r1, [r3, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	4616      	mov	r6, r2
 8008580:	e7bc      	b.n	80084fc <_printf_i+0x148>
 8008582:	6833      	ldr	r3, [r6, #0]
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	6032      	str	r2, [r6, #0]
 8008588:	681e      	ldr	r6, [r3, #0]
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	2100      	movs	r1, #0
 800858e:	4630      	mov	r0, r6
 8008590:	f7f7 fe2e 	bl	80001f0 <memchr>
 8008594:	b108      	cbz	r0, 800859a <_printf_i+0x1e6>
 8008596:	1b80      	subs	r0, r0, r6
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	2300      	movs	r3, #0
 80085a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085a4:	e7aa      	b.n	80084fc <_printf_i+0x148>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	4632      	mov	r2, r6
 80085aa:	4649      	mov	r1, r9
 80085ac:	4640      	mov	r0, r8
 80085ae:	47d0      	blx	sl
 80085b0:	3001      	adds	r0, #1
 80085b2:	d0ad      	beq.n	8008510 <_printf_i+0x15c>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	079b      	lsls	r3, r3, #30
 80085b8:	d413      	bmi.n	80085e2 <_printf_i+0x22e>
 80085ba:	68e0      	ldr	r0, [r4, #12]
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	4298      	cmp	r0, r3
 80085c0:	bfb8      	it	lt
 80085c2:	4618      	movlt	r0, r3
 80085c4:	e7a6      	b.n	8008514 <_printf_i+0x160>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4632      	mov	r2, r6
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	47d0      	blx	sl
 80085d0:	3001      	adds	r0, #1
 80085d2:	d09d      	beq.n	8008510 <_printf_i+0x15c>
 80085d4:	3501      	adds	r5, #1
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	9903      	ldr	r1, [sp, #12]
 80085da:	1a5b      	subs	r3, r3, r1
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dcf2      	bgt.n	80085c6 <_printf_i+0x212>
 80085e0:	e7eb      	b.n	80085ba <_printf_i+0x206>
 80085e2:	2500      	movs	r5, #0
 80085e4:	f104 0619 	add.w	r6, r4, #25
 80085e8:	e7f5      	b.n	80085d6 <_printf_i+0x222>
 80085ea:	bf00      	nop
 80085ec:	0800b1fe 	.word	0x0800b1fe
 80085f0:	0800b20f 	.word	0x0800b20f

080085f4 <std>:
 80085f4:	2300      	movs	r3, #0
 80085f6:	b510      	push	{r4, lr}
 80085f8:	4604      	mov	r4, r0
 80085fa:	e9c0 3300 	strd	r3, r3, [r0]
 80085fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008602:	6083      	str	r3, [r0, #8]
 8008604:	8181      	strh	r1, [r0, #12]
 8008606:	6643      	str	r3, [r0, #100]	@ 0x64
 8008608:	81c2      	strh	r2, [r0, #14]
 800860a:	6183      	str	r3, [r0, #24]
 800860c:	4619      	mov	r1, r3
 800860e:	2208      	movs	r2, #8
 8008610:	305c      	adds	r0, #92	@ 0x5c
 8008612:	f000 f906 	bl	8008822 <memset>
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <std+0x58>)
 8008618:	6263      	str	r3, [r4, #36]	@ 0x24
 800861a:	4b0d      	ldr	r3, [pc, #52]	@ (8008650 <std+0x5c>)
 800861c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800861e:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <std+0x60>)
 8008620:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008622:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <std+0x64>)
 8008624:	6323      	str	r3, [r4, #48]	@ 0x30
 8008626:	4b0d      	ldr	r3, [pc, #52]	@ (800865c <std+0x68>)
 8008628:	6224      	str	r4, [r4, #32]
 800862a:	429c      	cmp	r4, r3
 800862c:	d006      	beq.n	800863c <std+0x48>
 800862e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008632:	4294      	cmp	r4, r2
 8008634:	d002      	beq.n	800863c <std+0x48>
 8008636:	33d0      	adds	r3, #208	@ 0xd0
 8008638:	429c      	cmp	r4, r3
 800863a:	d105      	bne.n	8008648 <std+0x54>
 800863c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008644:	f000 b96a 	b.w	800891c <__retarget_lock_init_recursive>
 8008648:	bd10      	pop	{r4, pc}
 800864a:	bf00      	nop
 800864c:	0800879d 	.word	0x0800879d
 8008650:	080087bf 	.word	0x080087bf
 8008654:	080087f7 	.word	0x080087f7
 8008658:	0800881b 	.word	0x0800881b
 800865c:	20000d28 	.word	0x20000d28

08008660 <stdio_exit_handler>:
 8008660:	4a02      	ldr	r2, [pc, #8]	@ (800866c <stdio_exit_handler+0xc>)
 8008662:	4903      	ldr	r1, [pc, #12]	@ (8008670 <stdio_exit_handler+0x10>)
 8008664:	4803      	ldr	r0, [pc, #12]	@ (8008674 <stdio_exit_handler+0x14>)
 8008666:	f000 b869 	b.w	800873c <_fwalk_sglue>
 800866a:	bf00      	nop
 800866c:	2000011c 	.word	0x2000011c
 8008670:	0800a251 	.word	0x0800a251
 8008674:	2000012c 	.word	0x2000012c

08008678 <cleanup_stdio>:
 8008678:	6841      	ldr	r1, [r0, #4]
 800867a:	4b0c      	ldr	r3, [pc, #48]	@ (80086ac <cleanup_stdio+0x34>)
 800867c:	4299      	cmp	r1, r3
 800867e:	b510      	push	{r4, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	d001      	beq.n	8008688 <cleanup_stdio+0x10>
 8008684:	f001 fde4 	bl	800a250 <_fflush_r>
 8008688:	68a1      	ldr	r1, [r4, #8]
 800868a:	4b09      	ldr	r3, [pc, #36]	@ (80086b0 <cleanup_stdio+0x38>)
 800868c:	4299      	cmp	r1, r3
 800868e:	d002      	beq.n	8008696 <cleanup_stdio+0x1e>
 8008690:	4620      	mov	r0, r4
 8008692:	f001 fddd 	bl	800a250 <_fflush_r>
 8008696:	68e1      	ldr	r1, [r4, #12]
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <cleanup_stdio+0x3c>)
 800869a:	4299      	cmp	r1, r3
 800869c:	d004      	beq.n	80086a8 <cleanup_stdio+0x30>
 800869e:	4620      	mov	r0, r4
 80086a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a4:	f001 bdd4 	b.w	800a250 <_fflush_r>
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	bf00      	nop
 80086ac:	20000d28 	.word	0x20000d28
 80086b0:	20000d90 	.word	0x20000d90
 80086b4:	20000df8 	.word	0x20000df8

080086b8 <global_stdio_init.part.0>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <global_stdio_init.part.0+0x30>)
 80086bc:	4c0b      	ldr	r4, [pc, #44]	@ (80086ec <global_stdio_init.part.0+0x34>)
 80086be:	4a0c      	ldr	r2, [pc, #48]	@ (80086f0 <global_stdio_init.part.0+0x38>)
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	4620      	mov	r0, r4
 80086c4:	2200      	movs	r2, #0
 80086c6:	2104      	movs	r1, #4
 80086c8:	f7ff ff94 	bl	80085f4 <std>
 80086cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086d0:	2201      	movs	r2, #1
 80086d2:	2109      	movs	r1, #9
 80086d4:	f7ff ff8e 	bl	80085f4 <std>
 80086d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086dc:	2202      	movs	r2, #2
 80086de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e2:	2112      	movs	r1, #18
 80086e4:	f7ff bf86 	b.w	80085f4 <std>
 80086e8:	20000e60 	.word	0x20000e60
 80086ec:	20000d28 	.word	0x20000d28
 80086f0:	08008661 	.word	0x08008661

080086f4 <__sfp_lock_acquire>:
 80086f4:	4801      	ldr	r0, [pc, #4]	@ (80086fc <__sfp_lock_acquire+0x8>)
 80086f6:	f000 b912 	b.w	800891e <__retarget_lock_acquire_recursive>
 80086fa:	bf00      	nop
 80086fc:	20000e69 	.word	0x20000e69

08008700 <__sfp_lock_release>:
 8008700:	4801      	ldr	r0, [pc, #4]	@ (8008708 <__sfp_lock_release+0x8>)
 8008702:	f000 b90d 	b.w	8008920 <__retarget_lock_release_recursive>
 8008706:	bf00      	nop
 8008708:	20000e69 	.word	0x20000e69

0800870c <__sinit>:
 800870c:	b510      	push	{r4, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	f7ff fff0 	bl	80086f4 <__sfp_lock_acquire>
 8008714:	6a23      	ldr	r3, [r4, #32]
 8008716:	b11b      	cbz	r3, 8008720 <__sinit+0x14>
 8008718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871c:	f7ff bff0 	b.w	8008700 <__sfp_lock_release>
 8008720:	4b04      	ldr	r3, [pc, #16]	@ (8008734 <__sinit+0x28>)
 8008722:	6223      	str	r3, [r4, #32]
 8008724:	4b04      	ldr	r3, [pc, #16]	@ (8008738 <__sinit+0x2c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f5      	bne.n	8008718 <__sinit+0xc>
 800872c:	f7ff ffc4 	bl	80086b8 <global_stdio_init.part.0>
 8008730:	e7f2      	b.n	8008718 <__sinit+0xc>
 8008732:	bf00      	nop
 8008734:	08008679 	.word	0x08008679
 8008738:	20000e60 	.word	0x20000e60

0800873c <_fwalk_sglue>:
 800873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008740:	4607      	mov	r7, r0
 8008742:	4688      	mov	r8, r1
 8008744:	4614      	mov	r4, r2
 8008746:	2600      	movs	r6, #0
 8008748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874c:	f1b9 0901 	subs.w	r9, r9, #1
 8008750:	d505      	bpl.n	800875e <_fwalk_sglue+0x22>
 8008752:	6824      	ldr	r4, [r4, #0]
 8008754:	2c00      	cmp	r4, #0
 8008756:	d1f7      	bne.n	8008748 <_fwalk_sglue+0xc>
 8008758:	4630      	mov	r0, r6
 800875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d907      	bls.n	8008774 <_fwalk_sglue+0x38>
 8008764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008768:	3301      	adds	r3, #1
 800876a:	d003      	beq.n	8008774 <_fwalk_sglue+0x38>
 800876c:	4629      	mov	r1, r5
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	4306      	orrs	r6, r0
 8008774:	3568      	adds	r5, #104	@ 0x68
 8008776:	e7e9      	b.n	800874c <_fwalk_sglue+0x10>

08008778 <iprintf>:
 8008778:	b40f      	push	{r0, r1, r2, r3}
 800877a:	b507      	push	{r0, r1, r2, lr}
 800877c:	4906      	ldr	r1, [pc, #24]	@ (8008798 <iprintf+0x20>)
 800877e:	ab04      	add	r3, sp, #16
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	f853 2b04 	ldr.w	r2, [r3], #4
 8008786:	6881      	ldr	r1, [r0, #8]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f001 fbc5 	bl	8009f18 <_vfiprintf_r>
 800878e:	b003      	add	sp, #12
 8008790:	f85d eb04 	ldr.w	lr, [sp], #4
 8008794:	b004      	add	sp, #16
 8008796:	4770      	bx	lr
 8008798:	20000128 	.word	0x20000128

0800879c <__sread>:
 800879c:	b510      	push	{r4, lr}
 800879e:	460c      	mov	r4, r1
 80087a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a4:	f000 f86c 	bl	8008880 <_read_r>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	bfab      	itete	ge
 80087ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087ae:	89a3      	ldrhlt	r3, [r4, #12]
 80087b0:	181b      	addge	r3, r3, r0
 80087b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087b6:	bfac      	ite	ge
 80087b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087ba:	81a3      	strhlt	r3, [r4, #12]
 80087bc:	bd10      	pop	{r4, pc}

080087be <__swrite>:
 80087be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c2:	461f      	mov	r7, r3
 80087c4:	898b      	ldrh	r3, [r1, #12]
 80087c6:	05db      	lsls	r3, r3, #23
 80087c8:	4605      	mov	r5, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4616      	mov	r6, r2
 80087ce:	d505      	bpl.n	80087dc <__swrite+0x1e>
 80087d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d4:	2302      	movs	r3, #2
 80087d6:	2200      	movs	r2, #0
 80087d8:	f000 f840 	bl	800885c <_lseek_r>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f2:	f000 b857 	b.w	80088a4 <_write_r>

080087f6 <__sseek>:
 80087f6:	b510      	push	{r4, lr}
 80087f8:	460c      	mov	r4, r1
 80087fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fe:	f000 f82d 	bl	800885c <_lseek_r>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	bf15      	itete	ne
 8008808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800880a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800880e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008812:	81a3      	strheq	r3, [r4, #12]
 8008814:	bf18      	it	ne
 8008816:	81a3      	strhne	r3, [r4, #12]
 8008818:	bd10      	pop	{r4, pc}

0800881a <__sclose>:
 800881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881e:	f000 b80d 	b.w	800883c <_close_r>

08008822 <memset>:
 8008822:	4402      	add	r2, r0
 8008824:	4603      	mov	r3, r0
 8008826:	4293      	cmp	r3, r2
 8008828:	d100      	bne.n	800882c <memset+0xa>
 800882a:	4770      	bx	lr
 800882c:	f803 1b01 	strb.w	r1, [r3], #1
 8008830:	e7f9      	b.n	8008826 <memset+0x4>
	...

08008834 <_localeconv_r>:
 8008834:	4800      	ldr	r0, [pc, #0]	@ (8008838 <_localeconv_r+0x4>)
 8008836:	4770      	bx	lr
 8008838:	20000268 	.word	0x20000268

0800883c <_close_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d06      	ldr	r5, [pc, #24]	@ (8008858 <_close_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f8 fff0 	bl	800182c <_close>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_close_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_close_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000e64 	.word	0x20000e64

0800885c <_lseek_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d07      	ldr	r5, [pc, #28]	@ (800887c <_lseek_r+0x20>)
 8008860:	4604      	mov	r4, r0
 8008862:	4608      	mov	r0, r1
 8008864:	4611      	mov	r1, r2
 8008866:	2200      	movs	r2, #0
 8008868:	602a      	str	r2, [r5, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f7f9 f805 	bl	800187a <_lseek>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_lseek_r+0x1e>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_lseek_r+0x1e>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20000e64 	.word	0x20000e64

08008880 <_read_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4d07      	ldr	r5, [pc, #28]	@ (80088a0 <_read_r+0x20>)
 8008884:	4604      	mov	r4, r0
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	2200      	movs	r2, #0
 800888c:	602a      	str	r2, [r5, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7f8 ff93 	bl	80017ba <_read>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_read_r+0x1e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_read_r+0x1e>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20000e64 	.word	0x20000e64

080088a4 <_write_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d07      	ldr	r5, [pc, #28]	@ (80088c4 <_write_r+0x20>)
 80088a8:	4604      	mov	r4, r0
 80088aa:	4608      	mov	r0, r1
 80088ac:	4611      	mov	r1, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	602a      	str	r2, [r5, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f7f8 ff9e 	bl	80017f4 <_write>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_write_r+0x1e>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_write_r+0x1e>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20000e64 	.word	0x20000e64

080088c8 <__errno>:
 80088c8:	4b01      	ldr	r3, [pc, #4]	@ (80088d0 <__errno+0x8>)
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20000128 	.word	0x20000128

080088d4 <__libc_init_array>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4d0d      	ldr	r5, [pc, #52]	@ (800890c <__libc_init_array+0x38>)
 80088d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008910 <__libc_init_array+0x3c>)
 80088da:	1b64      	subs	r4, r4, r5
 80088dc:	10a4      	asrs	r4, r4, #2
 80088de:	2600      	movs	r6, #0
 80088e0:	42a6      	cmp	r6, r4
 80088e2:	d109      	bne.n	80088f8 <__libc_init_array+0x24>
 80088e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008914 <__libc_init_array+0x40>)
 80088e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008918 <__libc_init_array+0x44>)
 80088e8:	f002 fc3e 	bl	800b168 <_init>
 80088ec:	1b64      	subs	r4, r4, r5
 80088ee:	10a4      	asrs	r4, r4, #2
 80088f0:	2600      	movs	r6, #0
 80088f2:	42a6      	cmp	r6, r4
 80088f4:	d105      	bne.n	8008902 <__libc_init_array+0x2e>
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fc:	4798      	blx	r3
 80088fe:	3601      	adds	r6, #1
 8008900:	e7ee      	b.n	80088e0 <__libc_init_array+0xc>
 8008902:	f855 3b04 	ldr.w	r3, [r5], #4
 8008906:	4798      	blx	r3
 8008908:	3601      	adds	r6, #1
 800890a:	e7f2      	b.n	80088f2 <__libc_init_array+0x1e>
 800890c:	0800b938 	.word	0x0800b938
 8008910:	0800b938 	.word	0x0800b938
 8008914:	0800b938 	.word	0x0800b938
 8008918:	0800b93c 	.word	0x0800b93c

0800891c <__retarget_lock_init_recursive>:
 800891c:	4770      	bx	lr

0800891e <__retarget_lock_acquire_recursive>:
 800891e:	4770      	bx	lr

08008920 <__retarget_lock_release_recursive>:
 8008920:	4770      	bx	lr

08008922 <quorem>:
 8008922:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008926:	6903      	ldr	r3, [r0, #16]
 8008928:	690c      	ldr	r4, [r1, #16]
 800892a:	42a3      	cmp	r3, r4
 800892c:	4607      	mov	r7, r0
 800892e:	db7e      	blt.n	8008a2e <quorem+0x10c>
 8008930:	3c01      	subs	r4, #1
 8008932:	f101 0814 	add.w	r8, r1, #20
 8008936:	00a3      	lsls	r3, r4, #2
 8008938:	f100 0514 	add.w	r5, r0, #20
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800894c:	3301      	adds	r3, #1
 800894e:	429a      	cmp	r2, r3
 8008950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008954:	fbb2 f6f3 	udiv	r6, r2, r3
 8008958:	d32e      	bcc.n	80089b8 <quorem+0x96>
 800895a:	f04f 0a00 	mov.w	sl, #0
 800895e:	46c4      	mov	ip, r8
 8008960:	46ae      	mov	lr, r5
 8008962:	46d3      	mov	fp, sl
 8008964:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008968:	b298      	uxth	r0, r3
 800896a:	fb06 a000 	mla	r0, r6, r0, sl
 800896e:	0c02      	lsrs	r2, r0, #16
 8008970:	0c1b      	lsrs	r3, r3, #16
 8008972:	fb06 2303 	mla	r3, r6, r3, r2
 8008976:	f8de 2000 	ldr.w	r2, [lr]
 800897a:	b280      	uxth	r0, r0
 800897c:	b292      	uxth	r2, r2
 800897e:	1a12      	subs	r2, r2, r0
 8008980:	445a      	add	r2, fp
 8008982:	f8de 0000 	ldr.w	r0, [lr]
 8008986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800898a:	b29b      	uxth	r3, r3
 800898c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008990:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008994:	b292      	uxth	r2, r2
 8008996:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800899a:	45e1      	cmp	r9, ip
 800899c:	f84e 2b04 	str.w	r2, [lr], #4
 80089a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089a4:	d2de      	bcs.n	8008964 <quorem+0x42>
 80089a6:	9b00      	ldr	r3, [sp, #0]
 80089a8:	58eb      	ldr	r3, [r5, r3]
 80089aa:	b92b      	cbnz	r3, 80089b8 <quorem+0x96>
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	3b04      	subs	r3, #4
 80089b0:	429d      	cmp	r5, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	d32f      	bcc.n	8008a16 <quorem+0xf4>
 80089b6:	613c      	str	r4, [r7, #16]
 80089b8:	4638      	mov	r0, r7
 80089ba:	f001 f97b 	bl	8009cb4 <__mcmp>
 80089be:	2800      	cmp	r0, #0
 80089c0:	db25      	blt.n	8008a0e <quorem+0xec>
 80089c2:	4629      	mov	r1, r5
 80089c4:	2000      	movs	r0, #0
 80089c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80089ca:	f8d1 c000 	ldr.w	ip, [r1]
 80089ce:	fa1f fe82 	uxth.w	lr, r2
 80089d2:	fa1f f38c 	uxth.w	r3, ip
 80089d6:	eba3 030e 	sub.w	r3, r3, lr
 80089da:	4403      	add	r3, r0
 80089dc:	0c12      	lsrs	r2, r2, #16
 80089de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80089e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089ec:	45c1      	cmp	r9, r8
 80089ee:	f841 3b04 	str.w	r3, [r1], #4
 80089f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089f6:	d2e6      	bcs.n	80089c6 <quorem+0xa4>
 80089f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a00:	b922      	cbnz	r2, 8008a0c <quorem+0xea>
 8008a02:	3b04      	subs	r3, #4
 8008a04:	429d      	cmp	r5, r3
 8008a06:	461a      	mov	r2, r3
 8008a08:	d30b      	bcc.n	8008a22 <quorem+0x100>
 8008a0a:	613c      	str	r4, [r7, #16]
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	4630      	mov	r0, r6
 8008a10:	b003      	add	sp, #12
 8008a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	3b04      	subs	r3, #4
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	d1cb      	bne.n	80089b6 <quorem+0x94>
 8008a1e:	3c01      	subs	r4, #1
 8008a20:	e7c6      	b.n	80089b0 <quorem+0x8e>
 8008a22:	6812      	ldr	r2, [r2, #0]
 8008a24:	3b04      	subs	r3, #4
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	d1ef      	bne.n	8008a0a <quorem+0xe8>
 8008a2a:	3c01      	subs	r4, #1
 8008a2c:	e7ea      	b.n	8008a04 <quorem+0xe2>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e7ee      	b.n	8008a10 <quorem+0xee>
 8008a32:	0000      	movs	r0, r0
 8008a34:	0000      	movs	r0, r0
	...

08008a38 <_dtoa_r>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	69c7      	ldr	r7, [r0, #28]
 8008a3e:	b099      	sub	sp, #100	@ 0x64
 8008a40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a44:	ec55 4b10 	vmov	r4, r5, d0
 8008a48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008a4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a4c:	4683      	mov	fp, r0
 8008a4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a52:	b97f      	cbnz	r7, 8008a74 <_dtoa_r+0x3c>
 8008a54:	2010      	movs	r0, #16
 8008a56:	f000 fdfd 	bl	8009654 <malloc>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008a60:	b920      	cbnz	r0, 8008a6c <_dtoa_r+0x34>
 8008a62:	4ba7      	ldr	r3, [pc, #668]	@ (8008d00 <_dtoa_r+0x2c8>)
 8008a64:	21ef      	movs	r1, #239	@ 0xef
 8008a66:	48a7      	ldr	r0, [pc, #668]	@ (8008d04 <_dtoa_r+0x2cc>)
 8008a68:	f001 fccc 	bl	800a404 <__assert_func>
 8008a6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a70:	6007      	str	r7, [r0, #0]
 8008a72:	60c7      	str	r7, [r0, #12]
 8008a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a78:	6819      	ldr	r1, [r3, #0]
 8008a7a:	b159      	cbz	r1, 8008a94 <_dtoa_r+0x5c>
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	604a      	str	r2, [r1, #4]
 8008a80:	2301      	movs	r3, #1
 8008a82:	4093      	lsls	r3, r2
 8008a84:	608b      	str	r3, [r1, #8]
 8008a86:	4658      	mov	r0, fp
 8008a88:	f000 feda 	bl	8009840 <_Bfree>
 8008a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	1e2b      	subs	r3, r5, #0
 8008a96:	bfb9      	ittee	lt
 8008a98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a9c:	9303      	strlt	r3, [sp, #12]
 8008a9e:	2300      	movge	r3, #0
 8008aa0:	6033      	strge	r3, [r6, #0]
 8008aa2:	9f03      	ldr	r7, [sp, #12]
 8008aa4:	4b98      	ldr	r3, [pc, #608]	@ (8008d08 <_dtoa_r+0x2d0>)
 8008aa6:	bfbc      	itt	lt
 8008aa8:	2201      	movlt	r2, #1
 8008aaa:	6032      	strlt	r2, [r6, #0]
 8008aac:	43bb      	bics	r3, r7
 8008aae:	d112      	bne.n	8008ad6 <_dtoa_r+0x9e>
 8008ab0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008abc:	4323      	orrs	r3, r4
 8008abe:	f000 854d 	beq.w	800955c <_dtoa_r+0xb24>
 8008ac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ac4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008d1c <_dtoa_r+0x2e4>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 854f 	beq.w	800956c <_dtoa_r+0xb34>
 8008ace:	f10a 0303 	add.w	r3, sl, #3
 8008ad2:	f000 bd49 	b.w	8009568 <_dtoa_r+0xb30>
 8008ad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	ec51 0b17 	vmov	r0, r1, d7
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008ae6:	f7f7 ffff 	bl	8000ae8 <__aeabi_dcmpeq>
 8008aea:	4680      	mov	r8, r0
 8008aec:	b158      	cbz	r0, 8008b06 <_dtoa_r+0xce>
 8008aee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008af0:	2301      	movs	r3, #1
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008af6:	b113      	cbz	r3, 8008afe <_dtoa_r+0xc6>
 8008af8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008afa:	4b84      	ldr	r3, [pc, #528]	@ (8008d0c <_dtoa_r+0x2d4>)
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008d20 <_dtoa_r+0x2e8>
 8008b02:	f000 bd33 	b.w	800956c <_dtoa_r+0xb34>
 8008b06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b0a:	aa16      	add	r2, sp, #88	@ 0x58
 8008b0c:	a917      	add	r1, sp, #92	@ 0x5c
 8008b0e:	4658      	mov	r0, fp
 8008b10:	f001 f980 	bl	8009e14 <__d2b>
 8008b14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b18:	4681      	mov	r9, r0
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	d077      	beq.n	8008c0e <_dtoa_r+0x1d6>
 8008b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b38:	4619      	mov	r1, r3
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4b74      	ldr	r3, [pc, #464]	@ (8008d10 <_dtoa_r+0x2d8>)
 8008b3e:	f7f7 fbb3 	bl	80002a8 <__aeabi_dsub>
 8008b42:	a369      	add	r3, pc, #420	@ (adr r3, 8008ce8 <_dtoa_r+0x2b0>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fd66 	bl	8000618 <__aeabi_dmul>
 8008b4c:	a368      	add	r3, pc, #416	@ (adr r3, 8008cf0 <_dtoa_r+0x2b8>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f7f7 fbab 	bl	80002ac <__adddf3>
 8008b56:	4604      	mov	r4, r0
 8008b58:	4630      	mov	r0, r6
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	f7f7 fcf2 	bl	8000544 <__aeabi_i2d>
 8008b60:	a365      	add	r3, pc, #404	@ (adr r3, 8008cf8 <_dtoa_r+0x2c0>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fd57 	bl	8000618 <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7f7 fb9b 	bl	80002ac <__adddf3>
 8008b76:	4604      	mov	r4, r0
 8008b78:	460d      	mov	r5, r1
 8008b7a:	f7f7 fffd 	bl	8000b78 <__aeabi_d2iz>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	4607      	mov	r7, r0
 8008b82:	2300      	movs	r3, #0
 8008b84:	4620      	mov	r0, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 ffb8 	bl	8000afc <__aeabi_dcmplt>
 8008b8c:	b140      	cbz	r0, 8008ba0 <_dtoa_r+0x168>
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f7f7 fcd8 	bl	8000544 <__aeabi_i2d>
 8008b94:	4622      	mov	r2, r4
 8008b96:	462b      	mov	r3, r5
 8008b98:	f7f7 ffa6 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b9c:	b900      	cbnz	r0, 8008ba0 <_dtoa_r+0x168>
 8008b9e:	3f01      	subs	r7, #1
 8008ba0:	2f16      	cmp	r7, #22
 8008ba2:	d851      	bhi.n	8008c48 <_dtoa_r+0x210>
 8008ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8008d14 <_dtoa_r+0x2dc>)
 8008ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bb2:	f7f7 ffa3 	bl	8000afc <__aeabi_dcmplt>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d048      	beq.n	8008c4c <_dtoa_r+0x214>
 8008bba:	3f01      	subs	r7, #1
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bc2:	1b9b      	subs	r3, r3, r6
 8008bc4:	1e5a      	subs	r2, r3, #1
 8008bc6:	bf44      	itt	mi
 8008bc8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008bcc:	2300      	movmi	r3, #0
 8008bce:	9208      	str	r2, [sp, #32]
 8008bd0:	bf54      	ite	pl
 8008bd2:	f04f 0800 	movpl.w	r8, #0
 8008bd6:	9308      	strmi	r3, [sp, #32]
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	db39      	blt.n	8008c50 <_dtoa_r+0x218>
 8008bdc:	9b08      	ldr	r3, [sp, #32]
 8008bde:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008be0:	443b      	add	r3, r7
 8008be2:	9308      	str	r3, [sp, #32]
 8008be4:	2300      	movs	r3, #0
 8008be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bea:	2b09      	cmp	r3, #9
 8008bec:	d864      	bhi.n	8008cb8 <_dtoa_r+0x280>
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	bfc4      	itt	gt
 8008bf2:	3b04      	subgt	r3, #4
 8008bf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	f1a3 0302 	sub.w	r3, r3, #2
 8008bfc:	bfcc      	ite	gt
 8008bfe:	2400      	movgt	r4, #0
 8008c00:	2401      	movle	r4, #1
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d863      	bhi.n	8008cce <_dtoa_r+0x296>
 8008c06:	e8df f003 	tbb	[pc, r3]
 8008c0a:	372a      	.short	0x372a
 8008c0c:	5535      	.short	0x5535
 8008c0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008c12:	441e      	add	r6, r3
 8008c14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	bfc1      	itttt	gt
 8008c1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c20:	409f      	lslgt	r7, r3
 8008c22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c2a:	bfd6      	itet	le
 8008c2c:	f1c3 0320 	rsble	r3, r3, #32
 8008c30:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c34:	fa04 f003 	lslle.w	r0, r4, r3
 8008c38:	f7f7 fc74 	bl	8000524 <__aeabi_ui2d>
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c42:	3e01      	subs	r6, #1
 8008c44:	9214      	str	r2, [sp, #80]	@ 0x50
 8008c46:	e777      	b.n	8008b38 <_dtoa_r+0x100>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7b8      	b.n	8008bbe <_dtoa_r+0x186>
 8008c4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c4e:	e7b7      	b.n	8008bc0 <_dtoa_r+0x188>
 8008c50:	427b      	negs	r3, r7
 8008c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c54:	2300      	movs	r3, #0
 8008c56:	eba8 0807 	sub.w	r8, r8, r7
 8008c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c5c:	e7c4      	b.n	8008be8 <_dtoa_r+0x1b0>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	dc35      	bgt.n	8008cd4 <_dtoa_r+0x29c>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	9307      	str	r3, [sp, #28]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c72:	e00b      	b.n	8008c8c <_dtoa_r+0x254>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e7f3      	b.n	8008c60 <_dtoa_r+0x228>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c7e:	18fb      	adds	r3, r7, r3
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	9307      	str	r3, [sp, #28]
 8008c88:	bfb8      	it	lt
 8008c8a:	2301      	movlt	r3, #1
 8008c8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c90:	2100      	movs	r1, #0
 8008c92:	2204      	movs	r2, #4
 8008c94:	f102 0514 	add.w	r5, r2, #20
 8008c98:	429d      	cmp	r5, r3
 8008c9a:	d91f      	bls.n	8008cdc <_dtoa_r+0x2a4>
 8008c9c:	6041      	str	r1, [r0, #4]
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f000 fd8e 	bl	80097c0 <_Balloc>
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d13c      	bne.n	8008d24 <_dtoa_r+0x2ec>
 8008caa:	4b1b      	ldr	r3, [pc, #108]	@ (8008d18 <_dtoa_r+0x2e0>)
 8008cac:	4602      	mov	r2, r0
 8008cae:	f240 11af 	movw	r1, #431	@ 0x1af
 8008cb2:	e6d8      	b.n	8008a66 <_dtoa_r+0x2e>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e7e0      	b.n	8008c7a <_dtoa_r+0x242>
 8008cb8:	2401      	movs	r4, #1
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	9307      	str	r3, [sp, #28]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2312      	movs	r3, #18
 8008ccc:	e7d0      	b.n	8008c70 <_dtoa_r+0x238>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd2:	e7f5      	b.n	8008cc0 <_dtoa_r+0x288>
 8008cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	9307      	str	r3, [sp, #28]
 8008cda:	e7d7      	b.n	8008c8c <_dtoa_r+0x254>
 8008cdc:	3101      	adds	r1, #1
 8008cde:	0052      	lsls	r2, r2, #1
 8008ce0:	e7d8      	b.n	8008c94 <_dtoa_r+0x25c>
 8008ce2:	bf00      	nop
 8008ce4:	f3af 8000 	nop.w
 8008ce8:	636f4361 	.word	0x636f4361
 8008cec:	3fd287a7 	.word	0x3fd287a7
 8008cf0:	8b60c8b3 	.word	0x8b60c8b3
 8008cf4:	3fc68a28 	.word	0x3fc68a28
 8008cf8:	509f79fb 	.word	0x509f79fb
 8008cfc:	3fd34413 	.word	0x3fd34413
 8008d00:	0800b22d 	.word	0x0800b22d
 8008d04:	0800b244 	.word	0x0800b244
 8008d08:	7ff00000 	.word	0x7ff00000
 8008d0c:	0800b1fd 	.word	0x0800b1fd
 8008d10:	3ff80000 	.word	0x3ff80000
 8008d14:	0800b340 	.word	0x0800b340
 8008d18:	0800b29c 	.word	0x0800b29c
 8008d1c:	0800b229 	.word	0x0800b229
 8008d20:	0800b1fc 	.word	0x0800b1fc
 8008d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d28:	6018      	str	r0, [r3, #0]
 8008d2a:	9b07      	ldr	r3, [sp, #28]
 8008d2c:	2b0e      	cmp	r3, #14
 8008d2e:	f200 80a4 	bhi.w	8008e7a <_dtoa_r+0x442>
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	f000 80a1 	beq.w	8008e7a <_dtoa_r+0x442>
 8008d38:	2f00      	cmp	r7, #0
 8008d3a:	dd33      	ble.n	8008da4 <_dtoa_r+0x36c>
 8008d3c:	4bad      	ldr	r3, [pc, #692]	@ (8008ff4 <_dtoa_r+0x5bc>)
 8008d3e:	f007 020f 	and.w	r2, r7, #15
 8008d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d46:	ed93 7b00 	vldr	d7, [r3]
 8008d4a:	05f8      	lsls	r0, r7, #23
 8008d4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d54:	d516      	bpl.n	8008d84 <_dtoa_r+0x34c>
 8008d56:	4ba8      	ldr	r3, [pc, #672]	@ (8008ff8 <_dtoa_r+0x5c0>)
 8008d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d60:	f7f7 fd84 	bl	800086c <__aeabi_ddiv>
 8008d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d68:	f004 040f 	and.w	r4, r4, #15
 8008d6c:	2603      	movs	r6, #3
 8008d6e:	4da2      	ldr	r5, [pc, #648]	@ (8008ff8 <_dtoa_r+0x5c0>)
 8008d70:	b954      	cbnz	r4, 8008d88 <_dtoa_r+0x350>
 8008d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7a:	f7f7 fd77 	bl	800086c <__aeabi_ddiv>
 8008d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d82:	e028      	b.n	8008dd6 <_dtoa_r+0x39e>
 8008d84:	2602      	movs	r6, #2
 8008d86:	e7f2      	b.n	8008d6e <_dtoa_r+0x336>
 8008d88:	07e1      	lsls	r1, r4, #31
 8008d8a:	d508      	bpl.n	8008d9e <_dtoa_r+0x366>
 8008d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d94:	f7f7 fc40 	bl	8000618 <__aeabi_dmul>
 8008d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	1064      	asrs	r4, r4, #1
 8008da0:	3508      	adds	r5, #8
 8008da2:	e7e5      	b.n	8008d70 <_dtoa_r+0x338>
 8008da4:	f000 80d2 	beq.w	8008f4c <_dtoa_r+0x514>
 8008da8:	427c      	negs	r4, r7
 8008daa:	4b92      	ldr	r3, [pc, #584]	@ (8008ff4 <_dtoa_r+0x5bc>)
 8008dac:	4d92      	ldr	r5, [pc, #584]	@ (8008ff8 <_dtoa_r+0x5c0>)
 8008dae:	f004 020f 	and.w	r2, r4, #15
 8008db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dbe:	f7f7 fc2b 	bl	8000618 <__aeabi_dmul>
 8008dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc6:	1124      	asrs	r4, r4, #4
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2602      	movs	r6, #2
 8008dcc:	2c00      	cmp	r4, #0
 8008dce:	f040 80b2 	bne.w	8008f36 <_dtoa_r+0x4fe>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1d3      	bne.n	8008d7e <_dtoa_r+0x346>
 8008dd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 80b7 	beq.w	8008f50 <_dtoa_r+0x518>
 8008de2:	4b86      	ldr	r3, [pc, #536]	@ (8008ffc <_dtoa_r+0x5c4>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 fe87 	bl	8000afc <__aeabi_dcmplt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f000 80ae 	beq.w	8008f50 <_dtoa_r+0x518>
 8008df4:	9b07      	ldr	r3, [sp, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80aa 	beq.w	8008f50 <_dtoa_r+0x518>
 8008dfc:	9b00      	ldr	r3, [sp, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	dd37      	ble.n	8008e72 <_dtoa_r+0x43a>
 8008e02:	1e7b      	subs	r3, r7, #1
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	4620      	mov	r0, r4
 8008e08:	4b7d      	ldr	r3, [pc, #500]	@ (8009000 <_dtoa_r+0x5c8>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fc03 	bl	8000618 <__aeabi_dmul>
 8008e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e16:	9c00      	ldr	r4, [sp, #0]
 8008e18:	3601      	adds	r6, #1
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7f7 fb92 	bl	8000544 <__aeabi_i2d>
 8008e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e24:	f7f7 fbf8 	bl	8000618 <__aeabi_dmul>
 8008e28:	4b76      	ldr	r3, [pc, #472]	@ (8009004 <_dtoa_r+0x5cc>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f7f7 fa3e 	bl	80002ac <__adddf3>
 8008e30:	4605      	mov	r5, r0
 8008e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	f040 808d 	bne.w	8008f56 <_dtoa_r+0x51e>
 8008e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e40:	4b71      	ldr	r3, [pc, #452]	@ (8009008 <_dtoa_r+0x5d0>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fa30 	bl	80002a8 <__aeabi_dsub>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e50:	462a      	mov	r2, r5
 8008e52:	4633      	mov	r3, r6
 8008e54:	f7f7 fe70 	bl	8000b38 <__aeabi_dcmpgt>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f040 828b 	bne.w	8009374 <_dtoa_r+0x93c>
 8008e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e62:	462a      	mov	r2, r5
 8008e64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008e68:	f7f7 fe48 	bl	8000afc <__aeabi_dcmplt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f040 8128 	bne.w	80090c2 <_dtoa_r+0x68a>
 8008e72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008e76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f2c0 815a 	blt.w	8009136 <_dtoa_r+0x6fe>
 8008e82:	2f0e      	cmp	r7, #14
 8008e84:	f300 8157 	bgt.w	8009136 <_dtoa_r+0x6fe>
 8008e88:	4b5a      	ldr	r3, [pc, #360]	@ (8008ff4 <_dtoa_r+0x5bc>)
 8008e8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e8e:	ed93 7b00 	vldr	d7, [r3]
 8008e92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	ed8d 7b00 	vstr	d7, [sp]
 8008e9a:	da03      	bge.n	8008ea4 <_dtoa_r+0x46c>
 8008e9c:	9b07      	ldr	r3, [sp, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f340 8101 	ble.w	80090a6 <_dtoa_r+0x66e>
 8008ea4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ea8:	4656      	mov	r6, sl
 8008eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 fcdb 	bl	800086c <__aeabi_ddiv>
 8008eb6:	f7f7 fe5f 	bl	8000b78 <__aeabi_d2iz>
 8008eba:	4680      	mov	r8, r0
 8008ebc:	f7f7 fb42 	bl	8000544 <__aeabi_i2d>
 8008ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ec4:	f7f7 fba8 	bl	8000618 <__aeabi_dmul>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4620      	mov	r0, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ed4:	f7f7 f9e8 	bl	80002a8 <__aeabi_dsub>
 8008ed8:	f806 4b01 	strb.w	r4, [r6], #1
 8008edc:	9d07      	ldr	r5, [sp, #28]
 8008ede:	eba6 040a 	sub.w	r4, r6, sl
 8008ee2:	42a5      	cmp	r5, r4
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	f040 8117 	bne.w	800911a <_dtoa_r+0x6e2>
 8008eec:	f7f7 f9de 	bl	80002ac <__adddf3>
 8008ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	f7f7 fe1e 	bl	8000b38 <__aeabi_dcmpgt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f040 80f9 	bne.w	80090f4 <_dtoa_r+0x6bc>
 8008f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f06:	4620      	mov	r0, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	f7f7 fded 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f0e:	b118      	cbz	r0, 8008f18 <_dtoa_r+0x4e0>
 8008f10:	f018 0f01 	tst.w	r8, #1
 8008f14:	f040 80ee 	bne.w	80090f4 <_dtoa_r+0x6bc>
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4658      	mov	r0, fp
 8008f1c:	f000 fc90 	bl	8009840 <_Bfree>
 8008f20:	2300      	movs	r3, #0
 8008f22:	7033      	strb	r3, [r6, #0]
 8008f24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f26:	3701      	adds	r7, #1
 8008f28:	601f      	str	r7, [r3, #0]
 8008f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 831d 	beq.w	800956c <_dtoa_r+0xb34>
 8008f32:	601e      	str	r6, [r3, #0]
 8008f34:	e31a      	b.n	800956c <_dtoa_r+0xb34>
 8008f36:	07e2      	lsls	r2, r4, #31
 8008f38:	d505      	bpl.n	8008f46 <_dtoa_r+0x50e>
 8008f3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f3e:	f7f7 fb6b 	bl	8000618 <__aeabi_dmul>
 8008f42:	3601      	adds	r6, #1
 8008f44:	2301      	movs	r3, #1
 8008f46:	1064      	asrs	r4, r4, #1
 8008f48:	3508      	adds	r5, #8
 8008f4a:	e73f      	b.n	8008dcc <_dtoa_r+0x394>
 8008f4c:	2602      	movs	r6, #2
 8008f4e:	e742      	b.n	8008dd6 <_dtoa_r+0x39e>
 8008f50:	9c07      	ldr	r4, [sp, #28]
 8008f52:	9704      	str	r7, [sp, #16]
 8008f54:	e761      	b.n	8008e1a <_dtoa_r+0x3e2>
 8008f56:	4b27      	ldr	r3, [pc, #156]	@ (8008ff4 <_dtoa_r+0x5bc>)
 8008f58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f62:	4454      	add	r4, sl
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d053      	beq.n	8009010 <_dtoa_r+0x5d8>
 8008f68:	4928      	ldr	r1, [pc, #160]	@ (800900c <_dtoa_r+0x5d4>)
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	f7f7 fc7e 	bl	800086c <__aeabi_ddiv>
 8008f70:	4633      	mov	r3, r6
 8008f72:	462a      	mov	r2, r5
 8008f74:	f7f7 f998 	bl	80002a8 <__aeabi_dsub>
 8008f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f7c:	4656      	mov	r6, sl
 8008f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f82:	f7f7 fdf9 	bl	8000b78 <__aeabi_d2iz>
 8008f86:	4605      	mov	r5, r0
 8008f88:	f7f7 fadc 	bl	8000544 <__aeabi_i2d>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f94:	f7f7 f988 	bl	80002a8 <__aeabi_dsub>
 8008f98:	3530      	adds	r5, #48	@ 0x30
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fa2:	f806 5b01 	strb.w	r5, [r6], #1
 8008fa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008faa:	f7f7 fda7 	bl	8000afc <__aeabi_dcmplt>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d171      	bne.n	8009096 <_dtoa_r+0x65e>
 8008fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fb6:	4911      	ldr	r1, [pc, #68]	@ (8008ffc <_dtoa_r+0x5c4>)
 8008fb8:	2000      	movs	r0, #0
 8008fba:	f7f7 f975 	bl	80002a8 <__aeabi_dsub>
 8008fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fc2:	f7f7 fd9b 	bl	8000afc <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f040 8095 	bne.w	80090f6 <_dtoa_r+0x6be>
 8008fcc:	42a6      	cmp	r6, r4
 8008fce:	f43f af50 	beq.w	8008e72 <_dtoa_r+0x43a>
 8008fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009000 <_dtoa_r+0x5c8>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f7f7 fb1d 	bl	8000618 <__aeabi_dmul>
 8008fde:	4b08      	ldr	r3, [pc, #32]	@ (8009000 <_dtoa_r+0x5c8>)
 8008fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fea:	f7f7 fb15 	bl	8000618 <__aeabi_dmul>
 8008fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff2:	e7c4      	b.n	8008f7e <_dtoa_r+0x546>
 8008ff4:	0800b340 	.word	0x0800b340
 8008ff8:	0800b318 	.word	0x0800b318
 8008ffc:	3ff00000 	.word	0x3ff00000
 8009000:	40240000 	.word	0x40240000
 8009004:	401c0000 	.word	0x401c0000
 8009008:	40140000 	.word	0x40140000
 800900c:	3fe00000 	.word	0x3fe00000
 8009010:	4631      	mov	r1, r6
 8009012:	4628      	mov	r0, r5
 8009014:	f7f7 fb00 	bl	8000618 <__aeabi_dmul>
 8009018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800901c:	9415      	str	r4, [sp, #84]	@ 0x54
 800901e:	4656      	mov	r6, sl
 8009020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009024:	f7f7 fda8 	bl	8000b78 <__aeabi_d2iz>
 8009028:	4605      	mov	r5, r0
 800902a:	f7f7 fa8b 	bl	8000544 <__aeabi_i2d>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009036:	f7f7 f937 	bl	80002a8 <__aeabi_dsub>
 800903a:	3530      	adds	r5, #48	@ 0x30
 800903c:	f806 5b01 	strb.w	r5, [r6], #1
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	42a6      	cmp	r6, r4
 8009046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	d124      	bne.n	800909a <_dtoa_r+0x662>
 8009050:	4bac      	ldr	r3, [pc, #688]	@ (8009304 <_dtoa_r+0x8cc>)
 8009052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009056:	f7f7 f929 	bl	80002ac <__adddf3>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009062:	f7f7 fd69 	bl	8000b38 <__aeabi_dcmpgt>
 8009066:	2800      	cmp	r0, #0
 8009068:	d145      	bne.n	80090f6 <_dtoa_r+0x6be>
 800906a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800906e:	49a5      	ldr	r1, [pc, #660]	@ (8009304 <_dtoa_r+0x8cc>)
 8009070:	2000      	movs	r0, #0
 8009072:	f7f7 f919 	bl	80002a8 <__aeabi_dsub>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800907e:	f7f7 fd3d 	bl	8000afc <__aeabi_dcmplt>
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f aef5 	beq.w	8008e72 <_dtoa_r+0x43a>
 8009088:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800908a:	1e73      	subs	r3, r6, #1
 800908c:	9315      	str	r3, [sp, #84]	@ 0x54
 800908e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009092:	2b30      	cmp	r3, #48	@ 0x30
 8009094:	d0f8      	beq.n	8009088 <_dtoa_r+0x650>
 8009096:	9f04      	ldr	r7, [sp, #16]
 8009098:	e73e      	b.n	8008f18 <_dtoa_r+0x4e0>
 800909a:	4b9b      	ldr	r3, [pc, #620]	@ (8009308 <_dtoa_r+0x8d0>)
 800909c:	f7f7 fabc 	bl	8000618 <__aeabi_dmul>
 80090a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090a4:	e7bc      	b.n	8009020 <_dtoa_r+0x5e8>
 80090a6:	d10c      	bne.n	80090c2 <_dtoa_r+0x68a>
 80090a8:	4b98      	ldr	r3, [pc, #608]	@ (800930c <_dtoa_r+0x8d4>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090b8:	f7f7 fd34 	bl	8000b24 <__aeabi_dcmpge>
 80090bc:	2800      	cmp	r0, #0
 80090be:	f000 8157 	beq.w	8009370 <_dtoa_r+0x938>
 80090c2:	2400      	movs	r4, #0
 80090c4:	4625      	mov	r5, r4
 80090c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c8:	43db      	mvns	r3, r3
 80090ca:	9304      	str	r3, [sp, #16]
 80090cc:	4656      	mov	r6, sl
 80090ce:	2700      	movs	r7, #0
 80090d0:	4621      	mov	r1, r4
 80090d2:	4658      	mov	r0, fp
 80090d4:	f000 fbb4 	bl	8009840 <_Bfree>
 80090d8:	2d00      	cmp	r5, #0
 80090da:	d0dc      	beq.n	8009096 <_dtoa_r+0x65e>
 80090dc:	b12f      	cbz	r7, 80090ea <_dtoa_r+0x6b2>
 80090de:	42af      	cmp	r7, r5
 80090e0:	d003      	beq.n	80090ea <_dtoa_r+0x6b2>
 80090e2:	4639      	mov	r1, r7
 80090e4:	4658      	mov	r0, fp
 80090e6:	f000 fbab 	bl	8009840 <_Bfree>
 80090ea:	4629      	mov	r1, r5
 80090ec:	4658      	mov	r0, fp
 80090ee:	f000 fba7 	bl	8009840 <_Bfree>
 80090f2:	e7d0      	b.n	8009096 <_dtoa_r+0x65e>
 80090f4:	9704      	str	r7, [sp, #16]
 80090f6:	4633      	mov	r3, r6
 80090f8:	461e      	mov	r6, r3
 80090fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090fe:	2a39      	cmp	r2, #57	@ 0x39
 8009100:	d107      	bne.n	8009112 <_dtoa_r+0x6da>
 8009102:	459a      	cmp	sl, r3
 8009104:	d1f8      	bne.n	80090f8 <_dtoa_r+0x6c0>
 8009106:	9a04      	ldr	r2, [sp, #16]
 8009108:	3201      	adds	r2, #1
 800910a:	9204      	str	r2, [sp, #16]
 800910c:	2230      	movs	r2, #48	@ 0x30
 800910e:	f88a 2000 	strb.w	r2, [sl]
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	3201      	adds	r2, #1
 8009116:	701a      	strb	r2, [r3, #0]
 8009118:	e7bd      	b.n	8009096 <_dtoa_r+0x65e>
 800911a:	4b7b      	ldr	r3, [pc, #492]	@ (8009308 <_dtoa_r+0x8d0>)
 800911c:	2200      	movs	r2, #0
 800911e:	f7f7 fa7b 	bl	8000618 <__aeabi_dmul>
 8009122:	2200      	movs	r2, #0
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	460d      	mov	r5, r1
 800912a:	f7f7 fcdd 	bl	8000ae8 <__aeabi_dcmpeq>
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f aebb 	beq.w	8008eaa <_dtoa_r+0x472>
 8009134:	e6f0      	b.n	8008f18 <_dtoa_r+0x4e0>
 8009136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009138:	2a00      	cmp	r2, #0
 800913a:	f000 80db 	beq.w	80092f4 <_dtoa_r+0x8bc>
 800913e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009140:	2a01      	cmp	r2, #1
 8009142:	f300 80bf 	bgt.w	80092c4 <_dtoa_r+0x88c>
 8009146:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009148:	2a00      	cmp	r2, #0
 800914a:	f000 80b7 	beq.w	80092bc <_dtoa_r+0x884>
 800914e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009152:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009154:	4646      	mov	r6, r8
 8009156:	9a08      	ldr	r2, [sp, #32]
 8009158:	2101      	movs	r1, #1
 800915a:	441a      	add	r2, r3
 800915c:	4658      	mov	r0, fp
 800915e:	4498      	add	r8, r3
 8009160:	9208      	str	r2, [sp, #32]
 8009162:	f000 fc21 	bl	80099a8 <__i2b>
 8009166:	4605      	mov	r5, r0
 8009168:	b15e      	cbz	r6, 8009182 <_dtoa_r+0x74a>
 800916a:	9b08      	ldr	r3, [sp, #32]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd08      	ble.n	8009182 <_dtoa_r+0x74a>
 8009170:	42b3      	cmp	r3, r6
 8009172:	9a08      	ldr	r2, [sp, #32]
 8009174:	bfa8      	it	ge
 8009176:	4633      	movge	r3, r6
 8009178:	eba8 0803 	sub.w	r8, r8, r3
 800917c:	1af6      	subs	r6, r6, r3
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	9308      	str	r3, [sp, #32]
 8009182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009184:	b1f3      	cbz	r3, 80091c4 <_dtoa_r+0x78c>
 8009186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 80b7 	beq.w	80092fc <_dtoa_r+0x8c4>
 800918e:	b18c      	cbz	r4, 80091b4 <_dtoa_r+0x77c>
 8009190:	4629      	mov	r1, r5
 8009192:	4622      	mov	r2, r4
 8009194:	4658      	mov	r0, fp
 8009196:	f000 fcc7 	bl	8009b28 <__pow5mult>
 800919a:	464a      	mov	r2, r9
 800919c:	4601      	mov	r1, r0
 800919e:	4605      	mov	r5, r0
 80091a0:	4658      	mov	r0, fp
 80091a2:	f000 fc17 	bl	80099d4 <__multiply>
 80091a6:	4649      	mov	r1, r9
 80091a8:	9004      	str	r0, [sp, #16]
 80091aa:	4658      	mov	r0, fp
 80091ac:	f000 fb48 	bl	8009840 <_Bfree>
 80091b0:	9b04      	ldr	r3, [sp, #16]
 80091b2:	4699      	mov	r9, r3
 80091b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091b6:	1b1a      	subs	r2, r3, r4
 80091b8:	d004      	beq.n	80091c4 <_dtoa_r+0x78c>
 80091ba:	4649      	mov	r1, r9
 80091bc:	4658      	mov	r0, fp
 80091be:	f000 fcb3 	bl	8009b28 <__pow5mult>
 80091c2:	4681      	mov	r9, r0
 80091c4:	2101      	movs	r1, #1
 80091c6:	4658      	mov	r0, fp
 80091c8:	f000 fbee 	bl	80099a8 <__i2b>
 80091cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ce:	4604      	mov	r4, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 81cf 	beq.w	8009574 <_dtoa_r+0xb3c>
 80091d6:	461a      	mov	r2, r3
 80091d8:	4601      	mov	r1, r0
 80091da:	4658      	mov	r0, fp
 80091dc:	f000 fca4 	bl	8009b28 <__pow5mult>
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	4604      	mov	r4, r0
 80091e6:	f300 8095 	bgt.w	8009314 <_dtoa_r+0x8dc>
 80091ea:	9b02      	ldr	r3, [sp, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f040 8087 	bne.w	8009300 <_dtoa_r+0x8c8>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f040 8089 	bne.w	8009310 <_dtoa_r+0x8d8>
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009204:	0d1b      	lsrs	r3, r3, #20
 8009206:	051b      	lsls	r3, r3, #20
 8009208:	b12b      	cbz	r3, 8009216 <_dtoa_r+0x7de>
 800920a:	9b08      	ldr	r3, [sp, #32]
 800920c:	3301      	adds	r3, #1
 800920e:	9308      	str	r3, [sp, #32]
 8009210:	f108 0801 	add.w	r8, r8, #1
 8009214:	2301      	movs	r3, #1
 8009216:	930a      	str	r3, [sp, #40]	@ 0x28
 8009218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 81b0 	beq.w	8009580 <_dtoa_r+0xb48>
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009226:	6918      	ldr	r0, [r3, #16]
 8009228:	f000 fb72 	bl	8009910 <__hi0bits>
 800922c:	f1c0 0020 	rsb	r0, r0, #32
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	4418      	add	r0, r3
 8009234:	f010 001f 	ands.w	r0, r0, #31
 8009238:	d077      	beq.n	800932a <_dtoa_r+0x8f2>
 800923a:	f1c0 0320 	rsb	r3, r0, #32
 800923e:	2b04      	cmp	r3, #4
 8009240:	dd6b      	ble.n	800931a <_dtoa_r+0x8e2>
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	f1c0 001c 	rsb	r0, r0, #28
 8009248:	4403      	add	r3, r0
 800924a:	4480      	add	r8, r0
 800924c:	4406      	add	r6, r0
 800924e:	9308      	str	r3, [sp, #32]
 8009250:	f1b8 0f00 	cmp.w	r8, #0
 8009254:	dd05      	ble.n	8009262 <_dtoa_r+0x82a>
 8009256:	4649      	mov	r1, r9
 8009258:	4642      	mov	r2, r8
 800925a:	4658      	mov	r0, fp
 800925c:	f000 fcbe 	bl	8009bdc <__lshift>
 8009260:	4681      	mov	r9, r0
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd05      	ble.n	8009274 <_dtoa_r+0x83c>
 8009268:	4621      	mov	r1, r4
 800926a:	461a      	mov	r2, r3
 800926c:	4658      	mov	r0, fp
 800926e:	f000 fcb5 	bl	8009bdc <__lshift>
 8009272:	4604      	mov	r4, r0
 8009274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009276:	2b00      	cmp	r3, #0
 8009278:	d059      	beq.n	800932e <_dtoa_r+0x8f6>
 800927a:	4621      	mov	r1, r4
 800927c:	4648      	mov	r0, r9
 800927e:	f000 fd19 	bl	8009cb4 <__mcmp>
 8009282:	2800      	cmp	r0, #0
 8009284:	da53      	bge.n	800932e <_dtoa_r+0x8f6>
 8009286:	1e7b      	subs	r3, r7, #1
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	4649      	mov	r1, r9
 800928c:	2300      	movs	r3, #0
 800928e:	220a      	movs	r2, #10
 8009290:	4658      	mov	r0, fp
 8009292:	f000 faf7 	bl	8009884 <__multadd>
 8009296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009298:	4681      	mov	r9, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8172 	beq.w	8009584 <_dtoa_r+0xb4c>
 80092a0:	2300      	movs	r3, #0
 80092a2:	4629      	mov	r1, r5
 80092a4:	220a      	movs	r2, #10
 80092a6:	4658      	mov	r0, fp
 80092a8:	f000 faec 	bl	8009884 <__multadd>
 80092ac:	9b00      	ldr	r3, [sp, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	4605      	mov	r5, r0
 80092b2:	dc67      	bgt.n	8009384 <_dtoa_r+0x94c>
 80092b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	dc41      	bgt.n	800933e <_dtoa_r+0x906>
 80092ba:	e063      	b.n	8009384 <_dtoa_r+0x94c>
 80092bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80092c2:	e746      	b.n	8009152 <_dtoa_r+0x71a>
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	1e5c      	subs	r4, r3, #1
 80092c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	bfbf      	itttt	lt
 80092ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80092d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80092d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80092d4:	1ae3      	sublt	r3, r4, r3
 80092d6:	bfb4      	ite	lt
 80092d8:	18d2      	addlt	r2, r2, r3
 80092da:	1b1c      	subge	r4, r3, r4
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	bfbc      	itt	lt
 80092e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80092e2:	2400      	movlt	r4, #0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfb5      	itete	lt
 80092e8:	eba8 0603 	sublt.w	r6, r8, r3
 80092ec:	9b07      	ldrge	r3, [sp, #28]
 80092ee:	2300      	movlt	r3, #0
 80092f0:	4646      	movge	r6, r8
 80092f2:	e730      	b.n	8009156 <_dtoa_r+0x71e>
 80092f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80092f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80092f8:	4646      	mov	r6, r8
 80092fa:	e735      	b.n	8009168 <_dtoa_r+0x730>
 80092fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092fe:	e75c      	b.n	80091ba <_dtoa_r+0x782>
 8009300:	2300      	movs	r3, #0
 8009302:	e788      	b.n	8009216 <_dtoa_r+0x7de>
 8009304:	3fe00000 	.word	0x3fe00000
 8009308:	40240000 	.word	0x40240000
 800930c:	40140000 	.word	0x40140000
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	e780      	b.n	8009216 <_dtoa_r+0x7de>
 8009314:	2300      	movs	r3, #0
 8009316:	930a      	str	r3, [sp, #40]	@ 0x28
 8009318:	e782      	b.n	8009220 <_dtoa_r+0x7e8>
 800931a:	d099      	beq.n	8009250 <_dtoa_r+0x818>
 800931c:	9a08      	ldr	r2, [sp, #32]
 800931e:	331c      	adds	r3, #28
 8009320:	441a      	add	r2, r3
 8009322:	4498      	add	r8, r3
 8009324:	441e      	add	r6, r3
 8009326:	9208      	str	r2, [sp, #32]
 8009328:	e792      	b.n	8009250 <_dtoa_r+0x818>
 800932a:	4603      	mov	r3, r0
 800932c:	e7f6      	b.n	800931c <_dtoa_r+0x8e4>
 800932e:	9b07      	ldr	r3, [sp, #28]
 8009330:	9704      	str	r7, [sp, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dc20      	bgt.n	8009378 <_dtoa_r+0x940>
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933a:	2b02      	cmp	r3, #2
 800933c:	dd1e      	ble.n	800937c <_dtoa_r+0x944>
 800933e:	9b00      	ldr	r3, [sp, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f47f aec0 	bne.w	80090c6 <_dtoa_r+0x68e>
 8009346:	4621      	mov	r1, r4
 8009348:	2205      	movs	r2, #5
 800934a:	4658      	mov	r0, fp
 800934c:	f000 fa9a 	bl	8009884 <__multadd>
 8009350:	4601      	mov	r1, r0
 8009352:	4604      	mov	r4, r0
 8009354:	4648      	mov	r0, r9
 8009356:	f000 fcad 	bl	8009cb4 <__mcmp>
 800935a:	2800      	cmp	r0, #0
 800935c:	f77f aeb3 	ble.w	80090c6 <_dtoa_r+0x68e>
 8009360:	4656      	mov	r6, sl
 8009362:	2331      	movs	r3, #49	@ 0x31
 8009364:	f806 3b01 	strb.w	r3, [r6], #1
 8009368:	9b04      	ldr	r3, [sp, #16]
 800936a:	3301      	adds	r3, #1
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	e6ae      	b.n	80090ce <_dtoa_r+0x696>
 8009370:	9c07      	ldr	r4, [sp, #28]
 8009372:	9704      	str	r7, [sp, #16]
 8009374:	4625      	mov	r5, r4
 8009376:	e7f3      	b.n	8009360 <_dtoa_r+0x928>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 8104 	beq.w	800958c <_dtoa_r+0xb54>
 8009384:	2e00      	cmp	r6, #0
 8009386:	dd05      	ble.n	8009394 <_dtoa_r+0x95c>
 8009388:	4629      	mov	r1, r5
 800938a:	4632      	mov	r2, r6
 800938c:	4658      	mov	r0, fp
 800938e:	f000 fc25 	bl	8009bdc <__lshift>
 8009392:	4605      	mov	r5, r0
 8009394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d05a      	beq.n	8009450 <_dtoa_r+0xa18>
 800939a:	6869      	ldr	r1, [r5, #4]
 800939c:	4658      	mov	r0, fp
 800939e:	f000 fa0f 	bl	80097c0 <_Balloc>
 80093a2:	4606      	mov	r6, r0
 80093a4:	b928      	cbnz	r0, 80093b2 <_dtoa_r+0x97a>
 80093a6:	4b84      	ldr	r3, [pc, #528]	@ (80095b8 <_dtoa_r+0xb80>)
 80093a8:	4602      	mov	r2, r0
 80093aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80093ae:	f7ff bb5a 	b.w	8008a66 <_dtoa_r+0x2e>
 80093b2:	692a      	ldr	r2, [r5, #16]
 80093b4:	3202      	adds	r2, #2
 80093b6:	0092      	lsls	r2, r2, #2
 80093b8:	f105 010c 	add.w	r1, r5, #12
 80093bc:	300c      	adds	r0, #12
 80093be:	f001 f813 	bl	800a3e8 <memcpy>
 80093c2:	2201      	movs	r2, #1
 80093c4:	4631      	mov	r1, r6
 80093c6:	4658      	mov	r0, fp
 80093c8:	f000 fc08 	bl	8009bdc <__lshift>
 80093cc:	f10a 0301 	add.w	r3, sl, #1
 80093d0:	9307      	str	r3, [sp, #28]
 80093d2:	9b00      	ldr	r3, [sp, #0]
 80093d4:	4453      	add	r3, sl
 80093d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093d8:	9b02      	ldr	r3, [sp, #8]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	462f      	mov	r7, r5
 80093e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093e2:	4605      	mov	r5, r0
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	4621      	mov	r1, r4
 80093e8:	3b01      	subs	r3, #1
 80093ea:	4648      	mov	r0, r9
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	f7ff fa98 	bl	8008922 <quorem>
 80093f2:	4639      	mov	r1, r7
 80093f4:	9002      	str	r0, [sp, #8]
 80093f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093fa:	4648      	mov	r0, r9
 80093fc:	f000 fc5a 	bl	8009cb4 <__mcmp>
 8009400:	462a      	mov	r2, r5
 8009402:	9008      	str	r0, [sp, #32]
 8009404:	4621      	mov	r1, r4
 8009406:	4658      	mov	r0, fp
 8009408:	f000 fc70 	bl	8009cec <__mdiff>
 800940c:	68c2      	ldr	r2, [r0, #12]
 800940e:	4606      	mov	r6, r0
 8009410:	bb02      	cbnz	r2, 8009454 <_dtoa_r+0xa1c>
 8009412:	4601      	mov	r1, r0
 8009414:	4648      	mov	r0, r9
 8009416:	f000 fc4d 	bl	8009cb4 <__mcmp>
 800941a:	4602      	mov	r2, r0
 800941c:	4631      	mov	r1, r6
 800941e:	4658      	mov	r0, fp
 8009420:	920e      	str	r2, [sp, #56]	@ 0x38
 8009422:	f000 fa0d 	bl	8009840 <_Bfree>
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800942a:	9e07      	ldr	r6, [sp, #28]
 800942c:	ea43 0102 	orr.w	r1, r3, r2
 8009430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009432:	4319      	orrs	r1, r3
 8009434:	d110      	bne.n	8009458 <_dtoa_r+0xa20>
 8009436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800943a:	d029      	beq.n	8009490 <_dtoa_r+0xa58>
 800943c:	9b08      	ldr	r3, [sp, #32]
 800943e:	2b00      	cmp	r3, #0
 8009440:	dd02      	ble.n	8009448 <_dtoa_r+0xa10>
 8009442:	9b02      	ldr	r3, [sp, #8]
 8009444:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009448:	9b00      	ldr	r3, [sp, #0]
 800944a:	f883 8000 	strb.w	r8, [r3]
 800944e:	e63f      	b.n	80090d0 <_dtoa_r+0x698>
 8009450:	4628      	mov	r0, r5
 8009452:	e7bb      	b.n	80093cc <_dtoa_r+0x994>
 8009454:	2201      	movs	r2, #1
 8009456:	e7e1      	b.n	800941c <_dtoa_r+0x9e4>
 8009458:	9b08      	ldr	r3, [sp, #32]
 800945a:	2b00      	cmp	r3, #0
 800945c:	db04      	blt.n	8009468 <_dtoa_r+0xa30>
 800945e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009460:	430b      	orrs	r3, r1
 8009462:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009464:	430b      	orrs	r3, r1
 8009466:	d120      	bne.n	80094aa <_dtoa_r+0xa72>
 8009468:	2a00      	cmp	r2, #0
 800946a:	dded      	ble.n	8009448 <_dtoa_r+0xa10>
 800946c:	4649      	mov	r1, r9
 800946e:	2201      	movs	r2, #1
 8009470:	4658      	mov	r0, fp
 8009472:	f000 fbb3 	bl	8009bdc <__lshift>
 8009476:	4621      	mov	r1, r4
 8009478:	4681      	mov	r9, r0
 800947a:	f000 fc1b 	bl	8009cb4 <__mcmp>
 800947e:	2800      	cmp	r0, #0
 8009480:	dc03      	bgt.n	800948a <_dtoa_r+0xa52>
 8009482:	d1e1      	bne.n	8009448 <_dtoa_r+0xa10>
 8009484:	f018 0f01 	tst.w	r8, #1
 8009488:	d0de      	beq.n	8009448 <_dtoa_r+0xa10>
 800948a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800948e:	d1d8      	bne.n	8009442 <_dtoa_r+0xa0a>
 8009490:	9a00      	ldr	r2, [sp, #0]
 8009492:	2339      	movs	r3, #57	@ 0x39
 8009494:	7013      	strb	r3, [r2, #0]
 8009496:	4633      	mov	r3, r6
 8009498:	461e      	mov	r6, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80094a0:	2a39      	cmp	r2, #57	@ 0x39
 80094a2:	d052      	beq.n	800954a <_dtoa_r+0xb12>
 80094a4:	3201      	adds	r2, #1
 80094a6:	701a      	strb	r2, [r3, #0]
 80094a8:	e612      	b.n	80090d0 <_dtoa_r+0x698>
 80094aa:	2a00      	cmp	r2, #0
 80094ac:	dd07      	ble.n	80094be <_dtoa_r+0xa86>
 80094ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094b2:	d0ed      	beq.n	8009490 <_dtoa_r+0xa58>
 80094b4:	9a00      	ldr	r2, [sp, #0]
 80094b6:	f108 0301 	add.w	r3, r8, #1
 80094ba:	7013      	strb	r3, [r2, #0]
 80094bc:	e608      	b.n	80090d0 <_dtoa_r+0x698>
 80094be:	9b07      	ldr	r3, [sp, #28]
 80094c0:	9a07      	ldr	r2, [sp, #28]
 80094c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80094c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d028      	beq.n	800951e <_dtoa_r+0xae6>
 80094cc:	4649      	mov	r1, r9
 80094ce:	2300      	movs	r3, #0
 80094d0:	220a      	movs	r2, #10
 80094d2:	4658      	mov	r0, fp
 80094d4:	f000 f9d6 	bl	8009884 <__multadd>
 80094d8:	42af      	cmp	r7, r5
 80094da:	4681      	mov	r9, r0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	f04f 020a 	mov.w	r2, #10
 80094e4:	4639      	mov	r1, r7
 80094e6:	4658      	mov	r0, fp
 80094e8:	d107      	bne.n	80094fa <_dtoa_r+0xac2>
 80094ea:	f000 f9cb 	bl	8009884 <__multadd>
 80094ee:	4607      	mov	r7, r0
 80094f0:	4605      	mov	r5, r0
 80094f2:	9b07      	ldr	r3, [sp, #28]
 80094f4:	3301      	adds	r3, #1
 80094f6:	9307      	str	r3, [sp, #28]
 80094f8:	e774      	b.n	80093e4 <_dtoa_r+0x9ac>
 80094fa:	f000 f9c3 	bl	8009884 <__multadd>
 80094fe:	4629      	mov	r1, r5
 8009500:	4607      	mov	r7, r0
 8009502:	2300      	movs	r3, #0
 8009504:	220a      	movs	r2, #10
 8009506:	4658      	mov	r0, fp
 8009508:	f000 f9bc 	bl	8009884 <__multadd>
 800950c:	4605      	mov	r5, r0
 800950e:	e7f0      	b.n	80094f2 <_dtoa_r+0xaba>
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	bfcc      	ite	gt
 8009516:	461e      	movgt	r6, r3
 8009518:	2601      	movle	r6, #1
 800951a:	4456      	add	r6, sl
 800951c:	2700      	movs	r7, #0
 800951e:	4649      	mov	r1, r9
 8009520:	2201      	movs	r2, #1
 8009522:	4658      	mov	r0, fp
 8009524:	f000 fb5a 	bl	8009bdc <__lshift>
 8009528:	4621      	mov	r1, r4
 800952a:	4681      	mov	r9, r0
 800952c:	f000 fbc2 	bl	8009cb4 <__mcmp>
 8009530:	2800      	cmp	r0, #0
 8009532:	dcb0      	bgt.n	8009496 <_dtoa_r+0xa5e>
 8009534:	d102      	bne.n	800953c <_dtoa_r+0xb04>
 8009536:	f018 0f01 	tst.w	r8, #1
 800953a:	d1ac      	bne.n	8009496 <_dtoa_r+0xa5e>
 800953c:	4633      	mov	r3, r6
 800953e:	461e      	mov	r6, r3
 8009540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009544:	2a30      	cmp	r2, #48	@ 0x30
 8009546:	d0fa      	beq.n	800953e <_dtoa_r+0xb06>
 8009548:	e5c2      	b.n	80090d0 <_dtoa_r+0x698>
 800954a:	459a      	cmp	sl, r3
 800954c:	d1a4      	bne.n	8009498 <_dtoa_r+0xa60>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	2331      	movs	r3, #49	@ 0x31
 8009556:	f88a 3000 	strb.w	r3, [sl]
 800955a:	e5b9      	b.n	80090d0 <_dtoa_r+0x698>
 800955c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800955e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80095bc <_dtoa_r+0xb84>
 8009562:	b11b      	cbz	r3, 800956c <_dtoa_r+0xb34>
 8009564:	f10a 0308 	add.w	r3, sl, #8
 8009568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	4650      	mov	r0, sl
 800956e:	b019      	add	sp, #100	@ 0x64
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009576:	2b01      	cmp	r3, #1
 8009578:	f77f ae37 	ble.w	80091ea <_dtoa_r+0x7b2>
 800957c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800957e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009580:	2001      	movs	r0, #1
 8009582:	e655      	b.n	8009230 <_dtoa_r+0x7f8>
 8009584:	9b00      	ldr	r3, [sp, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f77f aed6 	ble.w	8009338 <_dtoa_r+0x900>
 800958c:	4656      	mov	r6, sl
 800958e:	4621      	mov	r1, r4
 8009590:	4648      	mov	r0, r9
 8009592:	f7ff f9c6 	bl	8008922 <quorem>
 8009596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800959a:	f806 8b01 	strb.w	r8, [r6], #1
 800959e:	9b00      	ldr	r3, [sp, #0]
 80095a0:	eba6 020a 	sub.w	r2, r6, sl
 80095a4:	4293      	cmp	r3, r2
 80095a6:	ddb3      	ble.n	8009510 <_dtoa_r+0xad8>
 80095a8:	4649      	mov	r1, r9
 80095aa:	2300      	movs	r3, #0
 80095ac:	220a      	movs	r2, #10
 80095ae:	4658      	mov	r0, fp
 80095b0:	f000 f968 	bl	8009884 <__multadd>
 80095b4:	4681      	mov	r9, r0
 80095b6:	e7ea      	b.n	800958e <_dtoa_r+0xb56>
 80095b8:	0800b29c 	.word	0x0800b29c
 80095bc:	0800b220 	.word	0x0800b220

080095c0 <_free_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4605      	mov	r5, r0
 80095c4:	2900      	cmp	r1, #0
 80095c6:	d041      	beq.n	800964c <_free_r+0x8c>
 80095c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095cc:	1f0c      	subs	r4, r1, #4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bfb8      	it	lt
 80095d2:	18e4      	addlt	r4, r4, r3
 80095d4:	f000 f8e8 	bl	80097a8 <__malloc_lock>
 80095d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009650 <_free_r+0x90>)
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	b933      	cbnz	r3, 80095ec <_free_r+0x2c>
 80095de:	6063      	str	r3, [r4, #4]
 80095e0:	6014      	str	r4, [r2, #0]
 80095e2:	4628      	mov	r0, r5
 80095e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e8:	f000 b8e4 	b.w	80097b4 <__malloc_unlock>
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d908      	bls.n	8009602 <_free_r+0x42>
 80095f0:	6820      	ldr	r0, [r4, #0]
 80095f2:	1821      	adds	r1, r4, r0
 80095f4:	428b      	cmp	r3, r1
 80095f6:	bf01      	itttt	eq
 80095f8:	6819      	ldreq	r1, [r3, #0]
 80095fa:	685b      	ldreq	r3, [r3, #4]
 80095fc:	1809      	addeq	r1, r1, r0
 80095fe:	6021      	streq	r1, [r4, #0]
 8009600:	e7ed      	b.n	80095de <_free_r+0x1e>
 8009602:	461a      	mov	r2, r3
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	b10b      	cbz	r3, 800960c <_free_r+0x4c>
 8009608:	42a3      	cmp	r3, r4
 800960a:	d9fa      	bls.n	8009602 <_free_r+0x42>
 800960c:	6811      	ldr	r1, [r2, #0]
 800960e:	1850      	adds	r0, r2, r1
 8009610:	42a0      	cmp	r0, r4
 8009612:	d10b      	bne.n	800962c <_free_r+0x6c>
 8009614:	6820      	ldr	r0, [r4, #0]
 8009616:	4401      	add	r1, r0
 8009618:	1850      	adds	r0, r2, r1
 800961a:	4283      	cmp	r3, r0
 800961c:	6011      	str	r1, [r2, #0]
 800961e:	d1e0      	bne.n	80095e2 <_free_r+0x22>
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	6053      	str	r3, [r2, #4]
 8009626:	4408      	add	r0, r1
 8009628:	6010      	str	r0, [r2, #0]
 800962a:	e7da      	b.n	80095e2 <_free_r+0x22>
 800962c:	d902      	bls.n	8009634 <_free_r+0x74>
 800962e:	230c      	movs	r3, #12
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	e7d6      	b.n	80095e2 <_free_r+0x22>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	1821      	adds	r1, r4, r0
 8009638:	428b      	cmp	r3, r1
 800963a:	bf04      	itt	eq
 800963c:	6819      	ldreq	r1, [r3, #0]
 800963e:	685b      	ldreq	r3, [r3, #4]
 8009640:	6063      	str	r3, [r4, #4]
 8009642:	bf04      	itt	eq
 8009644:	1809      	addeq	r1, r1, r0
 8009646:	6021      	streq	r1, [r4, #0]
 8009648:	6054      	str	r4, [r2, #4]
 800964a:	e7ca      	b.n	80095e2 <_free_r+0x22>
 800964c:	bd38      	pop	{r3, r4, r5, pc}
 800964e:	bf00      	nop
 8009650:	20000e70 	.word	0x20000e70

08009654 <malloc>:
 8009654:	4b02      	ldr	r3, [pc, #8]	@ (8009660 <malloc+0xc>)
 8009656:	4601      	mov	r1, r0
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f000 b825 	b.w	80096a8 <_malloc_r>
 800965e:	bf00      	nop
 8009660:	20000128 	.word	0x20000128

08009664 <sbrk_aligned>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	4e0f      	ldr	r6, [pc, #60]	@ (80096a4 <sbrk_aligned+0x40>)
 8009668:	460c      	mov	r4, r1
 800966a:	6831      	ldr	r1, [r6, #0]
 800966c:	4605      	mov	r5, r0
 800966e:	b911      	cbnz	r1, 8009676 <sbrk_aligned+0x12>
 8009670:	f000 feaa 	bl	800a3c8 <_sbrk_r>
 8009674:	6030      	str	r0, [r6, #0]
 8009676:	4621      	mov	r1, r4
 8009678:	4628      	mov	r0, r5
 800967a:	f000 fea5 	bl	800a3c8 <_sbrk_r>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d103      	bne.n	800968a <sbrk_aligned+0x26>
 8009682:	f04f 34ff 	mov.w	r4, #4294967295
 8009686:	4620      	mov	r0, r4
 8009688:	bd70      	pop	{r4, r5, r6, pc}
 800968a:	1cc4      	adds	r4, r0, #3
 800968c:	f024 0403 	bic.w	r4, r4, #3
 8009690:	42a0      	cmp	r0, r4
 8009692:	d0f8      	beq.n	8009686 <sbrk_aligned+0x22>
 8009694:	1a21      	subs	r1, r4, r0
 8009696:	4628      	mov	r0, r5
 8009698:	f000 fe96 	bl	800a3c8 <_sbrk_r>
 800969c:	3001      	adds	r0, #1
 800969e:	d1f2      	bne.n	8009686 <sbrk_aligned+0x22>
 80096a0:	e7ef      	b.n	8009682 <sbrk_aligned+0x1e>
 80096a2:	bf00      	nop
 80096a4:	20000e6c 	.word	0x20000e6c

080096a8 <_malloc_r>:
 80096a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	1ccd      	adds	r5, r1, #3
 80096ae:	f025 0503 	bic.w	r5, r5, #3
 80096b2:	3508      	adds	r5, #8
 80096b4:	2d0c      	cmp	r5, #12
 80096b6:	bf38      	it	cc
 80096b8:	250c      	movcc	r5, #12
 80096ba:	2d00      	cmp	r5, #0
 80096bc:	4606      	mov	r6, r0
 80096be:	db01      	blt.n	80096c4 <_malloc_r+0x1c>
 80096c0:	42a9      	cmp	r1, r5
 80096c2:	d904      	bls.n	80096ce <_malloc_r+0x26>
 80096c4:	230c      	movs	r3, #12
 80096c6:	6033      	str	r3, [r6, #0]
 80096c8:	2000      	movs	r0, #0
 80096ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097a4 <_malloc_r+0xfc>
 80096d2:	f000 f869 	bl	80097a8 <__malloc_lock>
 80096d6:	f8d8 3000 	ldr.w	r3, [r8]
 80096da:	461c      	mov	r4, r3
 80096dc:	bb44      	cbnz	r4, 8009730 <_malloc_r+0x88>
 80096de:	4629      	mov	r1, r5
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff ffbf 	bl	8009664 <sbrk_aligned>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	4604      	mov	r4, r0
 80096ea:	d158      	bne.n	800979e <_malloc_r+0xf6>
 80096ec:	f8d8 4000 	ldr.w	r4, [r8]
 80096f0:	4627      	mov	r7, r4
 80096f2:	2f00      	cmp	r7, #0
 80096f4:	d143      	bne.n	800977e <_malloc_r+0xd6>
 80096f6:	2c00      	cmp	r4, #0
 80096f8:	d04b      	beq.n	8009792 <_malloc_r+0xea>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	4639      	mov	r1, r7
 80096fe:	4630      	mov	r0, r6
 8009700:	eb04 0903 	add.w	r9, r4, r3
 8009704:	f000 fe60 	bl	800a3c8 <_sbrk_r>
 8009708:	4581      	cmp	r9, r0
 800970a:	d142      	bne.n	8009792 <_malloc_r+0xea>
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	1a6d      	subs	r5, r5, r1
 8009710:	4629      	mov	r1, r5
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ffa6 	bl	8009664 <sbrk_aligned>
 8009718:	3001      	adds	r0, #1
 800971a:	d03a      	beq.n	8009792 <_malloc_r+0xea>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	442b      	add	r3, r5
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	f8d8 3000 	ldr.w	r3, [r8]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	bb62      	cbnz	r2, 8009784 <_malloc_r+0xdc>
 800972a:	f8c8 7000 	str.w	r7, [r8]
 800972e:	e00f      	b.n	8009750 <_malloc_r+0xa8>
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	1b52      	subs	r2, r2, r5
 8009734:	d420      	bmi.n	8009778 <_malloc_r+0xd0>
 8009736:	2a0b      	cmp	r2, #11
 8009738:	d917      	bls.n	800976a <_malloc_r+0xc2>
 800973a:	1961      	adds	r1, r4, r5
 800973c:	42a3      	cmp	r3, r4
 800973e:	6025      	str	r5, [r4, #0]
 8009740:	bf18      	it	ne
 8009742:	6059      	strne	r1, [r3, #4]
 8009744:	6863      	ldr	r3, [r4, #4]
 8009746:	bf08      	it	eq
 8009748:	f8c8 1000 	streq.w	r1, [r8]
 800974c:	5162      	str	r2, [r4, r5]
 800974e:	604b      	str	r3, [r1, #4]
 8009750:	4630      	mov	r0, r6
 8009752:	f000 f82f 	bl	80097b4 <__malloc_unlock>
 8009756:	f104 000b 	add.w	r0, r4, #11
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	f020 0007 	bic.w	r0, r0, #7
 8009760:	1ac2      	subs	r2, r0, r3
 8009762:	bf1c      	itt	ne
 8009764:	1a1b      	subne	r3, r3, r0
 8009766:	50a3      	strne	r3, [r4, r2]
 8009768:	e7af      	b.n	80096ca <_malloc_r+0x22>
 800976a:	6862      	ldr	r2, [r4, #4]
 800976c:	42a3      	cmp	r3, r4
 800976e:	bf0c      	ite	eq
 8009770:	f8c8 2000 	streq.w	r2, [r8]
 8009774:	605a      	strne	r2, [r3, #4]
 8009776:	e7eb      	b.n	8009750 <_malloc_r+0xa8>
 8009778:	4623      	mov	r3, r4
 800977a:	6864      	ldr	r4, [r4, #4]
 800977c:	e7ae      	b.n	80096dc <_malloc_r+0x34>
 800977e:	463c      	mov	r4, r7
 8009780:	687f      	ldr	r7, [r7, #4]
 8009782:	e7b6      	b.n	80096f2 <_malloc_r+0x4a>
 8009784:	461a      	mov	r2, r3
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	42a3      	cmp	r3, r4
 800978a:	d1fb      	bne.n	8009784 <_malloc_r+0xdc>
 800978c:	2300      	movs	r3, #0
 800978e:	6053      	str	r3, [r2, #4]
 8009790:	e7de      	b.n	8009750 <_malloc_r+0xa8>
 8009792:	230c      	movs	r3, #12
 8009794:	6033      	str	r3, [r6, #0]
 8009796:	4630      	mov	r0, r6
 8009798:	f000 f80c 	bl	80097b4 <__malloc_unlock>
 800979c:	e794      	b.n	80096c8 <_malloc_r+0x20>
 800979e:	6005      	str	r5, [r0, #0]
 80097a0:	e7d6      	b.n	8009750 <_malloc_r+0xa8>
 80097a2:	bf00      	nop
 80097a4:	20000e70 	.word	0x20000e70

080097a8 <__malloc_lock>:
 80097a8:	4801      	ldr	r0, [pc, #4]	@ (80097b0 <__malloc_lock+0x8>)
 80097aa:	f7ff b8b8 	b.w	800891e <__retarget_lock_acquire_recursive>
 80097ae:	bf00      	nop
 80097b0:	20000e68 	.word	0x20000e68

080097b4 <__malloc_unlock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	@ (80097bc <__malloc_unlock+0x8>)
 80097b6:	f7ff b8b3 	b.w	8008920 <__retarget_lock_release_recursive>
 80097ba:	bf00      	nop
 80097bc:	20000e68 	.word	0x20000e68

080097c0 <_Balloc>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	69c6      	ldr	r6, [r0, #28]
 80097c4:	4604      	mov	r4, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	b976      	cbnz	r6, 80097e8 <_Balloc+0x28>
 80097ca:	2010      	movs	r0, #16
 80097cc:	f7ff ff42 	bl	8009654 <malloc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	61e0      	str	r0, [r4, #28]
 80097d4:	b920      	cbnz	r0, 80097e0 <_Balloc+0x20>
 80097d6:	4b18      	ldr	r3, [pc, #96]	@ (8009838 <_Balloc+0x78>)
 80097d8:	4818      	ldr	r0, [pc, #96]	@ (800983c <_Balloc+0x7c>)
 80097da:	216b      	movs	r1, #107	@ 0x6b
 80097dc:	f000 fe12 	bl	800a404 <__assert_func>
 80097e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097e4:	6006      	str	r6, [r0, #0]
 80097e6:	60c6      	str	r6, [r0, #12]
 80097e8:	69e6      	ldr	r6, [r4, #28]
 80097ea:	68f3      	ldr	r3, [r6, #12]
 80097ec:	b183      	cbz	r3, 8009810 <_Balloc+0x50>
 80097ee:	69e3      	ldr	r3, [r4, #28]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097f6:	b9b8      	cbnz	r0, 8009828 <_Balloc+0x68>
 80097f8:	2101      	movs	r1, #1
 80097fa:	fa01 f605 	lsl.w	r6, r1, r5
 80097fe:	1d72      	adds	r2, r6, #5
 8009800:	0092      	lsls	r2, r2, #2
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fe1c 	bl	800a440 <_calloc_r>
 8009808:	b160      	cbz	r0, 8009824 <_Balloc+0x64>
 800980a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800980e:	e00e      	b.n	800982e <_Balloc+0x6e>
 8009810:	2221      	movs	r2, #33	@ 0x21
 8009812:	2104      	movs	r1, #4
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fe13 	bl	800a440 <_calloc_r>
 800981a:	69e3      	ldr	r3, [r4, #28]
 800981c:	60f0      	str	r0, [r6, #12]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e4      	bne.n	80097ee <_Balloc+0x2e>
 8009824:	2000      	movs	r0, #0
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	6802      	ldr	r2, [r0, #0]
 800982a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800982e:	2300      	movs	r3, #0
 8009830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009834:	e7f7      	b.n	8009826 <_Balloc+0x66>
 8009836:	bf00      	nop
 8009838:	0800b22d 	.word	0x0800b22d
 800983c:	0800b2ad 	.word	0x0800b2ad

08009840 <_Bfree>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	69c6      	ldr	r6, [r0, #28]
 8009844:	4605      	mov	r5, r0
 8009846:	460c      	mov	r4, r1
 8009848:	b976      	cbnz	r6, 8009868 <_Bfree+0x28>
 800984a:	2010      	movs	r0, #16
 800984c:	f7ff ff02 	bl	8009654 <malloc>
 8009850:	4602      	mov	r2, r0
 8009852:	61e8      	str	r0, [r5, #28]
 8009854:	b920      	cbnz	r0, 8009860 <_Bfree+0x20>
 8009856:	4b09      	ldr	r3, [pc, #36]	@ (800987c <_Bfree+0x3c>)
 8009858:	4809      	ldr	r0, [pc, #36]	@ (8009880 <_Bfree+0x40>)
 800985a:	218f      	movs	r1, #143	@ 0x8f
 800985c:	f000 fdd2 	bl	800a404 <__assert_func>
 8009860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009864:	6006      	str	r6, [r0, #0]
 8009866:	60c6      	str	r6, [r0, #12]
 8009868:	b13c      	cbz	r4, 800987a <_Bfree+0x3a>
 800986a:	69eb      	ldr	r3, [r5, #28]
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009874:	6021      	str	r1, [r4, #0]
 8009876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	0800b22d 	.word	0x0800b22d
 8009880:	0800b2ad 	.word	0x0800b2ad

08009884 <__multadd>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	690d      	ldr	r5, [r1, #16]
 800988a:	4607      	mov	r7, r0
 800988c:	460c      	mov	r4, r1
 800988e:	461e      	mov	r6, r3
 8009890:	f101 0c14 	add.w	ip, r1, #20
 8009894:	2000      	movs	r0, #0
 8009896:	f8dc 3000 	ldr.w	r3, [ip]
 800989a:	b299      	uxth	r1, r3
 800989c:	fb02 6101 	mla	r1, r2, r1, r6
 80098a0:	0c1e      	lsrs	r6, r3, #16
 80098a2:	0c0b      	lsrs	r3, r1, #16
 80098a4:	fb02 3306 	mla	r3, r2, r6, r3
 80098a8:	b289      	uxth	r1, r1
 80098aa:	3001      	adds	r0, #1
 80098ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098b0:	4285      	cmp	r5, r0
 80098b2:	f84c 1b04 	str.w	r1, [ip], #4
 80098b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098ba:	dcec      	bgt.n	8009896 <__multadd+0x12>
 80098bc:	b30e      	cbz	r6, 8009902 <__multadd+0x7e>
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	dc19      	bgt.n	80098f8 <__multadd+0x74>
 80098c4:	6861      	ldr	r1, [r4, #4]
 80098c6:	4638      	mov	r0, r7
 80098c8:	3101      	adds	r1, #1
 80098ca:	f7ff ff79 	bl	80097c0 <_Balloc>
 80098ce:	4680      	mov	r8, r0
 80098d0:	b928      	cbnz	r0, 80098de <__multadd+0x5a>
 80098d2:	4602      	mov	r2, r0
 80098d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009908 <__multadd+0x84>)
 80098d6:	480d      	ldr	r0, [pc, #52]	@ (800990c <__multadd+0x88>)
 80098d8:	21ba      	movs	r1, #186	@ 0xba
 80098da:	f000 fd93 	bl	800a404 <__assert_func>
 80098de:	6922      	ldr	r2, [r4, #16]
 80098e0:	3202      	adds	r2, #2
 80098e2:	f104 010c 	add.w	r1, r4, #12
 80098e6:	0092      	lsls	r2, r2, #2
 80098e8:	300c      	adds	r0, #12
 80098ea:	f000 fd7d 	bl	800a3e8 <memcpy>
 80098ee:	4621      	mov	r1, r4
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7ff ffa5 	bl	8009840 <_Bfree>
 80098f6:	4644      	mov	r4, r8
 80098f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098fc:	3501      	adds	r5, #1
 80098fe:	615e      	str	r6, [r3, #20]
 8009900:	6125      	str	r5, [r4, #16]
 8009902:	4620      	mov	r0, r4
 8009904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009908:	0800b29c 	.word	0x0800b29c
 800990c:	0800b2ad 	.word	0x0800b2ad

08009910 <__hi0bits>:
 8009910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009914:	4603      	mov	r3, r0
 8009916:	bf36      	itet	cc
 8009918:	0403      	lslcc	r3, r0, #16
 800991a:	2000      	movcs	r0, #0
 800991c:	2010      	movcc	r0, #16
 800991e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009922:	bf3c      	itt	cc
 8009924:	021b      	lslcc	r3, r3, #8
 8009926:	3008      	addcc	r0, #8
 8009928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800992c:	bf3c      	itt	cc
 800992e:	011b      	lslcc	r3, r3, #4
 8009930:	3004      	addcc	r0, #4
 8009932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009936:	bf3c      	itt	cc
 8009938:	009b      	lslcc	r3, r3, #2
 800993a:	3002      	addcc	r0, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	db05      	blt.n	800994c <__hi0bits+0x3c>
 8009940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009944:	f100 0001 	add.w	r0, r0, #1
 8009948:	bf08      	it	eq
 800994a:	2020      	moveq	r0, #32
 800994c:	4770      	bx	lr

0800994e <__lo0bits>:
 800994e:	6803      	ldr	r3, [r0, #0]
 8009950:	4602      	mov	r2, r0
 8009952:	f013 0007 	ands.w	r0, r3, #7
 8009956:	d00b      	beq.n	8009970 <__lo0bits+0x22>
 8009958:	07d9      	lsls	r1, r3, #31
 800995a:	d421      	bmi.n	80099a0 <__lo0bits+0x52>
 800995c:	0798      	lsls	r0, r3, #30
 800995e:	bf49      	itett	mi
 8009960:	085b      	lsrmi	r3, r3, #1
 8009962:	089b      	lsrpl	r3, r3, #2
 8009964:	2001      	movmi	r0, #1
 8009966:	6013      	strmi	r3, [r2, #0]
 8009968:	bf5c      	itt	pl
 800996a:	6013      	strpl	r3, [r2, #0]
 800996c:	2002      	movpl	r0, #2
 800996e:	4770      	bx	lr
 8009970:	b299      	uxth	r1, r3
 8009972:	b909      	cbnz	r1, 8009978 <__lo0bits+0x2a>
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	2010      	movs	r0, #16
 8009978:	b2d9      	uxtb	r1, r3
 800997a:	b909      	cbnz	r1, 8009980 <__lo0bits+0x32>
 800997c:	3008      	adds	r0, #8
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	0719      	lsls	r1, r3, #28
 8009982:	bf04      	itt	eq
 8009984:	091b      	lsreq	r3, r3, #4
 8009986:	3004      	addeq	r0, #4
 8009988:	0799      	lsls	r1, r3, #30
 800998a:	bf04      	itt	eq
 800998c:	089b      	lsreq	r3, r3, #2
 800998e:	3002      	addeq	r0, #2
 8009990:	07d9      	lsls	r1, r3, #31
 8009992:	d403      	bmi.n	800999c <__lo0bits+0x4e>
 8009994:	085b      	lsrs	r3, r3, #1
 8009996:	f100 0001 	add.w	r0, r0, #1
 800999a:	d003      	beq.n	80099a4 <__lo0bits+0x56>
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	4770      	bx	lr
 80099a0:	2000      	movs	r0, #0
 80099a2:	4770      	bx	lr
 80099a4:	2020      	movs	r0, #32
 80099a6:	4770      	bx	lr

080099a8 <__i2b>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	2101      	movs	r1, #1
 80099ae:	f7ff ff07 	bl	80097c0 <_Balloc>
 80099b2:	4602      	mov	r2, r0
 80099b4:	b928      	cbnz	r0, 80099c2 <__i2b+0x1a>
 80099b6:	4b05      	ldr	r3, [pc, #20]	@ (80099cc <__i2b+0x24>)
 80099b8:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <__i2b+0x28>)
 80099ba:	f240 1145 	movw	r1, #325	@ 0x145
 80099be:	f000 fd21 	bl	800a404 <__assert_func>
 80099c2:	2301      	movs	r3, #1
 80099c4:	6144      	str	r4, [r0, #20]
 80099c6:	6103      	str	r3, [r0, #16]
 80099c8:	bd10      	pop	{r4, pc}
 80099ca:	bf00      	nop
 80099cc:	0800b29c 	.word	0x0800b29c
 80099d0:	0800b2ad 	.word	0x0800b2ad

080099d4 <__multiply>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	4614      	mov	r4, r2
 80099da:	690a      	ldr	r2, [r1, #16]
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	429a      	cmp	r2, r3
 80099e0:	bfa8      	it	ge
 80099e2:	4623      	movge	r3, r4
 80099e4:	460f      	mov	r7, r1
 80099e6:	bfa4      	itt	ge
 80099e8:	460c      	movge	r4, r1
 80099ea:	461f      	movge	r7, r3
 80099ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80099f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80099f4:	68a3      	ldr	r3, [r4, #8]
 80099f6:	6861      	ldr	r1, [r4, #4]
 80099f8:	eb0a 0609 	add.w	r6, sl, r9
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	b085      	sub	sp, #20
 8009a00:	bfb8      	it	lt
 8009a02:	3101      	addlt	r1, #1
 8009a04:	f7ff fedc 	bl	80097c0 <_Balloc>
 8009a08:	b930      	cbnz	r0, 8009a18 <__multiply+0x44>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4b44      	ldr	r3, [pc, #272]	@ (8009b20 <__multiply+0x14c>)
 8009a0e:	4845      	ldr	r0, [pc, #276]	@ (8009b24 <__multiply+0x150>)
 8009a10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a14:	f000 fcf6 	bl	800a404 <__assert_func>
 8009a18:	f100 0514 	add.w	r5, r0, #20
 8009a1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a20:	462b      	mov	r3, r5
 8009a22:	2200      	movs	r2, #0
 8009a24:	4543      	cmp	r3, r8
 8009a26:	d321      	bcc.n	8009a6c <__multiply+0x98>
 8009a28:	f107 0114 	add.w	r1, r7, #20
 8009a2c:	f104 0214 	add.w	r2, r4, #20
 8009a30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	1b13      	subs	r3, r2, r4
 8009a3c:	3b15      	subs	r3, #21
 8009a3e:	f023 0303 	bic.w	r3, r3, #3
 8009a42:	3304      	adds	r3, #4
 8009a44:	f104 0715 	add.w	r7, r4, #21
 8009a48:	42ba      	cmp	r2, r7
 8009a4a:	bf38      	it	cc
 8009a4c:	2304      	movcc	r3, #4
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	9b02      	ldr	r3, [sp, #8]
 8009a52:	9103      	str	r1, [sp, #12]
 8009a54:	428b      	cmp	r3, r1
 8009a56:	d80c      	bhi.n	8009a72 <__multiply+0x9e>
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	dd03      	ble.n	8009a64 <__multiply+0x90>
 8009a5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d05b      	beq.n	8009b1c <__multiply+0x148>
 8009a64:	6106      	str	r6, [r0, #16]
 8009a66:	b005      	add	sp, #20
 8009a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6c:	f843 2b04 	str.w	r2, [r3], #4
 8009a70:	e7d8      	b.n	8009a24 <__multiply+0x50>
 8009a72:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a76:	f1ba 0f00 	cmp.w	sl, #0
 8009a7a:	d024      	beq.n	8009ac6 <__multiply+0xf2>
 8009a7c:	f104 0e14 	add.w	lr, r4, #20
 8009a80:	46a9      	mov	r9, r5
 8009a82:	f04f 0c00 	mov.w	ip, #0
 8009a86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a8a:	f8d9 3000 	ldr.w	r3, [r9]
 8009a8e:	fa1f fb87 	uxth.w	fp, r7
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009a9c:	f8d9 7000 	ldr.w	r7, [r9]
 8009aa0:	4463      	add	r3, ip
 8009aa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009aa6:	fb0a c70b 	mla	r7, sl, fp, ip
 8009aaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ab4:	4572      	cmp	r2, lr
 8009ab6:	f849 3b04 	str.w	r3, [r9], #4
 8009aba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009abe:	d8e2      	bhi.n	8009a86 <__multiply+0xb2>
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	f845 c003 	str.w	ip, [r5, r3]
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009acc:	3104      	adds	r1, #4
 8009ace:	f1b9 0f00 	cmp.w	r9, #0
 8009ad2:	d021      	beq.n	8009b18 <__multiply+0x144>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	f104 0c14 	add.w	ip, r4, #20
 8009ada:	46ae      	mov	lr, r5
 8009adc:	f04f 0a00 	mov.w	sl, #0
 8009ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8009ae4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009ae8:	fb09 770b 	mla	r7, r9, fp, r7
 8009aec:	4457      	add	r7, sl
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009af4:	f84e 3b04 	str.w	r3, [lr], #4
 8009af8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b00:	f8be 3000 	ldrh.w	r3, [lr]
 8009b04:	fb09 330a 	mla	r3, r9, sl, r3
 8009b08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b0c:	4562      	cmp	r2, ip
 8009b0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b12:	d8e5      	bhi.n	8009ae0 <__multiply+0x10c>
 8009b14:	9f01      	ldr	r7, [sp, #4]
 8009b16:	51eb      	str	r3, [r5, r7]
 8009b18:	3504      	adds	r5, #4
 8009b1a:	e799      	b.n	8009a50 <__multiply+0x7c>
 8009b1c:	3e01      	subs	r6, #1
 8009b1e:	e79b      	b.n	8009a58 <__multiply+0x84>
 8009b20:	0800b29c 	.word	0x0800b29c
 8009b24:	0800b2ad 	.word	0x0800b2ad

08009b28 <__pow5mult>:
 8009b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	4615      	mov	r5, r2
 8009b2e:	f012 0203 	ands.w	r2, r2, #3
 8009b32:	4607      	mov	r7, r0
 8009b34:	460e      	mov	r6, r1
 8009b36:	d007      	beq.n	8009b48 <__pow5mult+0x20>
 8009b38:	4c25      	ldr	r4, [pc, #148]	@ (8009bd0 <__pow5mult+0xa8>)
 8009b3a:	3a01      	subs	r2, #1
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b42:	f7ff fe9f 	bl	8009884 <__multadd>
 8009b46:	4606      	mov	r6, r0
 8009b48:	10ad      	asrs	r5, r5, #2
 8009b4a:	d03d      	beq.n	8009bc8 <__pow5mult+0xa0>
 8009b4c:	69fc      	ldr	r4, [r7, #28]
 8009b4e:	b97c      	cbnz	r4, 8009b70 <__pow5mult+0x48>
 8009b50:	2010      	movs	r0, #16
 8009b52:	f7ff fd7f 	bl	8009654 <malloc>
 8009b56:	4602      	mov	r2, r0
 8009b58:	61f8      	str	r0, [r7, #28]
 8009b5a:	b928      	cbnz	r0, 8009b68 <__pow5mult+0x40>
 8009b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bd4 <__pow5mult+0xac>)
 8009b5e:	481e      	ldr	r0, [pc, #120]	@ (8009bd8 <__pow5mult+0xb0>)
 8009b60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b64:	f000 fc4e 	bl	800a404 <__assert_func>
 8009b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b6c:	6004      	str	r4, [r0, #0]
 8009b6e:	60c4      	str	r4, [r0, #12]
 8009b70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b78:	b94c      	cbnz	r4, 8009b8e <__pow5mult+0x66>
 8009b7a:	f240 2171 	movw	r1, #625	@ 0x271
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f7ff ff12 	bl	80099a8 <__i2b>
 8009b84:	2300      	movs	r3, #0
 8009b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	f04f 0900 	mov.w	r9, #0
 8009b92:	07eb      	lsls	r3, r5, #31
 8009b94:	d50a      	bpl.n	8009bac <__pow5mult+0x84>
 8009b96:	4631      	mov	r1, r6
 8009b98:	4622      	mov	r2, r4
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f7ff ff1a 	bl	80099d4 <__multiply>
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f7ff fe4b 	bl	8009840 <_Bfree>
 8009baa:	4646      	mov	r6, r8
 8009bac:	106d      	asrs	r5, r5, #1
 8009bae:	d00b      	beq.n	8009bc8 <__pow5mult+0xa0>
 8009bb0:	6820      	ldr	r0, [r4, #0]
 8009bb2:	b938      	cbnz	r0, 8009bc4 <__pow5mult+0x9c>
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff ff0b 	bl	80099d4 <__multiply>
 8009bbe:	6020      	str	r0, [r4, #0]
 8009bc0:	f8c0 9000 	str.w	r9, [r0]
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	e7e4      	b.n	8009b92 <__pow5mult+0x6a>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bce:	bf00      	nop
 8009bd0:	0800b308 	.word	0x0800b308
 8009bd4:	0800b22d 	.word	0x0800b22d
 8009bd8:	0800b2ad 	.word	0x0800b2ad

08009bdc <__lshift>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	6849      	ldr	r1, [r1, #4]
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	4607      	mov	r7, r0
 8009bee:	4691      	mov	r9, r2
 8009bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bf4:	f108 0601 	add.w	r6, r8, #1
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	db0b      	blt.n	8009c14 <__lshift+0x38>
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff fddf 	bl	80097c0 <_Balloc>
 8009c02:	4605      	mov	r5, r0
 8009c04:	b948      	cbnz	r0, 8009c1a <__lshift+0x3e>
 8009c06:	4602      	mov	r2, r0
 8009c08:	4b28      	ldr	r3, [pc, #160]	@ (8009cac <__lshift+0xd0>)
 8009c0a:	4829      	ldr	r0, [pc, #164]	@ (8009cb0 <__lshift+0xd4>)
 8009c0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c10:	f000 fbf8 	bl	800a404 <__assert_func>
 8009c14:	3101      	adds	r1, #1
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	e7ee      	b.n	8009bf8 <__lshift+0x1c>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f100 0114 	add.w	r1, r0, #20
 8009c20:	f100 0210 	add.w	r2, r0, #16
 8009c24:	4618      	mov	r0, r3
 8009c26:	4553      	cmp	r3, sl
 8009c28:	db33      	blt.n	8009c92 <__lshift+0xb6>
 8009c2a:	6920      	ldr	r0, [r4, #16]
 8009c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c30:	f104 0314 	add.w	r3, r4, #20
 8009c34:	f019 091f 	ands.w	r9, r9, #31
 8009c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c40:	d02b      	beq.n	8009c9a <__lshift+0xbe>
 8009c42:	f1c9 0e20 	rsb	lr, r9, #32
 8009c46:	468a      	mov	sl, r1
 8009c48:	2200      	movs	r2, #0
 8009c4a:	6818      	ldr	r0, [r3, #0]
 8009c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c50:	4310      	orrs	r0, r2
 8009c52:	f84a 0b04 	str.w	r0, [sl], #4
 8009c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5a:	459c      	cmp	ip, r3
 8009c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c60:	d8f3      	bhi.n	8009c4a <__lshift+0x6e>
 8009c62:	ebac 0304 	sub.w	r3, ip, r4
 8009c66:	3b15      	subs	r3, #21
 8009c68:	f023 0303 	bic.w	r3, r3, #3
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	f104 0015 	add.w	r0, r4, #21
 8009c72:	4584      	cmp	ip, r0
 8009c74:	bf38      	it	cc
 8009c76:	2304      	movcc	r3, #4
 8009c78:	50ca      	str	r2, [r1, r3]
 8009c7a:	b10a      	cbz	r2, 8009c80 <__lshift+0xa4>
 8009c7c:	f108 0602 	add.w	r6, r8, #2
 8009c80:	3e01      	subs	r6, #1
 8009c82:	4638      	mov	r0, r7
 8009c84:	612e      	str	r6, [r5, #16]
 8009c86:	4621      	mov	r1, r4
 8009c88:	f7ff fdda 	bl	8009840 <_Bfree>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c96:	3301      	adds	r3, #1
 8009c98:	e7c5      	b.n	8009c26 <__lshift+0x4a>
 8009c9a:	3904      	subs	r1, #4
 8009c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ca4:	459c      	cmp	ip, r3
 8009ca6:	d8f9      	bhi.n	8009c9c <__lshift+0xc0>
 8009ca8:	e7ea      	b.n	8009c80 <__lshift+0xa4>
 8009caa:	bf00      	nop
 8009cac:	0800b29c 	.word	0x0800b29c
 8009cb0:	0800b2ad 	.word	0x0800b2ad

08009cb4 <__mcmp>:
 8009cb4:	690a      	ldr	r2, [r1, #16]
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	6900      	ldr	r0, [r0, #16]
 8009cba:	1a80      	subs	r0, r0, r2
 8009cbc:	b530      	push	{r4, r5, lr}
 8009cbe:	d10e      	bne.n	8009cde <__mcmp+0x2a>
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	3114      	adds	r1, #20
 8009cc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cd4:	4295      	cmp	r5, r2
 8009cd6:	d003      	beq.n	8009ce0 <__mcmp+0x2c>
 8009cd8:	d205      	bcs.n	8009ce6 <__mcmp+0x32>
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	bd30      	pop	{r4, r5, pc}
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	d3f3      	bcc.n	8009ccc <__mcmp+0x18>
 8009ce4:	e7fb      	b.n	8009cde <__mcmp+0x2a>
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7f9      	b.n	8009cde <__mcmp+0x2a>
	...

08009cec <__mdiff>:
 8009cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	4689      	mov	r9, r1
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	f7ff ffdb 	bl	8009cb4 <__mcmp>
 8009cfe:	1e05      	subs	r5, r0, #0
 8009d00:	d112      	bne.n	8009d28 <__mdiff+0x3c>
 8009d02:	4629      	mov	r1, r5
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff fd5b 	bl	80097c0 <_Balloc>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	b928      	cbnz	r0, 8009d1a <__mdiff+0x2e>
 8009d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e0c <__mdiff+0x120>)
 8009d10:	f240 2137 	movw	r1, #567	@ 0x237
 8009d14:	483e      	ldr	r0, [pc, #248]	@ (8009e10 <__mdiff+0x124>)
 8009d16:	f000 fb75 	bl	800a404 <__assert_func>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d20:	4610      	mov	r0, r2
 8009d22:	b003      	add	sp, #12
 8009d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d28:	bfbc      	itt	lt
 8009d2a:	464b      	movlt	r3, r9
 8009d2c:	46a1      	movlt	r9, r4
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d34:	bfba      	itte	lt
 8009d36:	461c      	movlt	r4, r3
 8009d38:	2501      	movlt	r5, #1
 8009d3a:	2500      	movge	r5, #0
 8009d3c:	f7ff fd40 	bl	80097c0 <_Balloc>
 8009d40:	4602      	mov	r2, r0
 8009d42:	b918      	cbnz	r0, 8009d4c <__mdiff+0x60>
 8009d44:	4b31      	ldr	r3, [pc, #196]	@ (8009e0c <__mdiff+0x120>)
 8009d46:	f240 2145 	movw	r1, #581	@ 0x245
 8009d4a:	e7e3      	b.n	8009d14 <__mdiff+0x28>
 8009d4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d50:	6926      	ldr	r6, [r4, #16]
 8009d52:	60c5      	str	r5, [r0, #12]
 8009d54:	f109 0310 	add.w	r3, r9, #16
 8009d58:	f109 0514 	add.w	r5, r9, #20
 8009d5c:	f104 0e14 	add.w	lr, r4, #20
 8009d60:	f100 0b14 	add.w	fp, r0, #20
 8009d64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	46d9      	mov	r9, fp
 8009d70:	f04f 0c00 	mov.w	ip, #0
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	fa1f f38a 	uxth.w	r3, sl
 8009d84:	4619      	mov	r1, r3
 8009d86:	b283      	uxth	r3, r0
 8009d88:	1acb      	subs	r3, r1, r3
 8009d8a:	0c00      	lsrs	r0, r0, #16
 8009d8c:	4463      	add	r3, ip
 8009d8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d9c:	4576      	cmp	r6, lr
 8009d9e:	f849 3b04 	str.w	r3, [r9], #4
 8009da2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009da6:	d8e5      	bhi.n	8009d74 <__mdiff+0x88>
 8009da8:	1b33      	subs	r3, r6, r4
 8009daa:	3b15      	subs	r3, #21
 8009dac:	f023 0303 	bic.w	r3, r3, #3
 8009db0:	3415      	adds	r4, #21
 8009db2:	3304      	adds	r3, #4
 8009db4:	42a6      	cmp	r6, r4
 8009db6:	bf38      	it	cc
 8009db8:	2304      	movcc	r3, #4
 8009dba:	441d      	add	r5, r3
 8009dbc:	445b      	add	r3, fp
 8009dbe:	461e      	mov	r6, r3
 8009dc0:	462c      	mov	r4, r5
 8009dc2:	4544      	cmp	r4, r8
 8009dc4:	d30e      	bcc.n	8009de4 <__mdiff+0xf8>
 8009dc6:	f108 0103 	add.w	r1, r8, #3
 8009dca:	1b49      	subs	r1, r1, r5
 8009dcc:	f021 0103 	bic.w	r1, r1, #3
 8009dd0:	3d03      	subs	r5, #3
 8009dd2:	45a8      	cmp	r8, r5
 8009dd4:	bf38      	it	cc
 8009dd6:	2100      	movcc	r1, #0
 8009dd8:	440b      	add	r3, r1
 8009dda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dde:	b191      	cbz	r1, 8009e06 <__mdiff+0x11a>
 8009de0:	6117      	str	r7, [r2, #16]
 8009de2:	e79d      	b.n	8009d20 <__mdiff+0x34>
 8009de4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009de8:	46e6      	mov	lr, ip
 8009dea:	0c08      	lsrs	r0, r1, #16
 8009dec:	fa1c fc81 	uxtah	ip, ip, r1
 8009df0:	4471      	add	r1, lr
 8009df2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009df6:	b289      	uxth	r1, r1
 8009df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009dfc:	f846 1b04 	str.w	r1, [r6], #4
 8009e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e04:	e7dd      	b.n	8009dc2 <__mdiff+0xd6>
 8009e06:	3f01      	subs	r7, #1
 8009e08:	e7e7      	b.n	8009dda <__mdiff+0xee>
 8009e0a:	bf00      	nop
 8009e0c:	0800b29c 	.word	0x0800b29c
 8009e10:	0800b2ad 	.word	0x0800b2ad

08009e14 <__d2b>:
 8009e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e18:	460f      	mov	r7, r1
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	ec59 8b10 	vmov	r8, r9, d0
 8009e20:	4616      	mov	r6, r2
 8009e22:	f7ff fccd 	bl	80097c0 <_Balloc>
 8009e26:	4604      	mov	r4, r0
 8009e28:	b930      	cbnz	r0, 8009e38 <__d2b+0x24>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4b23      	ldr	r3, [pc, #140]	@ (8009ebc <__d2b+0xa8>)
 8009e2e:	4824      	ldr	r0, [pc, #144]	@ (8009ec0 <__d2b+0xac>)
 8009e30:	f240 310f 	movw	r1, #783	@ 0x30f
 8009e34:	f000 fae6 	bl	800a404 <__assert_func>
 8009e38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e40:	b10d      	cbz	r5, 8009e46 <__d2b+0x32>
 8009e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	f1b8 0300 	subs.w	r3, r8, #0
 8009e4c:	d023      	beq.n	8009e96 <__d2b+0x82>
 8009e4e:	4668      	mov	r0, sp
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	f7ff fd7c 	bl	800994e <__lo0bits>
 8009e56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e5a:	b1d0      	cbz	r0, 8009e92 <__d2b+0x7e>
 8009e5c:	f1c0 0320 	rsb	r3, r0, #32
 8009e60:	fa02 f303 	lsl.w	r3, r2, r3
 8009e64:	430b      	orrs	r3, r1
 8009e66:	40c2      	lsrs	r2, r0
 8009e68:	6163      	str	r3, [r4, #20]
 8009e6a:	9201      	str	r2, [sp, #4]
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	61a3      	str	r3, [r4, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	bf0c      	ite	eq
 8009e74:	2201      	moveq	r2, #1
 8009e76:	2202      	movne	r2, #2
 8009e78:	6122      	str	r2, [r4, #16]
 8009e7a:	b1a5      	cbz	r5, 8009ea6 <__d2b+0x92>
 8009e7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e80:	4405      	add	r5, r0
 8009e82:	603d      	str	r5, [r7, #0]
 8009e84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e88:	6030      	str	r0, [r6, #0]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	b003      	add	sp, #12
 8009e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e92:	6161      	str	r1, [r4, #20]
 8009e94:	e7ea      	b.n	8009e6c <__d2b+0x58>
 8009e96:	a801      	add	r0, sp, #4
 8009e98:	f7ff fd59 	bl	800994e <__lo0bits>
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	3020      	adds	r0, #32
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	e7e8      	b.n	8009e78 <__d2b+0x64>
 8009ea6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009eae:	6038      	str	r0, [r7, #0]
 8009eb0:	6918      	ldr	r0, [r3, #16]
 8009eb2:	f7ff fd2d 	bl	8009910 <__hi0bits>
 8009eb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009eba:	e7e5      	b.n	8009e88 <__d2b+0x74>
 8009ebc:	0800b29c 	.word	0x0800b29c
 8009ec0:	0800b2ad 	.word	0x0800b2ad

08009ec4 <__sfputc_r>:
 8009ec4:	6893      	ldr	r3, [r2, #8]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	b410      	push	{r4}
 8009ecc:	6093      	str	r3, [r2, #8]
 8009ece:	da08      	bge.n	8009ee2 <__sfputc_r+0x1e>
 8009ed0:	6994      	ldr	r4, [r2, #24]
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	db01      	blt.n	8009eda <__sfputc_r+0x16>
 8009ed6:	290a      	cmp	r1, #10
 8009ed8:	d103      	bne.n	8009ee2 <__sfputc_r+0x1e>
 8009eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ede:	f000 b9df 	b.w	800a2a0 <__swbuf_r>
 8009ee2:	6813      	ldr	r3, [r2, #0]
 8009ee4:	1c58      	adds	r0, r3, #1
 8009ee6:	6010      	str	r0, [r2, #0]
 8009ee8:	7019      	strb	r1, [r3, #0]
 8009eea:	4608      	mov	r0, r1
 8009eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <__sfputs_r>:
 8009ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	4614      	mov	r4, r2
 8009efa:	18d5      	adds	r5, r2, r3
 8009efc:	42ac      	cmp	r4, r5
 8009efe:	d101      	bne.n	8009f04 <__sfputs_r+0x12>
 8009f00:	2000      	movs	r0, #0
 8009f02:	e007      	b.n	8009f14 <__sfputs_r+0x22>
 8009f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f08:	463a      	mov	r2, r7
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff ffda 	bl	8009ec4 <__sfputc_r>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d1f3      	bne.n	8009efc <__sfputs_r+0xa>
 8009f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f18 <_vfiprintf_r>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	b09d      	sub	sp, #116	@ 0x74
 8009f20:	4614      	mov	r4, r2
 8009f22:	4698      	mov	r8, r3
 8009f24:	4606      	mov	r6, r0
 8009f26:	b118      	cbz	r0, 8009f30 <_vfiprintf_r+0x18>
 8009f28:	6a03      	ldr	r3, [r0, #32]
 8009f2a:	b90b      	cbnz	r3, 8009f30 <_vfiprintf_r+0x18>
 8009f2c:	f7fe fbee 	bl	800870c <__sinit>
 8009f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_vfiprintf_r+0x2a>
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_vfiprintf_r+0x2a>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f3e:	f7fe fcee 	bl	800891e <__retarget_lock_acquire_recursive>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	071b      	lsls	r3, r3, #28
 8009f46:	d501      	bpl.n	8009f4c <_vfiprintf_r+0x34>
 8009f48:	692b      	ldr	r3, [r5, #16]
 8009f4a:	b99b      	cbnz	r3, 8009f74 <_vfiprintf_r+0x5c>
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f000 f9e4 	bl	800a31c <__swsetup_r>
 8009f54:	b170      	cbz	r0, 8009f74 <_vfiprintf_r+0x5c>
 8009f56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f58:	07dc      	lsls	r4, r3, #31
 8009f5a:	d504      	bpl.n	8009f66 <_vfiprintf_r+0x4e>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b01d      	add	sp, #116	@ 0x74
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	0598      	lsls	r0, r3, #22
 8009f6a:	d4f7      	bmi.n	8009f5c <_vfiprintf_r+0x44>
 8009f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f6e:	f7fe fcd7 	bl	8008920 <__retarget_lock_release_recursive>
 8009f72:	e7f3      	b.n	8009f5c <_vfiprintf_r+0x44>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f78:	2320      	movs	r3, #32
 8009f7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f82:	2330      	movs	r3, #48	@ 0x30
 8009f84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a134 <_vfiprintf_r+0x21c>
 8009f88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f8c:	f04f 0901 	mov.w	r9, #1
 8009f90:	4623      	mov	r3, r4
 8009f92:	469a      	mov	sl, r3
 8009f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f98:	b10a      	cbz	r2, 8009f9e <_vfiprintf_r+0x86>
 8009f9a:	2a25      	cmp	r2, #37	@ 0x25
 8009f9c:	d1f9      	bne.n	8009f92 <_vfiprintf_r+0x7a>
 8009f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8009fa2:	d00b      	beq.n	8009fbc <_vfiprintf_r+0xa4>
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ffa1 	bl	8009ef2 <__sfputs_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	f000 80a7 	beq.w	800a104 <_vfiprintf_r+0x1ec>
 8009fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fb8:	445a      	add	r2, fp
 8009fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 809f 	beq.w	800a104 <_vfiprintf_r+0x1ec>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fd0:	f10a 0a01 	add.w	sl, sl, #1
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	9307      	str	r3, [sp, #28]
 8009fd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fde:	4654      	mov	r4, sl
 8009fe0:	2205      	movs	r2, #5
 8009fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe6:	4853      	ldr	r0, [pc, #332]	@ (800a134 <_vfiprintf_r+0x21c>)
 8009fe8:	f7f6 f902 	bl	80001f0 <memchr>
 8009fec:	9a04      	ldr	r2, [sp, #16]
 8009fee:	b9d8      	cbnz	r0, 800a028 <_vfiprintf_r+0x110>
 8009ff0:	06d1      	lsls	r1, r2, #27
 8009ff2:	bf44      	itt	mi
 8009ff4:	2320      	movmi	r3, #32
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ffa:	0713      	lsls	r3, r2, #28
 8009ffc:	bf44      	itt	mi
 8009ffe:	232b      	movmi	r3, #43	@ 0x2b
 800a000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a004:	f89a 3000 	ldrb.w	r3, [sl]
 800a008:	2b2a      	cmp	r3, #42	@ 0x2a
 800a00a:	d015      	beq.n	800a038 <_vfiprintf_r+0x120>
 800a00c:	9a07      	ldr	r2, [sp, #28]
 800a00e:	4654      	mov	r4, sl
 800a010:	2000      	movs	r0, #0
 800a012:	f04f 0c0a 	mov.w	ip, #10
 800a016:	4621      	mov	r1, r4
 800a018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a01c:	3b30      	subs	r3, #48	@ 0x30
 800a01e:	2b09      	cmp	r3, #9
 800a020:	d94b      	bls.n	800a0ba <_vfiprintf_r+0x1a2>
 800a022:	b1b0      	cbz	r0, 800a052 <_vfiprintf_r+0x13a>
 800a024:	9207      	str	r2, [sp, #28]
 800a026:	e014      	b.n	800a052 <_vfiprintf_r+0x13a>
 800a028:	eba0 0308 	sub.w	r3, r0, r8
 800a02c:	fa09 f303 	lsl.w	r3, r9, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	46a2      	mov	sl, r4
 800a036:	e7d2      	b.n	8009fde <_vfiprintf_r+0xc6>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	1d19      	adds	r1, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	9103      	str	r1, [sp, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	bfbb      	ittet	lt
 800a044:	425b      	neglt	r3, r3
 800a046:	f042 0202 	orrlt.w	r2, r2, #2
 800a04a:	9307      	strge	r3, [sp, #28]
 800a04c:	9307      	strlt	r3, [sp, #28]
 800a04e:	bfb8      	it	lt
 800a050:	9204      	strlt	r2, [sp, #16]
 800a052:	7823      	ldrb	r3, [r4, #0]
 800a054:	2b2e      	cmp	r3, #46	@ 0x2e
 800a056:	d10a      	bne.n	800a06e <_vfiprintf_r+0x156>
 800a058:	7863      	ldrb	r3, [r4, #1]
 800a05a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a05c:	d132      	bne.n	800a0c4 <_vfiprintf_r+0x1ac>
 800a05e:	9b03      	ldr	r3, [sp, #12]
 800a060:	1d1a      	adds	r2, r3, #4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	9203      	str	r2, [sp, #12]
 800a066:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a06a:	3402      	adds	r4, #2
 800a06c:	9305      	str	r3, [sp, #20]
 800a06e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a144 <_vfiprintf_r+0x22c>
 800a072:	7821      	ldrb	r1, [r4, #0]
 800a074:	2203      	movs	r2, #3
 800a076:	4650      	mov	r0, sl
 800a078:	f7f6 f8ba 	bl	80001f0 <memchr>
 800a07c:	b138      	cbz	r0, 800a08e <_vfiprintf_r+0x176>
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	eba0 000a 	sub.w	r0, r0, sl
 800a084:	2240      	movs	r2, #64	@ 0x40
 800a086:	4082      	lsls	r2, r0
 800a088:	4313      	orrs	r3, r2
 800a08a:	3401      	adds	r4, #1
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a092:	4829      	ldr	r0, [pc, #164]	@ (800a138 <_vfiprintf_r+0x220>)
 800a094:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a098:	2206      	movs	r2, #6
 800a09a:	f7f6 f8a9 	bl	80001f0 <memchr>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d03f      	beq.n	800a122 <_vfiprintf_r+0x20a>
 800a0a2:	4b26      	ldr	r3, [pc, #152]	@ (800a13c <_vfiprintf_r+0x224>)
 800a0a4:	bb1b      	cbnz	r3, 800a0ee <_vfiprintf_r+0x1d6>
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	3307      	adds	r3, #7
 800a0aa:	f023 0307 	bic.w	r3, r3, #7
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	9303      	str	r3, [sp, #12]
 800a0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b4:	443b      	add	r3, r7
 800a0b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0b8:	e76a      	b.n	8009f90 <_vfiprintf_r+0x78>
 800a0ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0be:	460c      	mov	r4, r1
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	e7a8      	b.n	800a016 <_vfiprintf_r+0xfe>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	3401      	adds	r4, #1
 800a0c8:	9305      	str	r3, [sp, #20]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f04f 0c0a 	mov.w	ip, #10
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0d6:	3a30      	subs	r2, #48	@ 0x30
 800a0d8:	2a09      	cmp	r2, #9
 800a0da:	d903      	bls.n	800a0e4 <_vfiprintf_r+0x1cc>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0c6      	beq.n	800a06e <_vfiprintf_r+0x156>
 800a0e0:	9105      	str	r1, [sp, #20]
 800a0e2:	e7c4      	b.n	800a06e <_vfiprintf_r+0x156>
 800a0e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e7f0      	b.n	800a0d0 <_vfiprintf_r+0x1b8>
 800a0ee:	ab03      	add	r3, sp, #12
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	4b12      	ldr	r3, [pc, #72]	@ (800a140 <_vfiprintf_r+0x228>)
 800a0f6:	a904      	add	r1, sp, #16
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7fd fec3 	bl	8007e84 <_printf_float>
 800a0fe:	4607      	mov	r7, r0
 800a100:	1c78      	adds	r0, r7, #1
 800a102:	d1d6      	bne.n	800a0b2 <_vfiprintf_r+0x19a>
 800a104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a106:	07d9      	lsls	r1, r3, #31
 800a108:	d405      	bmi.n	800a116 <_vfiprintf_r+0x1fe>
 800a10a:	89ab      	ldrh	r3, [r5, #12]
 800a10c:	059a      	lsls	r2, r3, #22
 800a10e:	d402      	bmi.n	800a116 <_vfiprintf_r+0x1fe>
 800a110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a112:	f7fe fc05 	bl	8008920 <__retarget_lock_release_recursive>
 800a116:	89ab      	ldrh	r3, [r5, #12]
 800a118:	065b      	lsls	r3, r3, #25
 800a11a:	f53f af1f 	bmi.w	8009f5c <_vfiprintf_r+0x44>
 800a11e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a120:	e71e      	b.n	8009f60 <_vfiprintf_r+0x48>
 800a122:	ab03      	add	r3, sp, #12
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	462a      	mov	r2, r5
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <_vfiprintf_r+0x228>)
 800a12a:	a904      	add	r1, sp, #16
 800a12c:	4630      	mov	r0, r6
 800a12e:	f7fe f941 	bl	80083b4 <_printf_i>
 800a132:	e7e4      	b.n	800a0fe <_vfiprintf_r+0x1e6>
 800a134:	0800b408 	.word	0x0800b408
 800a138:	0800b412 	.word	0x0800b412
 800a13c:	08007e85 	.word	0x08007e85
 800a140:	08009ef3 	.word	0x08009ef3
 800a144:	0800b40e 	.word	0x0800b40e

0800a148 <__sflush_r>:
 800a148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a150:	0716      	lsls	r6, r2, #28
 800a152:	4605      	mov	r5, r0
 800a154:	460c      	mov	r4, r1
 800a156:	d454      	bmi.n	800a202 <__sflush_r+0xba>
 800a158:	684b      	ldr	r3, [r1, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dc02      	bgt.n	800a164 <__sflush_r+0x1c>
 800a15e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	dd48      	ble.n	800a1f6 <__sflush_r+0xae>
 800a164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a166:	2e00      	cmp	r6, #0
 800a168:	d045      	beq.n	800a1f6 <__sflush_r+0xae>
 800a16a:	2300      	movs	r3, #0
 800a16c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a170:	682f      	ldr	r7, [r5, #0]
 800a172:	6a21      	ldr	r1, [r4, #32]
 800a174:	602b      	str	r3, [r5, #0]
 800a176:	d030      	beq.n	800a1da <__sflush_r+0x92>
 800a178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	0759      	lsls	r1, r3, #29
 800a17e:	d505      	bpl.n	800a18c <__sflush_r+0x44>
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	1ad2      	subs	r2, r2, r3
 800a184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a186:	b10b      	cbz	r3, 800a18c <__sflush_r+0x44>
 800a188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	2300      	movs	r3, #0
 800a18e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a190:	6a21      	ldr	r1, [r4, #32]
 800a192:	4628      	mov	r0, r5
 800a194:	47b0      	blx	r6
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	d106      	bne.n	800a1aa <__sflush_r+0x62>
 800a19c:	6829      	ldr	r1, [r5, #0]
 800a19e:	291d      	cmp	r1, #29
 800a1a0:	d82b      	bhi.n	800a1fa <__sflush_r+0xb2>
 800a1a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a24c <__sflush_r+0x104>)
 800a1a4:	410a      	asrs	r2, r1
 800a1a6:	07d6      	lsls	r6, r2, #31
 800a1a8:	d427      	bmi.n	800a1fa <__sflush_r+0xb2>
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	6062      	str	r2, [r4, #4]
 800a1ae:	04d9      	lsls	r1, r3, #19
 800a1b0:	6922      	ldr	r2, [r4, #16]
 800a1b2:	6022      	str	r2, [r4, #0]
 800a1b4:	d504      	bpl.n	800a1c0 <__sflush_r+0x78>
 800a1b6:	1c42      	adds	r2, r0, #1
 800a1b8:	d101      	bne.n	800a1be <__sflush_r+0x76>
 800a1ba:	682b      	ldr	r3, [r5, #0]
 800a1bc:	b903      	cbnz	r3, 800a1c0 <__sflush_r+0x78>
 800a1be:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1c2:	602f      	str	r7, [r5, #0]
 800a1c4:	b1b9      	cbz	r1, 800a1f6 <__sflush_r+0xae>
 800a1c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1ca:	4299      	cmp	r1, r3
 800a1cc:	d002      	beq.n	800a1d4 <__sflush_r+0x8c>
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f7ff f9f6 	bl	80095c0 <_free_r>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1d8:	e00d      	b.n	800a1f6 <__sflush_r+0xae>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b0      	blx	r6
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	1c50      	adds	r0, r2, #1
 800a1e4:	d1c9      	bne.n	800a17a <__sflush_r+0x32>
 800a1e6:	682b      	ldr	r3, [r5, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0c6      	beq.n	800a17a <__sflush_r+0x32>
 800a1ec:	2b1d      	cmp	r3, #29
 800a1ee:	d001      	beq.n	800a1f4 <__sflush_r+0xac>
 800a1f0:	2b16      	cmp	r3, #22
 800a1f2:	d11e      	bne.n	800a232 <__sflush_r+0xea>
 800a1f4:	602f      	str	r7, [r5, #0]
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e022      	b.n	800a240 <__sflush_r+0xf8>
 800a1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fe:	b21b      	sxth	r3, r3
 800a200:	e01b      	b.n	800a23a <__sflush_r+0xf2>
 800a202:	690f      	ldr	r7, [r1, #16]
 800a204:	2f00      	cmp	r7, #0
 800a206:	d0f6      	beq.n	800a1f6 <__sflush_r+0xae>
 800a208:	0793      	lsls	r3, r2, #30
 800a20a:	680e      	ldr	r6, [r1, #0]
 800a20c:	bf08      	it	eq
 800a20e:	694b      	ldreq	r3, [r1, #20]
 800a210:	600f      	str	r7, [r1, #0]
 800a212:	bf18      	it	ne
 800a214:	2300      	movne	r3, #0
 800a216:	eba6 0807 	sub.w	r8, r6, r7
 800a21a:	608b      	str	r3, [r1, #8]
 800a21c:	f1b8 0f00 	cmp.w	r8, #0
 800a220:	dde9      	ble.n	800a1f6 <__sflush_r+0xae>
 800a222:	6a21      	ldr	r1, [r4, #32]
 800a224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a226:	4643      	mov	r3, r8
 800a228:	463a      	mov	r2, r7
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b0      	blx	r6
 800a22e:	2800      	cmp	r0, #0
 800a230:	dc08      	bgt.n	800a244 <__sflush_r+0xfc>
 800a232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a244:	4407      	add	r7, r0
 800a246:	eba8 0800 	sub.w	r8, r8, r0
 800a24a:	e7e7      	b.n	800a21c <__sflush_r+0xd4>
 800a24c:	dfbffffe 	.word	0xdfbffffe

0800a250 <_fflush_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	690b      	ldr	r3, [r1, #16]
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	b913      	cbnz	r3, 800a260 <_fflush_r+0x10>
 800a25a:	2500      	movs	r5, #0
 800a25c:	4628      	mov	r0, r5
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	b118      	cbz	r0, 800a26a <_fflush_r+0x1a>
 800a262:	6a03      	ldr	r3, [r0, #32]
 800a264:	b90b      	cbnz	r3, 800a26a <_fflush_r+0x1a>
 800a266:	f7fe fa51 	bl	800870c <__sinit>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f3      	beq.n	800a25a <_fflush_r+0xa>
 800a272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a274:	07d0      	lsls	r0, r2, #31
 800a276:	d404      	bmi.n	800a282 <_fflush_r+0x32>
 800a278:	0599      	lsls	r1, r3, #22
 800a27a:	d402      	bmi.n	800a282 <_fflush_r+0x32>
 800a27c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a27e:	f7fe fb4e 	bl	800891e <__retarget_lock_acquire_recursive>
 800a282:	4628      	mov	r0, r5
 800a284:	4621      	mov	r1, r4
 800a286:	f7ff ff5f 	bl	800a148 <__sflush_r>
 800a28a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a28c:	07da      	lsls	r2, r3, #31
 800a28e:	4605      	mov	r5, r0
 800a290:	d4e4      	bmi.n	800a25c <_fflush_r+0xc>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	059b      	lsls	r3, r3, #22
 800a296:	d4e1      	bmi.n	800a25c <_fflush_r+0xc>
 800a298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a29a:	f7fe fb41 	bl	8008920 <__retarget_lock_release_recursive>
 800a29e:	e7dd      	b.n	800a25c <_fflush_r+0xc>

0800a2a0 <__swbuf_r>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	460e      	mov	r6, r1
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	b118      	cbz	r0, 800a2b2 <__swbuf_r+0x12>
 800a2aa:	6a03      	ldr	r3, [r0, #32]
 800a2ac:	b90b      	cbnz	r3, 800a2b2 <__swbuf_r+0x12>
 800a2ae:	f7fe fa2d 	bl	800870c <__sinit>
 800a2b2:	69a3      	ldr	r3, [r4, #24]
 800a2b4:	60a3      	str	r3, [r4, #8]
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	071a      	lsls	r2, r3, #28
 800a2ba:	d501      	bpl.n	800a2c0 <__swbuf_r+0x20>
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	b943      	cbnz	r3, 800a2d2 <__swbuf_r+0x32>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 f82a 	bl	800a31c <__swsetup_r>
 800a2c8:	b118      	cbz	r0, 800a2d2 <__swbuf_r+0x32>
 800a2ca:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	1a98      	subs	r0, r3, r2
 800a2d8:	6963      	ldr	r3, [r4, #20]
 800a2da:	b2f6      	uxtb	r6, r6
 800a2dc:	4283      	cmp	r3, r0
 800a2de:	4637      	mov	r7, r6
 800a2e0:	dc05      	bgt.n	800a2ee <__swbuf_r+0x4e>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f7ff ffb3 	bl	800a250 <_fflush_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d1ed      	bne.n	800a2ca <__swbuf_r+0x2a>
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	60a3      	str	r3, [r4, #8]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	701e      	strb	r6, [r3, #0]
 800a2fc:	6962      	ldr	r2, [r4, #20]
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	429a      	cmp	r2, r3
 800a302:	d004      	beq.n	800a30e <__swbuf_r+0x6e>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	07db      	lsls	r3, r3, #31
 800a308:	d5e1      	bpl.n	800a2ce <__swbuf_r+0x2e>
 800a30a:	2e0a      	cmp	r6, #10
 800a30c:	d1df      	bne.n	800a2ce <__swbuf_r+0x2e>
 800a30e:	4621      	mov	r1, r4
 800a310:	4628      	mov	r0, r5
 800a312:	f7ff ff9d 	bl	800a250 <_fflush_r>
 800a316:	2800      	cmp	r0, #0
 800a318:	d0d9      	beq.n	800a2ce <__swbuf_r+0x2e>
 800a31a:	e7d6      	b.n	800a2ca <__swbuf_r+0x2a>

0800a31c <__swsetup_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4b29      	ldr	r3, [pc, #164]	@ (800a3c4 <__swsetup_r+0xa8>)
 800a320:	4605      	mov	r5, r0
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	460c      	mov	r4, r1
 800a326:	b118      	cbz	r0, 800a330 <__swsetup_r+0x14>
 800a328:	6a03      	ldr	r3, [r0, #32]
 800a32a:	b90b      	cbnz	r3, 800a330 <__swsetup_r+0x14>
 800a32c:	f7fe f9ee 	bl	800870c <__sinit>
 800a330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a334:	0719      	lsls	r1, r3, #28
 800a336:	d422      	bmi.n	800a37e <__swsetup_r+0x62>
 800a338:	06da      	lsls	r2, r3, #27
 800a33a:	d407      	bmi.n	800a34c <__swsetup_r+0x30>
 800a33c:	2209      	movs	r2, #9
 800a33e:	602a      	str	r2, [r5, #0]
 800a340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	f04f 30ff 	mov.w	r0, #4294967295
 800a34a:	e033      	b.n	800a3b4 <__swsetup_r+0x98>
 800a34c:	0758      	lsls	r0, r3, #29
 800a34e:	d512      	bpl.n	800a376 <__swsetup_r+0x5a>
 800a350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a352:	b141      	cbz	r1, 800a366 <__swsetup_r+0x4a>
 800a354:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a358:	4299      	cmp	r1, r3
 800a35a:	d002      	beq.n	800a362 <__swsetup_r+0x46>
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7ff f92f 	bl	80095c0 <_free_r>
 800a362:	2300      	movs	r3, #0
 800a364:	6363      	str	r3, [r4, #52]	@ 0x34
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	2300      	movs	r3, #0
 800a370:	6063      	str	r3, [r4, #4]
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	f043 0308 	orr.w	r3, r3, #8
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	b94b      	cbnz	r3, 800a396 <__swsetup_r+0x7a>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a38c:	d003      	beq.n	800a396 <__swsetup_r+0x7a>
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f000 f8c1 	bl	800a518 <__smakebuf_r>
 800a396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39a:	f013 0201 	ands.w	r2, r3, #1
 800a39e:	d00a      	beq.n	800a3b6 <__swsetup_r+0x9a>
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	60a2      	str	r2, [r4, #8]
 800a3a4:	6962      	ldr	r2, [r4, #20]
 800a3a6:	4252      	negs	r2, r2
 800a3a8:	61a2      	str	r2, [r4, #24]
 800a3aa:	6922      	ldr	r2, [r4, #16]
 800a3ac:	b942      	cbnz	r2, 800a3c0 <__swsetup_r+0xa4>
 800a3ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3b2:	d1c5      	bne.n	800a340 <__swsetup_r+0x24>
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	0799      	lsls	r1, r3, #30
 800a3b8:	bf58      	it	pl
 800a3ba:	6962      	ldrpl	r2, [r4, #20]
 800a3bc:	60a2      	str	r2, [r4, #8]
 800a3be:	e7f4      	b.n	800a3aa <__swsetup_r+0x8e>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e7f7      	b.n	800a3b4 <__swsetup_r+0x98>
 800a3c4:	20000128 	.word	0x20000128

0800a3c8 <_sbrk_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4d06      	ldr	r5, [pc, #24]	@ (800a3e4 <_sbrk_r+0x1c>)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	f7f7 fa5e 	bl	8001894 <_sbrk>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_sbrk_r+0x1a>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_sbrk_r+0x1a>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	20000e64 	.word	0x20000e64

0800a3e8 <memcpy>:
 800a3e8:	440a      	add	r2, r1
 800a3ea:	4291      	cmp	r1, r2
 800a3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3f0:	d100      	bne.n	800a3f4 <memcpy+0xc>
 800a3f2:	4770      	bx	lr
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3fe:	4291      	cmp	r1, r2
 800a400:	d1f9      	bne.n	800a3f6 <memcpy+0xe>
 800a402:	bd10      	pop	{r4, pc}

0800a404 <__assert_func>:
 800a404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a406:	4614      	mov	r4, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	4b09      	ldr	r3, [pc, #36]	@ (800a430 <__assert_func+0x2c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4605      	mov	r5, r0
 800a410:	68d8      	ldr	r0, [r3, #12]
 800a412:	b954      	cbnz	r4, 800a42a <__assert_func+0x26>
 800a414:	4b07      	ldr	r3, [pc, #28]	@ (800a434 <__assert_func+0x30>)
 800a416:	461c      	mov	r4, r3
 800a418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a41c:	9100      	str	r1, [sp, #0]
 800a41e:	462b      	mov	r3, r5
 800a420:	4905      	ldr	r1, [pc, #20]	@ (800a438 <__assert_func+0x34>)
 800a422:	f000 f841 	bl	800a4a8 <fiprintf>
 800a426:	f000 f8d5 	bl	800a5d4 <abort>
 800a42a:	4b04      	ldr	r3, [pc, #16]	@ (800a43c <__assert_func+0x38>)
 800a42c:	e7f4      	b.n	800a418 <__assert_func+0x14>
 800a42e:	bf00      	nop
 800a430:	20000128 	.word	0x20000128
 800a434:	0800b45e 	.word	0x0800b45e
 800a438:	0800b430 	.word	0x0800b430
 800a43c:	0800b423 	.word	0x0800b423

0800a440 <_calloc_r>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	fba1 5402 	umull	r5, r4, r1, r2
 800a446:	b93c      	cbnz	r4, 800a458 <_calloc_r+0x18>
 800a448:	4629      	mov	r1, r5
 800a44a:	f7ff f92d 	bl	80096a8 <_malloc_r>
 800a44e:	4606      	mov	r6, r0
 800a450:	b928      	cbnz	r0, 800a45e <_calloc_r+0x1e>
 800a452:	2600      	movs	r6, #0
 800a454:	4630      	mov	r0, r6
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	220c      	movs	r2, #12
 800a45a:	6002      	str	r2, [r0, #0]
 800a45c:	e7f9      	b.n	800a452 <_calloc_r+0x12>
 800a45e:	462a      	mov	r2, r5
 800a460:	4621      	mov	r1, r4
 800a462:	f7fe f9de 	bl	8008822 <memset>
 800a466:	e7f5      	b.n	800a454 <_calloc_r+0x14>

0800a468 <__ascii_mbtowc>:
 800a468:	b082      	sub	sp, #8
 800a46a:	b901      	cbnz	r1, 800a46e <__ascii_mbtowc+0x6>
 800a46c:	a901      	add	r1, sp, #4
 800a46e:	b142      	cbz	r2, 800a482 <__ascii_mbtowc+0x1a>
 800a470:	b14b      	cbz	r3, 800a486 <__ascii_mbtowc+0x1e>
 800a472:	7813      	ldrb	r3, [r2, #0]
 800a474:	600b      	str	r3, [r1, #0]
 800a476:	7812      	ldrb	r2, [r2, #0]
 800a478:	1e10      	subs	r0, r2, #0
 800a47a:	bf18      	it	ne
 800a47c:	2001      	movne	r0, #1
 800a47e:	b002      	add	sp, #8
 800a480:	4770      	bx	lr
 800a482:	4610      	mov	r0, r2
 800a484:	e7fb      	b.n	800a47e <__ascii_mbtowc+0x16>
 800a486:	f06f 0001 	mvn.w	r0, #1
 800a48a:	e7f8      	b.n	800a47e <__ascii_mbtowc+0x16>

0800a48c <__ascii_wctomb>:
 800a48c:	4603      	mov	r3, r0
 800a48e:	4608      	mov	r0, r1
 800a490:	b141      	cbz	r1, 800a4a4 <__ascii_wctomb+0x18>
 800a492:	2aff      	cmp	r2, #255	@ 0xff
 800a494:	d904      	bls.n	800a4a0 <__ascii_wctomb+0x14>
 800a496:	228a      	movs	r2, #138	@ 0x8a
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	f04f 30ff 	mov.w	r0, #4294967295
 800a49e:	4770      	bx	lr
 800a4a0:	700a      	strb	r2, [r1, #0]
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	4770      	bx	lr
	...

0800a4a8 <fiprintf>:
 800a4a8:	b40e      	push	{r1, r2, r3}
 800a4aa:	b503      	push	{r0, r1, lr}
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	4805      	ldr	r0, [pc, #20]	@ (800a4c8 <fiprintf+0x20>)
 800a4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b6:	6800      	ldr	r0, [r0, #0]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	f7ff fd2d 	bl	8009f18 <_vfiprintf_r>
 800a4be:	b002      	add	sp, #8
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	b003      	add	sp, #12
 800a4c6:	4770      	bx	lr
 800a4c8:	20000128 	.word	0x20000128

0800a4cc <__swhatbuf_r>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	b096      	sub	sp, #88	@ 0x58
 800a4d8:	4615      	mov	r5, r2
 800a4da:	461e      	mov	r6, r3
 800a4dc:	da0d      	bge.n	800a4fa <__swhatbuf_r+0x2e>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4e4:	f04f 0100 	mov.w	r1, #0
 800a4e8:	bf14      	ite	ne
 800a4ea:	2340      	movne	r3, #64	@ 0x40
 800a4ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	6031      	str	r1, [r6, #0]
 800a4f4:	602b      	str	r3, [r5, #0]
 800a4f6:	b016      	add	sp, #88	@ 0x58
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	466a      	mov	r2, sp
 800a4fc:	f000 f848 	bl	800a590 <_fstat_r>
 800a500:	2800      	cmp	r0, #0
 800a502:	dbec      	blt.n	800a4de <__swhatbuf_r+0x12>
 800a504:	9901      	ldr	r1, [sp, #4]
 800a506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a50a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a50e:	4259      	negs	r1, r3
 800a510:	4159      	adcs	r1, r3
 800a512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a516:	e7eb      	b.n	800a4f0 <__swhatbuf_r+0x24>

0800a518 <__smakebuf_r>:
 800a518:	898b      	ldrh	r3, [r1, #12]
 800a51a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a51c:	079d      	lsls	r5, r3, #30
 800a51e:	4606      	mov	r6, r0
 800a520:	460c      	mov	r4, r1
 800a522:	d507      	bpl.n	800a534 <__smakebuf_r+0x1c>
 800a524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	2301      	movs	r3, #1
 800a52e:	6163      	str	r3, [r4, #20]
 800a530:	b003      	add	sp, #12
 800a532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a534:	ab01      	add	r3, sp, #4
 800a536:	466a      	mov	r2, sp
 800a538:	f7ff ffc8 	bl	800a4cc <__swhatbuf_r>
 800a53c:	9f00      	ldr	r7, [sp, #0]
 800a53e:	4605      	mov	r5, r0
 800a540:	4639      	mov	r1, r7
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff f8b0 	bl	80096a8 <_malloc_r>
 800a548:	b948      	cbnz	r0, 800a55e <__smakebuf_r+0x46>
 800a54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54e:	059a      	lsls	r2, r3, #22
 800a550:	d4ee      	bmi.n	800a530 <__smakebuf_r+0x18>
 800a552:	f023 0303 	bic.w	r3, r3, #3
 800a556:	f043 0302 	orr.w	r3, r3, #2
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	e7e2      	b.n	800a524 <__smakebuf_r+0xc>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	6020      	str	r0, [r4, #0]
 800a562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a56e:	b15b      	cbz	r3, 800a588 <__smakebuf_r+0x70>
 800a570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a574:	4630      	mov	r0, r6
 800a576:	f000 f81d 	bl	800a5b4 <_isatty_r>
 800a57a:	b128      	cbz	r0, 800a588 <__smakebuf_r+0x70>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f023 0303 	bic.w	r3, r3, #3
 800a582:	f043 0301 	orr.w	r3, r3, #1
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	431d      	orrs	r5, r3
 800a58c:	81a5      	strh	r5, [r4, #12]
 800a58e:	e7cf      	b.n	800a530 <__smakebuf_r+0x18>

0800a590 <_fstat_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4d07      	ldr	r5, [pc, #28]	@ (800a5b0 <_fstat_r+0x20>)
 800a594:	2300      	movs	r3, #0
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	f7f7 f951 	bl	8001844 <_fstat>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	d102      	bne.n	800a5ac <_fstat_r+0x1c>
 800a5a6:	682b      	ldr	r3, [r5, #0]
 800a5a8:	b103      	cbz	r3, 800a5ac <_fstat_r+0x1c>
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	bd38      	pop	{r3, r4, r5, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000e64 	.word	0x20000e64

0800a5b4 <_isatty_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d06      	ldr	r5, [pc, #24]	@ (800a5d0 <_isatty_r+0x1c>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	f7f7 f950 	bl	8001864 <_isatty>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_isatty_r+0x1a>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_isatty_r+0x1a>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20000e64 	.word	0x20000e64

0800a5d4 <abort>:
 800a5d4:	b508      	push	{r3, lr}
 800a5d6:	2006      	movs	r0, #6
 800a5d8:	f000 f82c 	bl	800a634 <raise>
 800a5dc:	2001      	movs	r0, #1
 800a5de:	f7f7 f8e1 	bl	80017a4 <_exit>

0800a5e2 <_raise_r>:
 800a5e2:	291f      	cmp	r1, #31
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	d904      	bls.n	800a5f6 <_raise_r+0x14>
 800a5ec:	2316      	movs	r3, #22
 800a5ee:	6003      	str	r3, [r0, #0]
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
 800a5f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5f8:	b112      	cbz	r2, 800a600 <_raise_r+0x1e>
 800a5fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5fe:	b94b      	cbnz	r3, 800a614 <_raise_r+0x32>
 800a600:	4628      	mov	r0, r5
 800a602:	f000 f831 	bl	800a668 <_getpid_r>
 800a606:	4622      	mov	r2, r4
 800a608:	4601      	mov	r1, r0
 800a60a:	4628      	mov	r0, r5
 800a60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a610:	f000 b818 	b.w	800a644 <_kill_r>
 800a614:	2b01      	cmp	r3, #1
 800a616:	d00a      	beq.n	800a62e <_raise_r+0x4c>
 800a618:	1c59      	adds	r1, r3, #1
 800a61a:	d103      	bne.n	800a624 <_raise_r+0x42>
 800a61c:	2316      	movs	r3, #22
 800a61e:	6003      	str	r3, [r0, #0]
 800a620:	2001      	movs	r0, #1
 800a622:	e7e7      	b.n	800a5f4 <_raise_r+0x12>
 800a624:	2100      	movs	r1, #0
 800a626:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a62a:	4620      	mov	r0, r4
 800a62c:	4798      	blx	r3
 800a62e:	2000      	movs	r0, #0
 800a630:	e7e0      	b.n	800a5f4 <_raise_r+0x12>
	...

0800a634 <raise>:
 800a634:	4b02      	ldr	r3, [pc, #8]	@ (800a640 <raise+0xc>)
 800a636:	4601      	mov	r1, r0
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	f7ff bfd2 	b.w	800a5e2 <_raise_r>
 800a63e:	bf00      	nop
 800a640:	20000128 	.word	0x20000128

0800a644 <_kill_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d07      	ldr	r5, [pc, #28]	@ (800a664 <_kill_r+0x20>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	4611      	mov	r1, r2
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	f7f7 f897 	bl	8001784 <_kill>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	d102      	bne.n	800a660 <_kill_r+0x1c>
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	b103      	cbz	r3, 800a660 <_kill_r+0x1c>
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	bd38      	pop	{r3, r4, r5, pc}
 800a662:	bf00      	nop
 800a664:	20000e64 	.word	0x20000e64

0800a668 <_getpid_r>:
 800a668:	f7f7 b884 	b.w	8001774 <_getpid>

0800a66c <cosf>:
 800a66c:	ee10 3a10 	vmov	r3, s0
 800a670:	b507      	push	{r0, r1, r2, lr}
 800a672:	4a1e      	ldr	r2, [pc, #120]	@ (800a6ec <cosf+0x80>)
 800a674:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a678:	4293      	cmp	r3, r2
 800a67a:	d806      	bhi.n	800a68a <cosf+0x1e>
 800a67c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a6f0 <cosf+0x84>
 800a680:	b003      	add	sp, #12
 800a682:	f85d eb04 	ldr.w	lr, [sp], #4
 800a686:	f000 b87b 	b.w	800a780 <__kernel_cosf>
 800a68a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a68e:	d304      	bcc.n	800a69a <cosf+0x2e>
 800a690:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a694:	b003      	add	sp, #12
 800a696:	f85d fb04 	ldr.w	pc, [sp], #4
 800a69a:	4668      	mov	r0, sp
 800a69c:	f000 f910 	bl	800a8c0 <__ieee754_rem_pio2f>
 800a6a0:	f000 0003 	and.w	r0, r0, #3
 800a6a4:	2801      	cmp	r0, #1
 800a6a6:	d009      	beq.n	800a6bc <cosf+0x50>
 800a6a8:	2802      	cmp	r0, #2
 800a6aa:	d010      	beq.n	800a6ce <cosf+0x62>
 800a6ac:	b9b0      	cbnz	r0, 800a6dc <cosf+0x70>
 800a6ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6b2:	ed9d 0a00 	vldr	s0, [sp]
 800a6b6:	f000 f863 	bl	800a780 <__kernel_cosf>
 800a6ba:	e7eb      	b.n	800a694 <cosf+0x28>
 800a6bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6c0:	ed9d 0a00 	vldr	s0, [sp]
 800a6c4:	f000 f8b4 	bl	800a830 <__kernel_sinf>
 800a6c8:	eeb1 0a40 	vneg.f32	s0, s0
 800a6cc:	e7e2      	b.n	800a694 <cosf+0x28>
 800a6ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6d2:	ed9d 0a00 	vldr	s0, [sp]
 800a6d6:	f000 f853 	bl	800a780 <__kernel_cosf>
 800a6da:	e7f5      	b.n	800a6c8 <cosf+0x5c>
 800a6dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a6e0:	ed9d 0a00 	vldr	s0, [sp]
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f000 f8a3 	bl	800a830 <__kernel_sinf>
 800a6ea:	e7d3      	b.n	800a694 <cosf+0x28>
 800a6ec:	3f490fd8 	.word	0x3f490fd8
 800a6f0:	00000000 	.word	0x00000000

0800a6f4 <sinf>:
 800a6f4:	ee10 3a10 	vmov	r3, s0
 800a6f8:	b507      	push	{r0, r1, r2, lr}
 800a6fa:	4a1f      	ldr	r2, [pc, #124]	@ (800a778 <sinf+0x84>)
 800a6fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a700:	4293      	cmp	r3, r2
 800a702:	d807      	bhi.n	800a714 <sinf+0x20>
 800a704:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a77c <sinf+0x88>
 800a708:	2000      	movs	r0, #0
 800a70a:	b003      	add	sp, #12
 800a70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a710:	f000 b88e 	b.w	800a830 <__kernel_sinf>
 800a714:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a718:	d304      	bcc.n	800a724 <sinf+0x30>
 800a71a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a71e:	b003      	add	sp, #12
 800a720:	f85d fb04 	ldr.w	pc, [sp], #4
 800a724:	4668      	mov	r0, sp
 800a726:	f000 f8cb 	bl	800a8c0 <__ieee754_rem_pio2f>
 800a72a:	f000 0003 	and.w	r0, r0, #3
 800a72e:	2801      	cmp	r0, #1
 800a730:	d00a      	beq.n	800a748 <sinf+0x54>
 800a732:	2802      	cmp	r0, #2
 800a734:	d00f      	beq.n	800a756 <sinf+0x62>
 800a736:	b9c0      	cbnz	r0, 800a76a <sinf+0x76>
 800a738:	eddd 0a01 	vldr	s1, [sp, #4]
 800a73c:	ed9d 0a00 	vldr	s0, [sp]
 800a740:	2001      	movs	r0, #1
 800a742:	f000 f875 	bl	800a830 <__kernel_sinf>
 800a746:	e7ea      	b.n	800a71e <sinf+0x2a>
 800a748:	eddd 0a01 	vldr	s1, [sp, #4]
 800a74c:	ed9d 0a00 	vldr	s0, [sp]
 800a750:	f000 f816 	bl	800a780 <__kernel_cosf>
 800a754:	e7e3      	b.n	800a71e <sinf+0x2a>
 800a756:	eddd 0a01 	vldr	s1, [sp, #4]
 800a75a:	ed9d 0a00 	vldr	s0, [sp]
 800a75e:	2001      	movs	r0, #1
 800a760:	f000 f866 	bl	800a830 <__kernel_sinf>
 800a764:	eeb1 0a40 	vneg.f32	s0, s0
 800a768:	e7d9      	b.n	800a71e <sinf+0x2a>
 800a76a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a76e:	ed9d 0a00 	vldr	s0, [sp]
 800a772:	f000 f805 	bl	800a780 <__kernel_cosf>
 800a776:	e7f5      	b.n	800a764 <sinf+0x70>
 800a778:	3f490fd8 	.word	0x3f490fd8
 800a77c:	00000000 	.word	0x00000000

0800a780 <__kernel_cosf>:
 800a780:	ee10 3a10 	vmov	r3, s0
 800a784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a788:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a78c:	eef0 6a40 	vmov.f32	s13, s0
 800a790:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a794:	d204      	bcs.n	800a7a0 <__kernel_cosf+0x20>
 800a796:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800a79a:	ee17 2a90 	vmov	r2, s15
 800a79e:	b342      	cbz	r2, 800a7f2 <__kernel_cosf+0x72>
 800a7a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a7a4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800a810 <__kernel_cosf+0x90>
 800a7a8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800a814 <__kernel_cosf+0x94>
 800a7ac:	4a1a      	ldr	r2, [pc, #104]	@ (800a818 <__kernel_cosf+0x98>)
 800a7ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a81c <__kernel_cosf+0x9c>
 800a7b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a7bc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800a820 <__kernel_cosf+0xa0>
 800a7c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a7c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a824 <__kernel_cosf+0xa4>
 800a7c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a7cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800a828 <__kernel_cosf+0xa8>
 800a7d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a7d4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800a7d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a7dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a7e0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800a7e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e8:	d804      	bhi.n	800a7f4 <__kernel_cosf+0x74>
 800a7ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a7ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7f2:	4770      	bx	lr
 800a7f4:	4a0d      	ldr	r2, [pc, #52]	@ (800a82c <__kernel_cosf+0xac>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	bf9a      	itte	ls
 800a7fa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800a7fe:	ee07 3a10 	vmovls	s14, r3
 800a802:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800a806:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a80a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a80e:	e7ec      	b.n	800a7ea <__kernel_cosf+0x6a>
 800a810:	ad47d74e 	.word	0xad47d74e
 800a814:	310f74f6 	.word	0x310f74f6
 800a818:	3e999999 	.word	0x3e999999
 800a81c:	b493f27c 	.word	0xb493f27c
 800a820:	37d00d01 	.word	0x37d00d01
 800a824:	bab60b61 	.word	0xbab60b61
 800a828:	3d2aaaab 	.word	0x3d2aaaab
 800a82c:	3f480000 	.word	0x3f480000

0800a830 <__kernel_sinf>:
 800a830:	ee10 3a10 	vmov	r3, s0
 800a834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a838:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a83c:	d204      	bcs.n	800a848 <__kernel_sinf+0x18>
 800a83e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a842:	ee17 3a90 	vmov	r3, s15
 800a846:	b35b      	cbz	r3, 800a8a0 <__kernel_sinf+0x70>
 800a848:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a84c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a8a4 <__kernel_sinf+0x74>
 800a850:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a8a8 <__kernel_sinf+0x78>
 800a854:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a858:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800a8ac <__kernel_sinf+0x7c>
 800a85c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a860:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a8b0 <__kernel_sinf+0x80>
 800a864:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a868:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800a8b4 <__kernel_sinf+0x84>
 800a86c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a870:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a874:	b930      	cbnz	r0, 800a884 <__kernel_sinf+0x54>
 800a876:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800a8b8 <__kernel_sinf+0x88>
 800a87a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a87e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a882:	4770      	bx	lr
 800a884:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a888:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a88c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a890:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a894:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a8bc <__kernel_sinf+0x8c>
 800a898:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a89c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	2f2ec9d3 	.word	0x2f2ec9d3
 800a8a8:	b2d72f34 	.word	0xb2d72f34
 800a8ac:	3638ef1b 	.word	0x3638ef1b
 800a8b0:	b9500d01 	.word	0xb9500d01
 800a8b4:	3c088889 	.word	0x3c088889
 800a8b8:	be2aaaab 	.word	0xbe2aaaab
 800a8bc:	3e2aaaab 	.word	0x3e2aaaab

0800a8c0 <__ieee754_rem_pio2f>:
 800a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c2:	ee10 6a10 	vmov	r6, s0
 800a8c6:	4b88      	ldr	r3, [pc, #544]	@ (800aae8 <__ieee754_rem_pio2f+0x228>)
 800a8c8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800a8cc:	429d      	cmp	r5, r3
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	d805      	bhi.n	800a8e0 <__ieee754_rem_pio2f+0x20>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	ed80 0a00 	vstr	s0, [r0]
 800a8da:	6043      	str	r3, [r0, #4]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e022      	b.n	800a926 <__ieee754_rem_pio2f+0x66>
 800a8e0:	4b82      	ldr	r3, [pc, #520]	@ (800aaec <__ieee754_rem_pio2f+0x22c>)
 800a8e2:	429d      	cmp	r5, r3
 800a8e4:	d83a      	bhi.n	800a95c <__ieee754_rem_pio2f+0x9c>
 800a8e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800aaf0 <__ieee754_rem_pio2f+0x230>
 800a8f0:	4a80      	ldr	r2, [pc, #512]	@ (800aaf4 <__ieee754_rem_pio2f+0x234>)
 800a8f2:	f023 030f 	bic.w	r3, r3, #15
 800a8f6:	dd18      	ble.n	800a92a <__ieee754_rem_pio2f+0x6a>
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a8fe:	bf09      	itett	eq
 800a900:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800aaf8 <__ieee754_rem_pio2f+0x238>
 800a904:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800aafc <__ieee754_rem_pio2f+0x23c>
 800a908:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ab00 <__ieee754_rem_pio2f+0x240>
 800a90c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a910:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800a914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a918:	ed80 7a00 	vstr	s14, [r0]
 800a91c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a920:	edc0 7a01 	vstr	s15, [r0, #4]
 800a924:	2001      	movs	r0, #1
 800a926:	b007      	add	sp, #28
 800a928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92a:	4293      	cmp	r3, r2
 800a92c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a930:	bf09      	itett	eq
 800a932:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800aaf8 <__ieee754_rem_pio2f+0x238>
 800a936:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800aafc <__ieee754_rem_pio2f+0x23c>
 800a93a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ab00 <__ieee754_rem_pio2f+0x240>
 800a93e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a942:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a94a:	ed80 7a00 	vstr	s14, [r0]
 800a94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a952:	edc0 7a01 	vstr	s15, [r0, #4]
 800a956:	f04f 30ff 	mov.w	r0, #4294967295
 800a95a:	e7e4      	b.n	800a926 <__ieee754_rem_pio2f+0x66>
 800a95c:	4b69      	ldr	r3, [pc, #420]	@ (800ab04 <__ieee754_rem_pio2f+0x244>)
 800a95e:	429d      	cmp	r5, r3
 800a960:	d873      	bhi.n	800aa4a <__ieee754_rem_pio2f+0x18a>
 800a962:	f000 f8dd 	bl	800ab20 <fabsf>
 800a966:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ab08 <__ieee754_rem_pio2f+0x248>
 800a96a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a96e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a97a:	ee17 0a90 	vmov	r0, s15
 800a97e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800aaf0 <__ieee754_rem_pio2f+0x230>
 800a982:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a986:	281f      	cmp	r0, #31
 800a988:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800aafc <__ieee754_rem_pio2f+0x23c>
 800a98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a990:	eeb1 6a47 	vneg.f32	s12, s14
 800a994:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a998:	ee16 1a90 	vmov	r1, s13
 800a99c:	dc09      	bgt.n	800a9b2 <__ieee754_rem_pio2f+0xf2>
 800a99e:	4a5b      	ldr	r2, [pc, #364]	@ (800ab0c <__ieee754_rem_pio2f+0x24c>)
 800a9a0:	1e47      	subs	r7, r0, #1
 800a9a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a9a6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800a9aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d107      	bne.n	800a9c2 <__ieee754_rem_pio2f+0x102>
 800a9b2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800a9b6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800a9ba:	2a08      	cmp	r2, #8
 800a9bc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a9c0:	dc14      	bgt.n	800a9ec <__ieee754_rem_pio2f+0x12c>
 800a9c2:	6021      	str	r1, [r4, #0]
 800a9c4:	ed94 7a00 	vldr	s14, [r4]
 800a9c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a9d2:	ed84 0a01 	vstr	s0, [r4, #4]
 800a9d6:	daa6      	bge.n	800a926 <__ieee754_rem_pio2f+0x66>
 800a9d8:	eeb1 7a47 	vneg.f32	s14, s14
 800a9dc:	eeb1 0a40 	vneg.f32	s0, s0
 800a9e0:	ed84 7a00 	vstr	s14, [r4]
 800a9e4:	ed84 0a01 	vstr	s0, [r4, #4]
 800a9e8:	4240      	negs	r0, r0
 800a9ea:	e79c      	b.n	800a926 <__ieee754_rem_pio2f+0x66>
 800a9ec:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800aaf8 <__ieee754_rem_pio2f+0x238>
 800a9f0:	eef0 6a40 	vmov.f32	s13, s0
 800a9f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a9f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800a9fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aa00:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ab00 <__ieee754_rem_pio2f+0x240>
 800aa04:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800aa08:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800aa0c:	ee15 2a90 	vmov	r2, s11
 800aa10:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800aa14:	1a5b      	subs	r3, r3, r1
 800aa16:	2b19      	cmp	r3, #25
 800aa18:	dc04      	bgt.n	800aa24 <__ieee754_rem_pio2f+0x164>
 800aa1a:	edc4 5a00 	vstr	s11, [r4]
 800aa1e:	eeb0 0a66 	vmov.f32	s0, s13
 800aa22:	e7cf      	b.n	800a9c4 <__ieee754_rem_pio2f+0x104>
 800aa24:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ab10 <__ieee754_rem_pio2f+0x250>
 800aa28:	eeb0 0a66 	vmov.f32	s0, s13
 800aa2c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800aa30:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800aa34:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ab14 <__ieee754_rem_pio2f+0x254>
 800aa38:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aa3c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800aa40:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aa44:	ed84 7a00 	vstr	s14, [r4]
 800aa48:	e7bc      	b.n	800a9c4 <__ieee754_rem_pio2f+0x104>
 800aa4a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800aa4e:	d306      	bcc.n	800aa5e <__ieee754_rem_pio2f+0x19e>
 800aa50:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa54:	edc0 7a01 	vstr	s15, [r0, #4]
 800aa58:	edc0 7a00 	vstr	s15, [r0]
 800aa5c:	e73e      	b.n	800a8dc <__ieee754_rem_pio2f+0x1c>
 800aa5e:	15ea      	asrs	r2, r5, #23
 800aa60:	3a86      	subs	r2, #134	@ 0x86
 800aa62:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa6e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ab18 <__ieee754_rem_pio2f+0x258>
 800aa72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa7a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800aa7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa8e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800aa92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aa96:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9e:	edcd 7a05 	vstr	s15, [sp, #20]
 800aaa2:	d11e      	bne.n	800aae2 <__ieee754_rem_pio2f+0x222>
 800aaa4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800aaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaac:	bf0c      	ite	eq
 800aaae:	2301      	moveq	r3, #1
 800aab0:	2302      	movne	r3, #2
 800aab2:	491a      	ldr	r1, [pc, #104]	@ (800ab1c <__ieee754_rem_pio2f+0x25c>)
 800aab4:	9101      	str	r1, [sp, #4]
 800aab6:	2102      	movs	r1, #2
 800aab8:	9100      	str	r1, [sp, #0]
 800aaba:	a803      	add	r0, sp, #12
 800aabc:	4621      	mov	r1, r4
 800aabe:	f000 f837 	bl	800ab30 <__kernel_rem_pio2f>
 800aac2:	2e00      	cmp	r6, #0
 800aac4:	f6bf af2f 	bge.w	800a926 <__ieee754_rem_pio2f+0x66>
 800aac8:	edd4 7a00 	vldr	s15, [r4]
 800aacc:	eef1 7a67 	vneg.f32	s15, s15
 800aad0:	edc4 7a00 	vstr	s15, [r4]
 800aad4:	edd4 7a01 	vldr	s15, [r4, #4]
 800aad8:	eef1 7a67 	vneg.f32	s15, s15
 800aadc:	edc4 7a01 	vstr	s15, [r4, #4]
 800aae0:	e782      	b.n	800a9e8 <__ieee754_rem_pio2f+0x128>
 800aae2:	2303      	movs	r3, #3
 800aae4:	e7e5      	b.n	800aab2 <__ieee754_rem_pio2f+0x1f2>
 800aae6:	bf00      	nop
 800aae8:	3f490fd8 	.word	0x3f490fd8
 800aaec:	4016cbe3 	.word	0x4016cbe3
 800aaf0:	3fc90f80 	.word	0x3fc90f80
 800aaf4:	3fc90fd0 	.word	0x3fc90fd0
 800aaf8:	37354400 	.word	0x37354400
 800aafc:	37354443 	.word	0x37354443
 800ab00:	2e85a308 	.word	0x2e85a308
 800ab04:	43490f80 	.word	0x43490f80
 800ab08:	3f22f984 	.word	0x3f22f984
 800ab0c:	0800b560 	.word	0x0800b560
 800ab10:	2e85a300 	.word	0x2e85a300
 800ab14:	248d3132 	.word	0x248d3132
 800ab18:	43800000 	.word	0x43800000
 800ab1c:	0800b5e0 	.word	0x0800b5e0

0800ab20 <fabsf>:
 800ab20:	ee10 3a10 	vmov	r3, s0
 800ab24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab28:	ee00 3a10 	vmov	s0, r3
 800ab2c:	4770      	bx	lr
	...

0800ab30 <__kernel_rem_pio2f>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	ed2d 8b04 	vpush	{d8-d9}
 800ab38:	b0d9      	sub	sp, #356	@ 0x164
 800ab3a:	4690      	mov	r8, r2
 800ab3c:	9001      	str	r0, [sp, #4]
 800ab3e:	4ab9      	ldr	r2, [pc, #740]	@ (800ae24 <__kernel_rem_pio2f+0x2f4>)
 800ab40:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800ab42:	f118 0f04 	cmn.w	r8, #4
 800ab46:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab50:	db27      	blt.n	800aba2 <__kernel_rem_pio2f+0x72>
 800ab52:	f1b8 0203 	subs.w	r2, r8, #3
 800ab56:	bf48      	it	mi
 800ab58:	f108 0204 	addmi.w	r2, r8, #4
 800ab5c:	10d2      	asrs	r2, r2, #3
 800ab5e:	1c55      	adds	r5, r2, #1
 800ab60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ab62:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800ab66:	00e8      	lsls	r0, r5, #3
 800ab68:	eba2 060b 	sub.w	r6, r2, fp
 800ab6c:	9002      	str	r0, [sp, #8]
 800ab6e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800ab72:	eb0a 0c0b 	add.w	ip, sl, fp
 800ab76:	ac1c      	add	r4, sp, #112	@ 0x70
 800ab78:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	4560      	cmp	r0, ip
 800ab80:	dd11      	ble.n	800aba6 <__kernel_rem_pio2f+0x76>
 800ab82:	a91c      	add	r1, sp, #112	@ 0x70
 800ab84:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ab88:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800ab8c:	f04f 0c00 	mov.w	ip, #0
 800ab90:	45d4      	cmp	ip, sl
 800ab92:	dc27      	bgt.n	800abe4 <__kernel_rem_pio2f+0xb4>
 800ab94:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ab98:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	2400      	movs	r4, #0
 800aba0:	e016      	b.n	800abd0 <__kernel_rem_pio2f+0xa0>
 800aba2:	2200      	movs	r2, #0
 800aba4:	e7db      	b.n	800ab5e <__kernel_rem_pio2f+0x2e>
 800aba6:	42c6      	cmn	r6, r0
 800aba8:	bf5d      	ittte	pl
 800abaa:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800abae:	ee07 1a90 	vmovpl	s15, r1
 800abb2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800abb6:	eef0 7a47 	vmovmi.f32	s15, s14
 800abba:	ece4 7a01 	vstmia	r4!, {s15}
 800abbe:	3001      	adds	r0, #1
 800abc0:	e7dd      	b.n	800ab7e <__kernel_rem_pio2f+0x4e>
 800abc2:	ecfe 6a01 	vldmia	lr!, {s13}
 800abc6:	ed96 7a00 	vldr	s14, [r6]
 800abca:	eee6 7a87 	vfma.f32	s15, s13, s14
 800abce:	3401      	adds	r4, #1
 800abd0:	455c      	cmp	r4, fp
 800abd2:	f1a6 0604 	sub.w	r6, r6, #4
 800abd6:	ddf4      	ble.n	800abc2 <__kernel_rem_pio2f+0x92>
 800abd8:	ece9 7a01 	vstmia	r9!, {s15}
 800abdc:	f10c 0c01 	add.w	ip, ip, #1
 800abe0:	3004      	adds	r0, #4
 800abe2:	e7d5      	b.n	800ab90 <__kernel_rem_pio2f+0x60>
 800abe4:	a908      	add	r1, sp, #32
 800abe6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abea:	9104      	str	r1, [sp, #16]
 800abec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800abee:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800ae30 <__kernel_rem_pio2f+0x300>
 800abf2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800ae2c <__kernel_rem_pio2f+0x2fc>
 800abf6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800abfa:	9203      	str	r2, [sp, #12]
 800abfc:	4654      	mov	r4, sl
 800abfe:	00a2      	lsls	r2, r4, #2
 800ac00:	9205      	str	r2, [sp, #20]
 800ac02:	aa58      	add	r2, sp, #352	@ 0x160
 800ac04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ac08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800ac0c:	a944      	add	r1, sp, #272	@ 0x110
 800ac0e:	aa08      	add	r2, sp, #32
 800ac10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ac14:	4694      	mov	ip, r2
 800ac16:	4626      	mov	r6, r4
 800ac18:	2e00      	cmp	r6, #0
 800ac1a:	f1a0 0004 	sub.w	r0, r0, #4
 800ac1e:	dc4c      	bgt.n	800acba <__kernel_rem_pio2f+0x18a>
 800ac20:	4628      	mov	r0, r5
 800ac22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac26:	f000 f9f5 	bl	800b014 <scalbnf>
 800ac2a:	eeb0 8a40 	vmov.f32	s16, s0
 800ac2e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ac32:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ac36:	f000 fa53 	bl	800b0e0 <floorf>
 800ac3a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800ac3e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ac42:	2d00      	cmp	r5, #0
 800ac44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac48:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ac4c:	ee17 9a90 	vmov	r9, s15
 800ac50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac54:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ac58:	dd41      	ble.n	800acde <__kernel_rem_pio2f+0x1ae>
 800ac5a:	f104 3cff 	add.w	ip, r4, #4294967295
 800ac5e:	a908      	add	r1, sp, #32
 800ac60:	f1c5 0e08 	rsb	lr, r5, #8
 800ac64:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ac68:	fa46 f00e 	asr.w	r0, r6, lr
 800ac6c:	4481      	add	r9, r0
 800ac6e:	fa00 f00e 	lsl.w	r0, r0, lr
 800ac72:	1a36      	subs	r6, r6, r0
 800ac74:	f1c5 0007 	rsb	r0, r5, #7
 800ac78:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ac7c:	4106      	asrs	r6, r0
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	dd3c      	ble.n	800acfc <__kernel_rem_pio2f+0x1cc>
 800ac82:	f04f 0e00 	mov.w	lr, #0
 800ac86:	f109 0901 	add.w	r9, r9, #1
 800ac8a:	4670      	mov	r0, lr
 800ac8c:	4574      	cmp	r4, lr
 800ac8e:	dc68      	bgt.n	800ad62 <__kernel_rem_pio2f+0x232>
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	dd03      	ble.n	800ac9c <__kernel_rem_pio2f+0x16c>
 800ac94:	2d01      	cmp	r5, #1
 800ac96:	d074      	beq.n	800ad82 <__kernel_rem_pio2f+0x252>
 800ac98:	2d02      	cmp	r5, #2
 800ac9a:	d07d      	beq.n	800ad98 <__kernel_rem_pio2f+0x268>
 800ac9c:	2e02      	cmp	r6, #2
 800ac9e:	d12d      	bne.n	800acfc <__kernel_rem_pio2f+0x1cc>
 800aca0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800aca4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800aca8:	b340      	cbz	r0, 800acfc <__kernel_rem_pio2f+0x1cc>
 800acaa:	4628      	mov	r0, r5
 800acac:	9306      	str	r3, [sp, #24]
 800acae:	f000 f9b1 	bl	800b014 <scalbnf>
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800acb8:	e020      	b.n	800acfc <__kernel_rem_pio2f+0x1cc>
 800acba:	ee60 7a28 	vmul.f32	s15, s0, s17
 800acbe:	3e01      	subs	r6, #1
 800acc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acc8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800accc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800acd0:	ecac 0a01 	vstmia	ip!, {s0}
 800acd4:	ed90 0a00 	vldr	s0, [r0]
 800acd8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800acdc:	e79c      	b.n	800ac18 <__kernel_rem_pio2f+0xe8>
 800acde:	d105      	bne.n	800acec <__kernel_rem_pio2f+0x1bc>
 800ace0:	1e60      	subs	r0, r4, #1
 800ace2:	a908      	add	r1, sp, #32
 800ace4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800ace8:	11f6      	asrs	r6, r6, #7
 800acea:	e7c8      	b.n	800ac7e <__kernel_rem_pio2f+0x14e>
 800acec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800acf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800acf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf8:	da31      	bge.n	800ad5e <__kernel_rem_pio2f+0x22e>
 800acfa:	2600      	movs	r6, #0
 800acfc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad04:	f040 8098 	bne.w	800ae38 <__kernel_rem_pio2f+0x308>
 800ad08:	1e60      	subs	r0, r4, #1
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4550      	cmp	r0, sl
 800ad0e:	da4b      	bge.n	800ada8 <__kernel_rem_pio2f+0x278>
 800ad10:	2a00      	cmp	r2, #0
 800ad12:	d065      	beq.n	800ade0 <__kernel_rem_pio2f+0x2b0>
 800ad14:	3c01      	subs	r4, #1
 800ad16:	ab08      	add	r3, sp, #32
 800ad18:	3d08      	subs	r5, #8
 800ad1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f8      	beq.n	800ad14 <__kernel_rem_pio2f+0x1e4>
 800ad22:	4628      	mov	r0, r5
 800ad24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ad28:	f000 f974 	bl	800b014 <scalbnf>
 800ad2c:	1c63      	adds	r3, r4, #1
 800ad2e:	aa44      	add	r2, sp, #272	@ 0x110
 800ad30:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ae30 <__kernel_rem_pio2f+0x300>
 800ad34:	0099      	lsls	r1, r3, #2
 800ad36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f280 80a9 	bge.w	800ae94 <__kernel_rem_pio2f+0x364>
 800ad42:	4623      	mov	r3, r4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f2c0 80c7 	blt.w	800aed8 <__kernel_rem_pio2f+0x3a8>
 800ad4a:	aa44      	add	r2, sp, #272	@ 0x110
 800ad4c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ad50:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ae28 <__kernel_rem_pio2f+0x2f8>
 800ad54:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	1ae2      	subs	r2, r4, r3
 800ad5c:	e0b1      	b.n	800aec2 <__kernel_rem_pio2f+0x392>
 800ad5e:	2602      	movs	r6, #2
 800ad60:	e78f      	b.n	800ac82 <__kernel_rem_pio2f+0x152>
 800ad62:	f852 1b04 	ldr.w	r1, [r2], #4
 800ad66:	b948      	cbnz	r0, 800ad7c <__kernel_rem_pio2f+0x24c>
 800ad68:	b121      	cbz	r1, 800ad74 <__kernel_rem_pio2f+0x244>
 800ad6a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ad6e:	f842 1c04 	str.w	r1, [r2, #-4]
 800ad72:	2101      	movs	r1, #1
 800ad74:	f10e 0e01 	add.w	lr, lr, #1
 800ad78:	4608      	mov	r0, r1
 800ad7a:	e787      	b.n	800ac8c <__kernel_rem_pio2f+0x15c>
 800ad7c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ad80:	e7f5      	b.n	800ad6e <__kernel_rem_pio2f+0x23e>
 800ad82:	f104 3cff 	add.w	ip, r4, #4294967295
 800ad86:	aa08      	add	r2, sp, #32
 800ad88:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ad8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ad90:	a908      	add	r1, sp, #32
 800ad92:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ad96:	e781      	b.n	800ac9c <__kernel_rem_pio2f+0x16c>
 800ad98:	f104 3cff 	add.w	ip, r4, #4294967295
 800ad9c:	aa08      	add	r2, sp, #32
 800ad9e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ada2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ada6:	e7f3      	b.n	800ad90 <__kernel_rem_pio2f+0x260>
 800ada8:	a908      	add	r1, sp, #32
 800adaa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800adae:	3801      	subs	r0, #1
 800adb0:	430a      	orrs	r2, r1
 800adb2:	e7ab      	b.n	800ad0c <__kernel_rem_pio2f+0x1dc>
 800adb4:	3201      	adds	r2, #1
 800adb6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d0fa      	beq.n	800adb4 <__kernel_rem_pio2f+0x284>
 800adbe:	9905      	ldr	r1, [sp, #20]
 800adc0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800adc4:	eb0d 0001 	add.w	r0, sp, r1
 800adc8:	18e6      	adds	r6, r4, r3
 800adca:	a91c      	add	r1, sp, #112	@ 0x70
 800adcc:	f104 0c01 	add.w	ip, r4, #1
 800add0:	384c      	subs	r0, #76	@ 0x4c
 800add2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800add6:	4422      	add	r2, r4
 800add8:	4562      	cmp	r2, ip
 800adda:	da04      	bge.n	800ade6 <__kernel_rem_pio2f+0x2b6>
 800addc:	4614      	mov	r4, r2
 800adde:	e70e      	b.n	800abfe <__kernel_rem_pio2f+0xce>
 800ade0:	9804      	ldr	r0, [sp, #16]
 800ade2:	2201      	movs	r2, #1
 800ade4:	e7e7      	b.n	800adb6 <__kernel_rem_pio2f+0x286>
 800ade6:	9903      	ldr	r1, [sp, #12]
 800ade8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800adec:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800adf0:	9105      	str	r1, [sp, #20]
 800adf2:	ee07 1a90 	vmov	s15, r1
 800adf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adfa:	2400      	movs	r4, #0
 800adfc:	ece6 7a01 	vstmia	r6!, {s15}
 800ae00:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800ae04:	46b1      	mov	r9, r6
 800ae06:	455c      	cmp	r4, fp
 800ae08:	dd04      	ble.n	800ae14 <__kernel_rem_pio2f+0x2e4>
 800ae0a:	ece0 7a01 	vstmia	r0!, {s15}
 800ae0e:	f10c 0c01 	add.w	ip, ip, #1
 800ae12:	e7e1      	b.n	800add8 <__kernel_rem_pio2f+0x2a8>
 800ae14:	ecfe 6a01 	vldmia	lr!, {s13}
 800ae18:	ed39 7a01 	vldmdb	r9!, {s14}
 800ae1c:	3401      	adds	r4, #1
 800ae1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae22:	e7f0      	b.n	800ae06 <__kernel_rem_pio2f+0x2d6>
 800ae24:	0800b924 	.word	0x0800b924
 800ae28:	0800b8f8 	.word	0x0800b8f8
 800ae2c:	43800000 	.word	0x43800000
 800ae30:	3b800000 	.word	0x3b800000
 800ae34:	00000000 	.word	0x00000000
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae3e:	eba3 0008 	sub.w	r0, r3, r8
 800ae42:	f000 f8e7 	bl	800b014 <scalbnf>
 800ae46:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ae2c <__kernel_rem_pio2f+0x2fc>
 800ae4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae52:	db19      	blt.n	800ae88 <__kernel_rem_pio2f+0x358>
 800ae54:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ae30 <__kernel_rem_pio2f+0x300>
 800ae58:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ae5c:	aa08      	add	r2, sp, #32
 800ae5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae62:	3508      	adds	r5, #8
 800ae64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae68:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ae6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae74:	ee10 3a10 	vmov	r3, s0
 800ae78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ae7c:	ee17 3a90 	vmov	r3, s15
 800ae80:	3401      	adds	r4, #1
 800ae82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ae86:	e74c      	b.n	800ad22 <__kernel_rem_pio2f+0x1f2>
 800ae88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ae8c:	aa08      	add	r2, sp, #32
 800ae8e:	ee10 3a10 	vmov	r3, s0
 800ae92:	e7f6      	b.n	800ae82 <__kernel_rem_pio2f+0x352>
 800ae94:	a808      	add	r0, sp, #32
 800ae96:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ae9a:	9001      	str	r0, [sp, #4]
 800ae9c:	ee07 0a90 	vmov	s15, r0
 800aea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea4:	3b01      	subs	r3, #1
 800aea6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aeaa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aeae:	ed62 7a01 	vstmdb	r2!, {s15}
 800aeb2:	e743      	b.n	800ad3c <__kernel_rem_pio2f+0x20c>
 800aeb4:	ecfc 6a01 	vldmia	ip!, {s13}
 800aeb8:	ecb5 7a01 	vldmia	r5!, {s14}
 800aebc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aec0:	3001      	adds	r0, #1
 800aec2:	4550      	cmp	r0, sl
 800aec4:	dc01      	bgt.n	800aeca <__kernel_rem_pio2f+0x39a>
 800aec6:	4282      	cmp	r2, r0
 800aec8:	daf4      	bge.n	800aeb4 <__kernel_rem_pio2f+0x384>
 800aeca:	a858      	add	r0, sp, #352	@ 0x160
 800aecc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aed0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800aed4:	3b01      	subs	r3, #1
 800aed6:	e735      	b.n	800ad44 <__kernel_rem_pio2f+0x214>
 800aed8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	dc09      	bgt.n	800aef2 <__kernel_rem_pio2f+0x3c2>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	dc2b      	bgt.n	800af3a <__kernel_rem_pio2f+0x40a>
 800aee2:	d044      	beq.n	800af6e <__kernel_rem_pio2f+0x43e>
 800aee4:	f009 0007 	and.w	r0, r9, #7
 800aee8:	b059      	add	sp, #356	@ 0x164
 800aeea:	ecbd 8b04 	vpop	{d8-d9}
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d1f5      	bne.n	800aee4 <__kernel_rem_pio2f+0x3b4>
 800aef8:	aa30      	add	r2, sp, #192	@ 0xc0
 800aefa:	1f0b      	subs	r3, r1, #4
 800aefc:	4413      	add	r3, r2
 800aefe:	461a      	mov	r2, r3
 800af00:	4620      	mov	r0, r4
 800af02:	2800      	cmp	r0, #0
 800af04:	f1a2 0204 	sub.w	r2, r2, #4
 800af08:	dc52      	bgt.n	800afb0 <__kernel_rem_pio2f+0x480>
 800af0a:	4622      	mov	r2, r4
 800af0c:	2a01      	cmp	r2, #1
 800af0e:	f1a3 0304 	sub.w	r3, r3, #4
 800af12:	dc5d      	bgt.n	800afd0 <__kernel_rem_pio2f+0x4a0>
 800af14:	ab30      	add	r3, sp, #192	@ 0xc0
 800af16:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800af1a:	440b      	add	r3, r1
 800af1c:	2c01      	cmp	r4, #1
 800af1e:	dc67      	bgt.n	800aff0 <__kernel_rem_pio2f+0x4c0>
 800af20:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800af24:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800af28:	2e00      	cmp	r6, #0
 800af2a:	d167      	bne.n	800affc <__kernel_rem_pio2f+0x4cc>
 800af2c:	edc7 6a00 	vstr	s13, [r7]
 800af30:	ed87 7a01 	vstr	s14, [r7, #4]
 800af34:	edc7 7a02 	vstr	s15, [r7, #8]
 800af38:	e7d4      	b.n	800aee4 <__kernel_rem_pio2f+0x3b4>
 800af3a:	ab30      	add	r3, sp, #192	@ 0xc0
 800af3c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800af40:	440b      	add	r3, r1
 800af42:	4622      	mov	r2, r4
 800af44:	2a00      	cmp	r2, #0
 800af46:	da24      	bge.n	800af92 <__kernel_rem_pio2f+0x462>
 800af48:	b34e      	cbz	r6, 800af9e <__kernel_rem_pio2f+0x46e>
 800af4a:	eef1 7a47 	vneg.f32	s15, s14
 800af4e:	edc7 7a00 	vstr	s15, [r7]
 800af52:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800af56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af5a:	aa31      	add	r2, sp, #196	@ 0xc4
 800af5c:	2301      	movs	r3, #1
 800af5e:	429c      	cmp	r4, r3
 800af60:	da20      	bge.n	800afa4 <__kernel_rem_pio2f+0x474>
 800af62:	b10e      	cbz	r6, 800af68 <__kernel_rem_pio2f+0x438>
 800af64:	eef1 7a67 	vneg.f32	s15, s15
 800af68:	edc7 7a01 	vstr	s15, [r7, #4]
 800af6c:	e7ba      	b.n	800aee4 <__kernel_rem_pio2f+0x3b4>
 800af6e:	ab30      	add	r3, sp, #192	@ 0xc0
 800af70:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800ae34 <__kernel_rem_pio2f+0x304>
 800af74:	440b      	add	r3, r1
 800af76:	2c00      	cmp	r4, #0
 800af78:	da05      	bge.n	800af86 <__kernel_rem_pio2f+0x456>
 800af7a:	b10e      	cbz	r6, 800af80 <__kernel_rem_pio2f+0x450>
 800af7c:	eef1 7a67 	vneg.f32	s15, s15
 800af80:	edc7 7a00 	vstr	s15, [r7]
 800af84:	e7ae      	b.n	800aee4 <__kernel_rem_pio2f+0x3b4>
 800af86:	ed33 7a01 	vldmdb	r3!, {s14}
 800af8a:	3c01      	subs	r4, #1
 800af8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af90:	e7f1      	b.n	800af76 <__kernel_rem_pio2f+0x446>
 800af92:	ed73 7a01 	vldmdb	r3!, {s15}
 800af96:	3a01      	subs	r2, #1
 800af98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af9c:	e7d2      	b.n	800af44 <__kernel_rem_pio2f+0x414>
 800af9e:	eef0 7a47 	vmov.f32	s15, s14
 800afa2:	e7d4      	b.n	800af4e <__kernel_rem_pio2f+0x41e>
 800afa4:	ecb2 7a01 	vldmia	r2!, {s14}
 800afa8:	3301      	adds	r3, #1
 800afaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afae:	e7d6      	b.n	800af5e <__kernel_rem_pio2f+0x42e>
 800afb0:	edd2 7a00 	vldr	s15, [r2]
 800afb4:	edd2 6a01 	vldr	s13, [r2, #4]
 800afb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800afbc:	3801      	subs	r0, #1
 800afbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afc2:	ed82 7a00 	vstr	s14, [r2]
 800afc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afca:	edc2 7a01 	vstr	s15, [r2, #4]
 800afce:	e798      	b.n	800af02 <__kernel_rem_pio2f+0x3d2>
 800afd0:	edd3 7a00 	vldr	s15, [r3]
 800afd4:	edd3 6a01 	vldr	s13, [r3, #4]
 800afd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800afdc:	3a01      	subs	r2, #1
 800afde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afe2:	ed83 7a00 	vstr	s14, [r3]
 800afe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afea:	edc3 7a01 	vstr	s15, [r3, #4]
 800afee:	e78d      	b.n	800af0c <__kernel_rem_pio2f+0x3dc>
 800aff0:	ed33 7a01 	vldmdb	r3!, {s14}
 800aff4:	3c01      	subs	r4, #1
 800aff6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800affa:	e78f      	b.n	800af1c <__kernel_rem_pio2f+0x3ec>
 800affc:	eef1 6a66 	vneg.f32	s13, s13
 800b000:	eeb1 7a47 	vneg.f32	s14, s14
 800b004:	edc7 6a00 	vstr	s13, [r7]
 800b008:	ed87 7a01 	vstr	s14, [r7, #4]
 800b00c:	eef1 7a67 	vneg.f32	s15, s15
 800b010:	e790      	b.n	800af34 <__kernel_rem_pio2f+0x404>
 800b012:	bf00      	nop

0800b014 <scalbnf>:
 800b014:	ee10 3a10 	vmov	r3, s0
 800b018:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b01c:	d02b      	beq.n	800b076 <scalbnf+0x62>
 800b01e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b022:	d302      	bcc.n	800b02a <scalbnf+0x16>
 800b024:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b028:	4770      	bx	lr
 800b02a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b02e:	d123      	bne.n	800b078 <scalbnf+0x64>
 800b030:	4b24      	ldr	r3, [pc, #144]	@ (800b0c4 <scalbnf+0xb0>)
 800b032:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b0c8 <scalbnf+0xb4>
 800b036:	4298      	cmp	r0, r3
 800b038:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b03c:	db17      	blt.n	800b06e <scalbnf+0x5a>
 800b03e:	ee10 3a10 	vmov	r3, s0
 800b042:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b046:	3a19      	subs	r2, #25
 800b048:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b04c:	4288      	cmp	r0, r1
 800b04e:	dd15      	ble.n	800b07c <scalbnf+0x68>
 800b050:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b0cc <scalbnf+0xb8>
 800b054:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b0d0 <scalbnf+0xbc>
 800b058:	ee10 3a10 	vmov	r3, s0
 800b05c:	eeb0 7a67 	vmov.f32	s14, s15
 800b060:	2b00      	cmp	r3, #0
 800b062:	bfb8      	it	lt
 800b064:	eef0 7a66 	vmovlt.f32	s15, s13
 800b068:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b06c:	4770      	bx	lr
 800b06e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b0d4 <scalbnf+0xc0>
 800b072:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b076:	4770      	bx	lr
 800b078:	0dd2      	lsrs	r2, r2, #23
 800b07a:	e7e5      	b.n	800b048 <scalbnf+0x34>
 800b07c:	4410      	add	r0, r2
 800b07e:	28fe      	cmp	r0, #254	@ 0xfe
 800b080:	dce6      	bgt.n	800b050 <scalbnf+0x3c>
 800b082:	2800      	cmp	r0, #0
 800b084:	dd06      	ble.n	800b094 <scalbnf+0x80>
 800b086:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b08a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b08e:	ee00 3a10 	vmov	s0, r3
 800b092:	4770      	bx	lr
 800b094:	f110 0f16 	cmn.w	r0, #22
 800b098:	da09      	bge.n	800b0ae <scalbnf+0x9a>
 800b09a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b0d4 <scalbnf+0xc0>
 800b09e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b0d8 <scalbnf+0xc4>
 800b0a2:	ee10 3a10 	vmov	r3, s0
 800b0a6:	eeb0 7a67 	vmov.f32	s14, s15
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	e7d9      	b.n	800b062 <scalbnf+0x4e>
 800b0ae:	3019      	adds	r0, #25
 800b0b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b0b4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b0b8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b0dc <scalbnf+0xc8>
 800b0bc:	ee07 3a90 	vmov	s15, r3
 800b0c0:	e7d7      	b.n	800b072 <scalbnf+0x5e>
 800b0c2:	bf00      	nop
 800b0c4:	ffff3cb0 	.word	0xffff3cb0
 800b0c8:	4c000000 	.word	0x4c000000
 800b0cc:	7149f2ca 	.word	0x7149f2ca
 800b0d0:	f149f2ca 	.word	0xf149f2ca
 800b0d4:	0da24260 	.word	0x0da24260
 800b0d8:	8da24260 	.word	0x8da24260
 800b0dc:	33000000 	.word	0x33000000

0800b0e0 <floorf>:
 800b0e0:	ee10 3a10 	vmov	r3, s0
 800b0e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b0e8:	3a7f      	subs	r2, #127	@ 0x7f
 800b0ea:	2a16      	cmp	r2, #22
 800b0ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b0f0:	dc2b      	bgt.n	800b14a <floorf+0x6a>
 800b0f2:	2a00      	cmp	r2, #0
 800b0f4:	da12      	bge.n	800b11c <floorf+0x3c>
 800b0f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b15c <floorf+0x7c>
 800b0fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b106:	dd06      	ble.n	800b116 <floorf+0x36>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da24      	bge.n	800b156 <floorf+0x76>
 800b10c:	2900      	cmp	r1, #0
 800b10e:	4b14      	ldr	r3, [pc, #80]	@ (800b160 <floorf+0x80>)
 800b110:	bf08      	it	eq
 800b112:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b116:	ee00 3a10 	vmov	s0, r3
 800b11a:	4770      	bx	lr
 800b11c:	4911      	ldr	r1, [pc, #68]	@ (800b164 <floorf+0x84>)
 800b11e:	4111      	asrs	r1, r2
 800b120:	420b      	tst	r3, r1
 800b122:	d0fa      	beq.n	800b11a <floorf+0x3a>
 800b124:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b15c <floorf+0x7c>
 800b128:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b12c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b134:	ddef      	ble.n	800b116 <floorf+0x36>
 800b136:	2b00      	cmp	r3, #0
 800b138:	bfbe      	ittt	lt
 800b13a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b13e:	fa40 f202 	asrlt.w	r2, r0, r2
 800b142:	189b      	addlt	r3, r3, r2
 800b144:	ea23 0301 	bic.w	r3, r3, r1
 800b148:	e7e5      	b.n	800b116 <floorf+0x36>
 800b14a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b14e:	d3e4      	bcc.n	800b11a <floorf+0x3a>
 800b150:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b154:	4770      	bx	lr
 800b156:	2300      	movs	r3, #0
 800b158:	e7dd      	b.n	800b116 <floorf+0x36>
 800b15a:	bf00      	nop
 800b15c:	7149f2ca 	.word	0x7149f2ca
 800b160:	bf800000 	.word	0xbf800000
 800b164:	007fffff 	.word	0x007fffff

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
